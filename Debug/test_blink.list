
test_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080028b8  080028b8  000128b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028e4  080028e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080028e4  080028e4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028e4  080028e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028e4  080028e4  000128e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028e8  080028e8  000128e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  080028f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  080028f8  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009456  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015cd  00000000  00000000  0002948b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b28  00000000  00000000  0002aa58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a70  00000000  00000000  0002b580  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000169f4  00000000  00000000  0002bff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008054  00000000  00000000  000429e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085dd0  00000000  00000000  0004aa38  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d0808  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ebc  00000000  00000000  000d0884  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080028a0 	.word	0x080028a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080028a0 	.word	0x080028a0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fbc2 	bl	80008d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f87e 	bl	8000254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f9d6 	bl	8000508 <MX_GPIO_Init>
  MX_TIM1_Init();
 800015c:	f000 f8be 	bl	80002dc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f9a8 	bl	80004b4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000164:	f000 f958 	bl	8000418 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8000168:	210c      	movs	r1, #12
 800016a:	4836      	ldr	r0, [pc, #216]	; (8000244 <main+0xf8>)
 800016c:	f001 fbe8 	bl	8001940 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000170:	4835      	ldr	r0, [pc, #212]	; (8000248 <main+0xfc>)
 8000172:	f001 fb3b 	bl	80017ec <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,100);
 8000176:	4b33      	ldr	r3, [pc, #204]	; (8000244 <main+0xf8>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	2264      	movs	r2, #100	; 0x64
 800017c:	641a      	str	r2, [r3, #64]	; 0x40
  while (1)
  {
	  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);

	  HAL_GPIO_TogglePin(led_0_GPIO_Port,led_0_Pin);
 800017e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000182:	4832      	ldr	r0, [pc, #200]	; (800024c <main+0x100>)
 8000184:	f000 feac 	bl	8000ee0 <HAL_GPIO_TogglePin>
	  HAL_GPIO_WritePin(led_1_GPIO_Port,led_1_Pin, SET);
 8000188:	2201      	movs	r2, #1
 800018a:	2102      	movs	r1, #2
 800018c:	4830      	ldr	r0, [pc, #192]	; (8000250 <main+0x104>)
 800018e:	f000 fe8f 	bl	8000eb0 <HAL_GPIO_WritePin>
	  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,80);
 8000192:	4b2c      	ldr	r3, [pc, #176]	; (8000244 <main+0xf8>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	2250      	movs	r2, #80	; 0x50
 8000198:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(500);
 800019a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800019e:	f000 fbfd 	bl	800099c <HAL_Delay>

	  HAL_GPIO_WritePin(led_1_GPIO_Port,led_1_Pin, RESET);
 80001a2:	2200      	movs	r2, #0
 80001a4:	2102      	movs	r1, #2
 80001a6:	482a      	ldr	r0, [pc, #168]	; (8000250 <main+0x104>)
 80001a8:	f000 fe82 	bl	8000eb0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(led_2_GPIO_Port,led_2_Pin, SET);
 80001ac:	2201      	movs	r2, #1
 80001ae:	2104      	movs	r1, #4
 80001b0:	4827      	ldr	r0, [pc, #156]	; (8000250 <main+0x104>)
 80001b2:	f000 fe7d 	bl	8000eb0 <HAL_GPIO_WritePin>

	  HAL_Delay(500);
 80001b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001ba:	f000 fbef 	bl	800099c <HAL_Delay>

	  HAL_GPIO_WritePin(led_2_GPIO_Port,led_2_Pin, RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	2104      	movs	r1, #4
 80001c2:	4823      	ldr	r0, [pc, #140]	; (8000250 <main+0x104>)
 80001c4:	f000 fe74 	bl	8000eb0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(led_3_GPIO_Port,led_3_Pin, SET);
 80001c8:	2201      	movs	r2, #1
 80001ca:	2108      	movs	r1, #8
 80001cc:	4820      	ldr	r0, [pc, #128]	; (8000250 <main+0x104>)
 80001ce:	f000 fe6f 	bl	8000eb0 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80001d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001d6:	f000 fbe1 	bl	800099c <HAL_Delay>

	  HAL_GPIO_WritePin(led_3_GPIO_Port,led_3_Pin, RESET);
 80001da:	2200      	movs	r2, #0
 80001dc:	2108      	movs	r1, #8
 80001de:	481c      	ldr	r0, [pc, #112]	; (8000250 <main+0x104>)
 80001e0:	f000 fe66 	bl	8000eb0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(led_4_GPIO_Port,led_4_Pin, SET);
 80001e4:	2201      	movs	r2, #1
 80001e6:	2110      	movs	r1, #16
 80001e8:	4819      	ldr	r0, [pc, #100]	; (8000250 <main+0x104>)
 80001ea:	f000 fe61 	bl	8000eb0 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80001ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001f2:	f000 fbd3 	bl	800099c <HAL_Delay>

	  HAL_GPIO_WritePin(led_4_GPIO_Port,led_4_Pin, RESET);
 80001f6:	2200      	movs	r2, #0
 80001f8:	2110      	movs	r1, #16
 80001fa:	4815      	ldr	r0, [pc, #84]	; (8000250 <main+0x104>)
 80001fc:	f000 fe58 	bl	8000eb0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(led_5_GPIO_Port,led_5_Pin, SET);
 8000200:	2201      	movs	r2, #1
 8000202:	2120      	movs	r1, #32
 8000204:	4812      	ldr	r0, [pc, #72]	; (8000250 <main+0x104>)
 8000206:	f000 fe53 	bl	8000eb0 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800020a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800020e:	f000 fbc5 	bl	800099c <HAL_Delay>
/*
	  HAL_GPIO_WritePin(led_4_GPIO_Port,led_1_Pin, RESET);
	  HAL_GPIO_WritePin(led_5_GPIO_Port,led_2_Pin, SET);
	  HAL_Delay(500);
*/
	  HAL_GPIO_WritePin(led_5_GPIO_Port,led_5_Pin, RESET);
 8000212:	2200      	movs	r2, #0
 8000214:	2120      	movs	r1, #32
 8000216:	480e      	ldr	r0, [pc, #56]	; (8000250 <main+0x104>)
 8000218:	f000 fe4a 	bl	8000eb0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(led_6_GPIO_Port,led_6_Pin, SET);
 800021c:	2201      	movs	r2, #1
 800021e:	2140      	movs	r1, #64	; 0x40
 8000220:	480b      	ldr	r0, [pc, #44]	; (8000250 <main+0x104>)
 8000222:	f000 fe45 	bl	8000eb0 <HAL_GPIO_WritePin>
	  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,20);
 8000226:	4b07      	ldr	r3, [pc, #28]	; (8000244 <main+0xf8>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	2214      	movs	r2, #20
 800022c:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(500);
 800022e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000232:	f000 fbb3 	bl	800099c <HAL_Delay>

	  HAL_GPIO_WritePin(led_6_GPIO_Port,led_6_Pin, RESET);
 8000236:	2200      	movs	r2, #0
 8000238:	2140      	movs	r1, #64	; 0x40
 800023a:	4805      	ldr	r0, [pc, #20]	; (8000250 <main+0x104>)
 800023c:	f000 fe38 	bl	8000eb0 <HAL_GPIO_WritePin>
	  HAL_GPIO_TogglePin(led_0_GPIO_Port,led_0_Pin);
 8000240:	e79d      	b.n	800017e <main+0x32>
 8000242:	bf00      	nop
 8000244:	20000068 	.word	0x20000068
 8000248:	200000b0 	.word	0x200000b0
 800024c:	40011000 	.word	0x40011000
 8000250:	40010800 	.word	0x40010800

08000254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b090      	sub	sp, #64	; 0x40
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	f107 0318 	add.w	r3, r7, #24
 800025e:	2228      	movs	r2, #40	; 0x28
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f002 fb14 	bl	8002890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]
 8000274:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000276:	2301      	movs	r3, #1
 8000278:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800027a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000284:	2301      	movs	r3, #1
 8000286:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000288:	2302      	movs	r3, #2
 800028a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800028c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000290:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000292:	2300      	movs	r3, #0
 8000294:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000296:	f107 0318 	add.w	r3, r7, #24
 800029a:	4618      	mov	r0, r3
 800029c:	f000 fe3a 	bl	8000f14 <HAL_RCC_OscConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x56>
  {
    Error_Handler();
 80002a6:	f000 f9c7 	bl	8000638 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002aa:	230f      	movs	r3, #15
 80002ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ae:	2302      	movs	r3, #2
 80002b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 f8a6 	bl	8001414 <HAL_RCC_ClockConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80002ce:	f000 f9b3 	bl	8000638 <Error_Handler>
  }
}
 80002d2:	bf00      	nop
 80002d4:	3740      	adds	r7, #64	; 0x40
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b096      	sub	sp, #88	; 0x58
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	611a      	str	r2, [r3, #16]
 800030a:	615a      	str	r2, [r3, #20]
 800030c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2220      	movs	r2, #32
 8000312:	2100      	movs	r1, #0
 8000314:	4618      	mov	r0, r3
 8000316:	f002 fabb 	bl	8002890 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800031a:	4b3d      	ldr	r3, [pc, #244]	; (8000410 <MX_TIM1_Init+0x134>)
 800031c:	4a3d      	ldr	r2, [pc, #244]	; (8000414 <MX_TIM1_Init+0x138>)
 800031e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1599;
 8000320:	4b3b      	ldr	r3, [pc, #236]	; (8000410 <MX_TIM1_Init+0x134>)
 8000322:	f240 623f 	movw	r2, #1599	; 0x63f
 8000326:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000328:	4b39      	ldr	r3, [pc, #228]	; (8000410 <MX_TIM1_Init+0x134>)
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 800032e:	4b38      	ldr	r3, [pc, #224]	; (8000410 <MX_TIM1_Init+0x134>)
 8000330:	22c8      	movs	r2, #200	; 0xc8
 8000332:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000334:	4b36      	ldr	r3, [pc, #216]	; (8000410 <MX_TIM1_Init+0x134>)
 8000336:	2200      	movs	r2, #0
 8000338:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800033a:	4b35      	ldr	r3, [pc, #212]	; (8000410 <MX_TIM1_Init+0x134>)
 800033c:	2200      	movs	r2, #0
 800033e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000340:	4b33      	ldr	r3, [pc, #204]	; (8000410 <MX_TIM1_Init+0x134>)
 8000342:	2280      	movs	r2, #128	; 0x80
 8000344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000346:	4832      	ldr	r0, [pc, #200]	; (8000410 <MX_TIM1_Init+0x134>)
 8000348:	f001 fa00 	bl	800174c <HAL_TIM_Base_Init>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000352:	f000 f971 	bl	8000638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800035a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800035c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000360:	4619      	mov	r1, r3
 8000362:	482b      	ldr	r0, [pc, #172]	; (8000410 <MX_TIM1_Init+0x134>)
 8000364:	f001 fd54 	bl	8001e10 <HAL_TIM_ConfigClockSource>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800036e:	f000 f963 	bl	8000638 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000372:	4827      	ldr	r0, [pc, #156]	; (8000410 <MX_TIM1_Init+0x134>)
 8000374:	f001 fa8c 	bl	8001890 <HAL_TIM_PWM_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800037e:	f000 f95b 	bl	8000638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000382:	2300      	movs	r3, #0
 8000384:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000386:	2300      	movs	r3, #0
 8000388:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800038a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800038e:	4619      	mov	r1, r3
 8000390:	481f      	ldr	r0, [pc, #124]	; (8000410 <MX_TIM1_Init+0x134>)
 8000392:	f002 f8bd 	bl	8002510 <HAL_TIMEx_MasterConfigSynchronization>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800039c:	f000 f94c 	bl	8000638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003a0:	2360      	movs	r3, #96	; 0x60
 80003a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 100;
 80003a4:	2364      	movs	r3, #100	; 0x64
 80003a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003a8:	2300      	movs	r3, #0
 80003aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003ac:	2300      	movs	r3, #0
 80003ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003b0:	2300      	movs	r3, #0
 80003b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003b4:	2300      	movs	r3, #0
 80003b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80003b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003bc:	220c      	movs	r2, #12
 80003be:	4619      	mov	r1, r3
 80003c0:	4813      	ldr	r0, [pc, #76]	; (8000410 <MX_TIM1_Init+0x134>)
 80003c2:	f001 fc67 	bl	8001c94 <HAL_TIM_PWM_ConfigChannel>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80003cc:	f000 f934 	bl	8000638 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003d0:	2300      	movs	r3, #0
 80003d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003d4:	2300      	movs	r3, #0
 80003d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003d8:	2300      	movs	r3, #0
 80003da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003dc:	2300      	movs	r3, #0
 80003de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003e0:	2300      	movs	r3, #0
 80003e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003ea:	2300      	movs	r3, #0
 80003ec:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	4619      	mov	r1, r3
 80003f2:	4807      	ldr	r0, [pc, #28]	; (8000410 <MX_TIM1_Init+0x134>)
 80003f4:	f002 f8ea 	bl	80025cc <HAL_TIMEx_ConfigBreakDeadTime>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80003fe:	f000 f91b 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000402:	4803      	ldr	r0, [pc, #12]	; (8000410 <MX_TIM1_Init+0x134>)
 8000404:	f000 f988 	bl	8000718 <HAL_TIM_MspPostInit>

}
 8000408:	bf00      	nop
 800040a:	3758      	adds	r7, #88	; 0x58
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000068 	.word	0x20000068
 8000414:	40012c00 	.word	0x40012c00

08000418 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800041e:	f107 0308 	add.w	r3, r7, #8
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800042c:	463b      	mov	r3, r7
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000434:	4b1e      	ldr	r3, [pc, #120]	; (80004b0 <MX_TIM2_Init+0x98>)
 8000436:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800043a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39999;
 800043c:	4b1c      	ldr	r3, [pc, #112]	; (80004b0 <MX_TIM2_Init+0x98>)
 800043e:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000442:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000444:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <MX_TIM2_Init+0x98>)
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 800044a:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <MX_TIM2_Init+0x98>)
 800044c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000450:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000452:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <MX_TIM2_Init+0x98>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000458:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <MX_TIM2_Init+0x98>)
 800045a:	2200      	movs	r2, #0
 800045c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800045e:	4814      	ldr	r0, [pc, #80]	; (80004b0 <MX_TIM2_Init+0x98>)
 8000460:	f001 f974 	bl	800174c <HAL_TIM_Base_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800046a:	f000 f8e5 	bl	8000638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800046e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000472:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000474:	f107 0308 	add.w	r3, r7, #8
 8000478:	4619      	mov	r1, r3
 800047a:	480d      	ldr	r0, [pc, #52]	; (80004b0 <MX_TIM2_Init+0x98>)
 800047c:	f001 fcc8 	bl	8001e10 <HAL_TIM_ConfigClockSource>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000486:	f000 f8d7 	bl	8000638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800048a:	2300      	movs	r3, #0
 800048c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800048e:	2300      	movs	r3, #0
 8000490:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000492:	463b      	mov	r3, r7
 8000494:	4619      	mov	r1, r3
 8000496:	4806      	ldr	r0, [pc, #24]	; (80004b0 <MX_TIM2_Init+0x98>)
 8000498:	f002 f83a 	bl	8002510 <HAL_TIMEx_MasterConfigSynchronization>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80004a2:	f000 f8c9 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004a6:	bf00      	nop
 80004a8:	3718      	adds	r7, #24
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	200000b0 	.word	0x200000b0

080004b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004b8:	4b11      	ldr	r3, [pc, #68]	; (8000500 <MX_USART1_UART_Init+0x4c>)
 80004ba:	4a12      	ldr	r2, [pc, #72]	; (8000504 <MX_USART1_UART_Init+0x50>)
 80004bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004be:	4b10      	ldr	r3, [pc, #64]	; (8000500 <MX_USART1_UART_Init+0x4c>)
 80004c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <MX_USART1_UART_Init+0x4c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004cc:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <MX_USART1_UART_Init+0x4c>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <MX_USART1_UART_Init+0x4c>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <MX_USART1_UART_Init+0x4c>)
 80004da:	220c      	movs	r2, #12
 80004dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <MX_USART1_UART_Init+0x4c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <MX_USART1_UART_Init+0x4c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004ea:	4805      	ldr	r0, [pc, #20]	; (8000500 <MX_USART1_UART_Init+0x4c>)
 80004ec:	f002 f8d1 	bl	8002692 <HAL_UART_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004f6:	f000 f89f 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000028 	.word	0x20000028
 8000504:	40013800 	.word	0x40013800

08000508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0310 	add.w	r3, r7, #16
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051c:	4b38      	ldr	r3, [pc, #224]	; (8000600 <MX_GPIO_Init+0xf8>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a37      	ldr	r2, [pc, #220]	; (8000600 <MX_GPIO_Init+0xf8>)
 8000522:	f043 0310 	orr.w	r3, r3, #16
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b35      	ldr	r3, [pc, #212]	; (8000600 <MX_GPIO_Init+0xf8>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f003 0310 	and.w	r3, r3, #16
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000534:	4b32      	ldr	r3, [pc, #200]	; (8000600 <MX_GPIO_Init+0xf8>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a31      	ldr	r2, [pc, #196]	; (8000600 <MX_GPIO_Init+0xf8>)
 800053a:	f043 0320 	orr.w	r3, r3, #32
 800053e:	6193      	str	r3, [r2, #24]
 8000540:	4b2f      	ldr	r3, [pc, #188]	; (8000600 <MX_GPIO_Init+0xf8>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f003 0320 	and.w	r3, r3, #32
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054c:	4b2c      	ldr	r3, [pc, #176]	; (8000600 <MX_GPIO_Init+0xf8>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a2b      	ldr	r2, [pc, #172]	; (8000600 <MX_GPIO_Init+0xf8>)
 8000552:	f043 0304 	orr.w	r3, r3, #4
 8000556:	6193      	str	r3, [r2, #24]
 8000558:	4b29      	ldr	r3, [pc, #164]	; (8000600 <MX_GPIO_Init+0xf8>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	f003 0304 	and.w	r3, r3, #4
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000564:	4b26      	ldr	r3, [pc, #152]	; (8000600 <MX_GPIO_Init+0xf8>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a25      	ldr	r2, [pc, #148]	; (8000600 <MX_GPIO_Init+0xf8>)
 800056a:	f043 0308 	orr.w	r3, r3, #8
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b23      	ldr	r3, [pc, #140]	; (8000600 <MX_GPIO_Init+0xf8>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f003 0308 	and.w	r3, r3, #8
 8000578:	603b      	str	r3, [r7, #0]
 800057a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_0_GPIO_Port, led_0_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000582:	4820      	ldr	r0, [pc, #128]	; (8000604 <MX_GPIO_Init+0xfc>)
 8000584:	f000 fc94 	bl	8000eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_1_Pin|led_2_Pin|led_3_Pin|led_4_Pin 
 8000588:	2200      	movs	r2, #0
 800058a:	f248 117e 	movw	r1, #33150	; 0x817e
 800058e:	481e      	ldr	r0, [pc, #120]	; (8000608 <MX_GPIO_Init+0x100>)
 8000590:	f000 fc8e 	bl	8000eb0 <HAL_GPIO_WritePin>
                          |led_5_Pin|led_6_Pin|led_IT_Pin|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8000594:	2200      	movs	r2, #0
 8000596:	21f8      	movs	r1, #248	; 0xf8
 8000598:	481c      	ldr	r0, [pc, #112]	; (800060c <MX_GPIO_Init+0x104>)
 800059a:	f000 fc89 	bl	8000eb0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : led_0_Pin */
  GPIO_InitStruct.Pin = led_0_Pin;
 800059e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a4:	2301      	movs	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	2302      	movs	r3, #2
 80005ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_0_GPIO_Port, &GPIO_InitStruct);
 80005b0:	f107 0310 	add.w	r3, r7, #16
 80005b4:	4619      	mov	r1, r3
 80005b6:	4813      	ldr	r0, [pc, #76]	; (8000604 <MX_GPIO_Init+0xfc>)
 80005b8:	f000 fb20 	bl	8000bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : led_1_Pin led_2_Pin led_3_Pin led_4_Pin 
                           led_5_Pin led_6_Pin led_IT_Pin PA15 */
  GPIO_InitStruct.Pin = led_1_Pin|led_2_Pin|led_3_Pin|led_4_Pin 
 80005bc:	f248 137e 	movw	r3, #33150	; 0x817e
 80005c0:	613b      	str	r3, [r7, #16]
                          |led_5_Pin|led_6_Pin|led_IT_Pin|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2302      	movs	r3, #2
 80005cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 0310 	add.w	r3, r7, #16
 80005d2:	4619      	mov	r1, r3
 80005d4:	480c      	ldr	r0, [pc, #48]	; (8000608 <MX_GPIO_Init+0x100>)
 80005d6:	f000 fb11 	bl	8000bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80005da:	23f8      	movs	r3, #248	; 0xf8
 80005dc:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2302      	movs	r3, #2
 80005e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ea:	f107 0310 	add.w	r3, r7, #16
 80005ee:	4619      	mov	r1, r3
 80005f0:	4806      	ldr	r0, [pc, #24]	; (800060c <MX_GPIO_Init+0x104>)
 80005f2:	f000 fb03 	bl	8000bfc <HAL_GPIO_Init>

}
 80005f6:	bf00      	nop
 80005f8:	3720      	adds	r7, #32
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000
 8000604:	40011000 	.word	0x40011000
 8000608:	40010800 	.word	0x40010800
 800060c:	40010c00 	.word	0x40010c00

08000610 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000620:	d104      	bne.n	800062c <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(led_IT_GPIO_Port, led_IT_Pin);
 8000622:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000626:	4803      	ldr	r0, [pc, #12]	; (8000634 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000628:	f000 fc5a 	bl	8000ee0 <HAL_GPIO_TogglePin>
	}
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40010800 	.word	0x40010800

08000638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr

08000644 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800064a:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <HAL_MspInit+0x5c>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <HAL_MspInit+0x5c>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6193      	str	r3, [r2, #24]
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <HAL_MspInit+0x5c>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <HAL_MspInit+0x5c>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <HAL_MspInit+0x5c>)
 8000668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066c:	61d3      	str	r3, [r2, #28]
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <HAL_MspInit+0x5c>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <HAL_MspInit+0x60>)
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <HAL_MspInit+0x60>)
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000696:	bf00      	nop
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40010000 	.word	0x40010000

080006a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a16      	ldr	r2, [pc, #88]	; (8000710 <HAL_TIM_Base_MspInit+0x68>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d10c      	bne.n	80006d4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <HAL_TIM_Base_MspInit+0x6c>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4a15      	ldr	r2, [pc, #84]	; (8000714 <HAL_TIM_Base_MspInit+0x6c>)
 80006c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006c4:	6193      	str	r3, [r2, #24]
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <HAL_TIM_Base_MspInit+0x6c>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006d2:	e018      	b.n	8000706 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006dc:	d113      	bne.n	8000706 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <HAL_TIM_Base_MspInit+0x6c>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	4a0c      	ldr	r2, [pc, #48]	; (8000714 <HAL_TIM_Base_MspInit+0x6c>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	61d3      	str	r3, [r2, #28]
 80006ea:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <HAL_TIM_Base_MspInit+0x6c>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	201c      	movs	r0, #28
 80006fc:	f000 fa47 	bl	8000b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000700:	201c      	movs	r0, #28
 8000702:	f000 fa60 	bl	8000bc6 <HAL_NVIC_EnableIRQ>
}
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40012c00 	.word	0x40012c00
 8000714:	40021000 	.word	0x40021000

08000718 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a10      	ldr	r2, [pc, #64]	; (8000774 <HAL_TIM_MspPostInit+0x5c>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d118      	bne.n	800076a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <HAL_TIM_MspPostInit+0x60>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a0e      	ldr	r2, [pc, #56]	; (8000778 <HAL_TIM_MspPostInit+0x60>)
 800073e:	f043 0304 	orr.w	r3, r3, #4
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <HAL_TIM_MspPostInit+0x60>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0304 	and.w	r3, r3, #4
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000750:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000754:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000756:	2302      	movs	r3, #2
 8000758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2302      	movs	r3, #2
 800075c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075e:	f107 0310 	add.w	r3, r7, #16
 8000762:	4619      	mov	r1, r3
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <HAL_TIM_MspPostInit+0x64>)
 8000766:	f000 fa49 	bl	8000bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800076a:	bf00      	nop
 800076c:	3720      	adds	r7, #32
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40012c00 	.word	0x40012c00
 8000778:	40021000 	.word	0x40021000
 800077c:	40010800 	.word	0x40010800

08000780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a1c      	ldr	r2, [pc, #112]	; (800080c <HAL_UART_MspInit+0x8c>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d131      	bne.n	8000804 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <HAL_UART_MspInit+0x90>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	4a1a      	ldr	r2, [pc, #104]	; (8000810 <HAL_UART_MspInit+0x90>)
 80007a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007aa:	6193      	str	r3, [r2, #24]
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <HAL_UART_MspInit+0x90>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <HAL_UART_MspInit+0x90>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a14      	ldr	r2, [pc, #80]	; (8000810 <HAL_UART_MspInit+0x90>)
 80007be:	f043 0304 	orr.w	r3, r3, #4
 80007c2:	6193      	str	r3, [r2, #24]
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <HAL_UART_MspInit+0x90>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f003 0304 	and.w	r3, r3, #4
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007da:	2303      	movs	r3, #3
 80007dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	4619      	mov	r1, r3
 80007e4:	480b      	ldr	r0, [pc, #44]	; (8000814 <HAL_UART_MspInit+0x94>)
 80007e6:	f000 fa09 	bl	8000bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	4619      	mov	r1, r3
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <HAL_UART_MspInit+0x94>)
 8000800:	f000 f9fc 	bl	8000bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000804:	bf00      	nop
 8000806:	3720      	adds	r7, #32
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40013800 	.word	0x40013800
 8000810:	40021000 	.word	0x40021000
 8000814:	40010800 	.word	0x40010800

08000818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <HardFault_Handler+0x4>

0800082a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <MemManage_Handler+0x4>

08000830 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <BusFault_Handler+0x4>

08000836 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <UsageFault_Handler+0x4>

0800083c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr

08000848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000864:	f000 f87e 	bl	8000964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}

0800086c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <TIM2_IRQHandler+0x10>)
 8000872:	f001 f907 	bl	8001a84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000b0 	.word	0x200000b0

08000880 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr

0800088c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800088c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800088e:	e003      	b.n	8000898 <LoopCopyDataInit>

08000890 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000892:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000894:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000896:	3104      	adds	r1, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000898:	480a      	ldr	r0, [pc, #40]	; (80008c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800089c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800089e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008a0:	d3f6      	bcc.n	8000890 <CopyDataInit>
  ldr r2, =_sbss
 80008a2:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008a4:	e002      	b.n	80008ac <LoopFillZerobss>

080008a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008a8:	f842 3b04 	str.w	r3, [r2], #4

080008ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008b0:	d3f9      	bcc.n	80008a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008b2:	f7ff ffe5 	bl	8000880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008b6:	f001 ffc7 	bl	8002848 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ba:	f7ff fc47 	bl	800014c <main>
  bx lr
 80008be:	4770      	bx	lr
  ldr r3, =_sidata
 80008c0:	080028ec 	.word	0x080028ec
  ldr r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80008cc:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80008d0:	200000fc 	.word	0x200000fc

080008d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d4:	e7fe      	b.n	80008d4 <ADC1_2_IRQHandler>
	...

080008d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <HAL_Init+0x28>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a07      	ldr	r2, [pc, #28]	; (8000900 <HAL_Init+0x28>)
 80008e2:	f043 0310 	orr.w	r3, r3, #16
 80008e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e8:	2003      	movs	r0, #3
 80008ea:	f000 f945 	bl	8000b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f000 f808 	bl	8000904 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f4:	f7ff fea6 	bl	8000644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40022000 	.word	0x40022000

08000904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_InitTick+0x54>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_InitTick+0x58>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4619      	mov	r1, r3
 8000916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091a:	fbb3 f3f1 	udiv	r3, r3, r1
 800091e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f95d 	bl	8000be2 <HAL_SYSTICK_Config>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	e00e      	b.n	8000950 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b0f      	cmp	r3, #15
 8000936:	d80a      	bhi.n	800094e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000938:	2200      	movs	r2, #0
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 f925 	bl	8000b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000944:	4a06      	ldr	r2, [pc, #24]	; (8000960 <HAL_InitTick+0x5c>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800094a:	2300      	movs	r3, #0
 800094c:	e000      	b.n	8000950 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
}
 8000950:	4618      	mov	r0, r3
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000000 	.word	0x20000000
 800095c:	20000008 	.word	0x20000008
 8000960:	20000004 	.word	0x20000004

08000964 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_IncTick+0x1c>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	461a      	mov	r2, r3
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <HAL_IncTick+0x20>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4413      	add	r3, r2
 8000974:	4a03      	ldr	r2, [pc, #12]	; (8000984 <HAL_IncTick+0x20>)
 8000976:	6013      	str	r3, [r2, #0]
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	20000008 	.word	0x20000008
 8000984:	200000f8 	.word	0x200000f8

08000988 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return uwTick;
 800098c:	4b02      	ldr	r3, [pc, #8]	; (8000998 <HAL_GetTick+0x10>)
 800098e:	681b      	ldr	r3, [r3, #0]
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	200000f8 	.word	0x200000f8

0800099c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a4:	f7ff fff0 	bl	8000988 <HAL_GetTick>
 80009a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009b4:	d005      	beq.n	80009c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_Delay+0x40>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	4413      	add	r3, r2
 80009c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009c2:	bf00      	nop
 80009c4:	f7ff ffe0 	bl	8000988 <HAL_GetTick>
 80009c8:	4602      	mov	r2, r0
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d8f7      	bhi.n	80009c4 <HAL_Delay+0x28>
  {
  }
}
 80009d4:	bf00      	nop
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000008 	.word	0x20000008

080009e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009fc:	4013      	ands	r3, r2
 80009fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a12:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	60d3      	str	r3, [r2, #12]
}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <__NVIC_GetPriorityGrouping+0x18>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	0a1b      	lsrs	r3, r3, #8
 8000a32:	f003 0307 	and.w	r3, r3, #7
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	db0b      	blt.n	8000a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	f003 021f 	and.w	r2, r3, #31
 8000a5c:	4906      	ldr	r1, [pc, #24]	; (8000a78 <__NVIC_EnableIRQ+0x34>)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	095b      	lsrs	r3, r3, #5
 8000a64:	2001      	movs	r0, #1
 8000a66:	fa00 f202 	lsl.w	r2, r0, r2
 8000a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr
 8000a78:	e000e100 	.word	0xe000e100

08000a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	db0a      	blt.n	8000aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	490c      	ldr	r1, [pc, #48]	; (8000ac8 <__NVIC_SetPriority+0x4c>)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	0112      	lsls	r2, r2, #4
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	440b      	add	r3, r1
 8000aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa4:	e00a      	b.n	8000abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4908      	ldr	r1, [pc, #32]	; (8000acc <__NVIC_SetPriority+0x50>)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	f003 030f 	and.w	r3, r3, #15
 8000ab2:	3b04      	subs	r3, #4
 8000ab4:	0112      	lsls	r2, r2, #4
 8000ab6:	b2d2      	uxtb	r2, r2
 8000ab8:	440b      	add	r3, r1
 8000aba:	761a      	strb	r2, [r3, #24]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000e100 	.word	0xe000e100
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b089      	sub	sp, #36	; 0x24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	f1c3 0307 	rsb	r3, r3, #7
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	bf28      	it	cs
 8000aee:	2304      	movcs	r3, #4
 8000af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3304      	adds	r3, #4
 8000af6:	2b06      	cmp	r3, #6
 8000af8:	d902      	bls.n	8000b00 <NVIC_EncodePriority+0x30>
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3b03      	subs	r3, #3
 8000afe:	e000      	b.n	8000b02 <NVIC_EncodePriority+0x32>
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43da      	mvns	r2, r3
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	401a      	ands	r2, r3
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	43d9      	mvns	r1, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	4313      	orrs	r3, r2
         );
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3724      	adds	r7, #36	; 0x24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b44:	d301      	bcc.n	8000b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00f      	b.n	8000b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <SysTick_Config+0x40>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b52:	210f      	movs	r1, #15
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b58:	f7ff ff90 	bl	8000a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <SysTick_Config+0x40>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <SysTick_Config+0x40>)
 8000b64:	2207      	movs	r2, #7
 8000b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	e000e010 	.word	0xe000e010

08000b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff ff2d 	bl	80009e0 <__NVIC_SetPriorityGrouping>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b086      	sub	sp, #24
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
 8000b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba0:	f7ff ff42 	bl	8000a28 <__NVIC_GetPriorityGrouping>
 8000ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	68b9      	ldr	r1, [r7, #8]
 8000baa:	6978      	ldr	r0, [r7, #20]
 8000bac:	f7ff ff90 	bl	8000ad0 <NVIC_EncodePriority>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff5f 	bl	8000a7c <__NVIC_SetPriority>
}
 8000bbe:	bf00      	nop
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff35 	bl	8000a44 <__NVIC_EnableIRQ>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ffa2 	bl	8000b34 <SysTick_Config>
 8000bf0:	4603      	mov	r3, r0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b08b      	sub	sp, #44	; 0x2c
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0e:	e127      	b.n	8000e60 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c10:	2201      	movs	r2, #1
 8000c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	69fa      	ldr	r2, [r7, #28]
 8000c20:	4013      	ands	r3, r2
 8000c22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	f040 8116 	bne.w	8000e5a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2b12      	cmp	r3, #18
 8000c34:	d034      	beq.n	8000ca0 <HAL_GPIO_Init+0xa4>
 8000c36:	2b12      	cmp	r3, #18
 8000c38:	d80d      	bhi.n	8000c56 <HAL_GPIO_Init+0x5a>
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d02b      	beq.n	8000c96 <HAL_GPIO_Init+0x9a>
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d804      	bhi.n	8000c4c <HAL_GPIO_Init+0x50>
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d031      	beq.n	8000caa <HAL_GPIO_Init+0xae>
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d01c      	beq.n	8000c84 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c4a:	e048      	b.n	8000cde <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	d043      	beq.n	8000cd8 <HAL_GPIO_Init+0xdc>
 8000c50:	2b11      	cmp	r3, #17
 8000c52:	d01b      	beq.n	8000c8c <HAL_GPIO_Init+0x90>
          break;
 8000c54:	e043      	b.n	8000cde <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c56:	4a89      	ldr	r2, [pc, #548]	; (8000e7c <HAL_GPIO_Init+0x280>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d026      	beq.n	8000caa <HAL_GPIO_Init+0xae>
 8000c5c:	4a87      	ldr	r2, [pc, #540]	; (8000e7c <HAL_GPIO_Init+0x280>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d806      	bhi.n	8000c70 <HAL_GPIO_Init+0x74>
 8000c62:	4a87      	ldr	r2, [pc, #540]	; (8000e80 <HAL_GPIO_Init+0x284>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d020      	beq.n	8000caa <HAL_GPIO_Init+0xae>
 8000c68:	4a86      	ldr	r2, [pc, #536]	; (8000e84 <HAL_GPIO_Init+0x288>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d01d      	beq.n	8000caa <HAL_GPIO_Init+0xae>
          break;
 8000c6e:	e036      	b.n	8000cde <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c70:	4a85      	ldr	r2, [pc, #532]	; (8000e88 <HAL_GPIO_Init+0x28c>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d019      	beq.n	8000caa <HAL_GPIO_Init+0xae>
 8000c76:	4a85      	ldr	r2, [pc, #532]	; (8000e8c <HAL_GPIO_Init+0x290>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d016      	beq.n	8000caa <HAL_GPIO_Init+0xae>
 8000c7c:	4a84      	ldr	r2, [pc, #528]	; (8000e90 <HAL_GPIO_Init+0x294>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d013      	beq.n	8000caa <HAL_GPIO_Init+0xae>
          break;
 8000c82:	e02c      	b.n	8000cde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	623b      	str	r3, [r7, #32]
          break;
 8000c8a:	e028      	b.n	8000cde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	3304      	adds	r3, #4
 8000c92:	623b      	str	r3, [r7, #32]
          break;
 8000c94:	e023      	b.n	8000cde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	3308      	adds	r3, #8
 8000c9c:	623b      	str	r3, [r7, #32]
          break;
 8000c9e:	e01e      	b.n	8000cde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	330c      	adds	r3, #12
 8000ca6:	623b      	str	r3, [r7, #32]
          break;
 8000ca8:	e019      	b.n	8000cde <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d102      	bne.n	8000cb8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	623b      	str	r3, [r7, #32]
          break;
 8000cb6:	e012      	b.n	8000cde <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d105      	bne.n	8000ccc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cc0:	2308      	movs	r3, #8
 8000cc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	69fa      	ldr	r2, [r7, #28]
 8000cc8:	611a      	str	r2, [r3, #16]
          break;
 8000cca:	e008      	b.n	8000cde <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ccc:	2308      	movs	r3, #8
 8000cce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	69fa      	ldr	r2, [r7, #28]
 8000cd4:	615a      	str	r2, [r3, #20]
          break;
 8000cd6:	e002      	b.n	8000cde <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	623b      	str	r3, [r7, #32]
          break;
 8000cdc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	2bff      	cmp	r3, #255	; 0xff
 8000ce2:	d801      	bhi.n	8000ce8 <HAL_GPIO_Init+0xec>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	e001      	b.n	8000cec <HAL_GPIO_Init+0xf0>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3304      	adds	r3, #4
 8000cec:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	2bff      	cmp	r3, #255	; 0xff
 8000cf2:	d802      	bhi.n	8000cfa <HAL_GPIO_Init+0xfe>
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	e002      	b.n	8000d00 <HAL_GPIO_Init+0x104>
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	3b08      	subs	r3, #8
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	210f      	movs	r1, #15
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	401a      	ands	r2, r3
 8000d12:	6a39      	ldr	r1, [r7, #32]
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f000 8096 	beq.w	8000e5a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d2e:	4b59      	ldr	r3, [pc, #356]	; (8000e94 <HAL_GPIO_Init+0x298>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	4a58      	ldr	r2, [pc, #352]	; (8000e94 <HAL_GPIO_Init+0x298>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6193      	str	r3, [r2, #24]
 8000d3a:	4b56      	ldr	r3, [pc, #344]	; (8000e94 <HAL_GPIO_Init+0x298>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d46:	4a54      	ldr	r2, [pc, #336]	; (8000e98 <HAL_GPIO_Init+0x29c>)
 8000d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4a:	089b      	lsrs	r3, r3, #2
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d52:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	220f      	movs	r2, #15
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	4013      	ands	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a4b      	ldr	r2, [pc, #300]	; (8000e9c <HAL_GPIO_Init+0x2a0>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d013      	beq.n	8000d9a <HAL_GPIO_Init+0x19e>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a4a      	ldr	r2, [pc, #296]	; (8000ea0 <HAL_GPIO_Init+0x2a4>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d00d      	beq.n	8000d96 <HAL_GPIO_Init+0x19a>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a49      	ldr	r2, [pc, #292]	; (8000ea4 <HAL_GPIO_Init+0x2a8>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d007      	beq.n	8000d92 <HAL_GPIO_Init+0x196>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a48      	ldr	r2, [pc, #288]	; (8000ea8 <HAL_GPIO_Init+0x2ac>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d101      	bne.n	8000d8e <HAL_GPIO_Init+0x192>
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e006      	b.n	8000d9c <HAL_GPIO_Init+0x1a0>
 8000d8e:	2304      	movs	r3, #4
 8000d90:	e004      	b.n	8000d9c <HAL_GPIO_Init+0x1a0>
 8000d92:	2302      	movs	r3, #2
 8000d94:	e002      	b.n	8000d9c <HAL_GPIO_Init+0x1a0>
 8000d96:	2301      	movs	r3, #1
 8000d98:	e000      	b.n	8000d9c <HAL_GPIO_Init+0x1a0>
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d9e:	f002 0203 	and.w	r2, r2, #3
 8000da2:	0092      	lsls	r2, r2, #2
 8000da4:	4093      	lsls	r3, r2
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dac:	493a      	ldr	r1, [pc, #232]	; (8000e98 <HAL_GPIO_Init+0x29c>)
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	089b      	lsrs	r3, r3, #2
 8000db2:	3302      	adds	r3, #2
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d006      	beq.n	8000dd4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dc6:	4b39      	ldr	r3, [pc, #228]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	4938      	ldr	r1, [pc, #224]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	600b      	str	r3, [r1, #0]
 8000dd2:	e006      	b.n	8000de2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dd4:	4b35      	ldr	r3, [pc, #212]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	4933      	ldr	r1, [pc, #204]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000dde:	4013      	ands	r3, r2
 8000de0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d006      	beq.n	8000dfc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dee:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	492e      	ldr	r1, [pc, #184]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	604b      	str	r3, [r1, #4]
 8000dfa:	e006      	b.n	8000e0a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dfc:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000dfe:	685a      	ldr	r2, [r3, #4]
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	43db      	mvns	r3, r3
 8000e04:	4929      	ldr	r1, [pc, #164]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000e06:	4013      	ands	r3, r2
 8000e08:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d006      	beq.n	8000e24 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e16:	4b25      	ldr	r3, [pc, #148]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	4924      	ldr	r1, [pc, #144]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	608b      	str	r3, [r1, #8]
 8000e22:	e006      	b.n	8000e32 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e24:	4b21      	ldr	r3, [pc, #132]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	491f      	ldr	r1, [pc, #124]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d006      	beq.n	8000e4c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000e40:	68da      	ldr	r2, [r3, #12]
 8000e42:	491a      	ldr	r1, [pc, #104]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	60cb      	str	r3, [r1, #12]
 8000e4a:	e006      	b.n	8000e5a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000e4e:	68da      	ldr	r2, [r3, #12]
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	4915      	ldr	r1, [pc, #84]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000e56:	4013      	ands	r3, r2
 8000e58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e66:	fa22 f303 	lsr.w	r3, r2, r3
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f47f aed0 	bne.w	8000c10 <HAL_GPIO_Init+0x14>
  }
}
 8000e70:	bf00      	nop
 8000e72:	372c      	adds	r7, #44	; 0x2c
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	10210000 	.word	0x10210000
 8000e80:	10110000 	.word	0x10110000
 8000e84:	10120000 	.word	0x10120000
 8000e88:	10310000 	.word	0x10310000
 8000e8c:	10320000 	.word	0x10320000
 8000e90:	10220000 	.word	0x10220000
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40010000 	.word	0x40010000
 8000e9c:	40010800 	.word	0x40010800
 8000ea0:	40010c00 	.word	0x40010c00
 8000ea4:	40011000 	.word	0x40011000
 8000ea8:	40011400 	.word	0x40011400
 8000eac:	40010400 	.word	0x40010400

08000eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	807b      	strh	r3, [r7, #2]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ec0:	787b      	ldrb	r3, [r7, #1]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ec6:	887a      	ldrh	r2, [r7, #2]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ecc:	e003      	b.n	8000ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	041a      	lsls	r2, r3, #16
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	611a      	str	r2, [r3, #16]
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ef2:	887a      	ldrh	r2, [r7, #2]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	041a      	lsls	r2, r3, #16
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	43d9      	mvns	r1, r3
 8000efe:	887b      	ldrh	r3, [r7, #2]
 8000f00:	400b      	ands	r3, r1
 8000f02:	431a      	orrs	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	611a      	str	r2, [r3, #16]
}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
	...

08000f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d101      	bne.n	8000f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e26c      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f000 8087 	beq.w	8001042 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f34:	4b92      	ldr	r3, [pc, #584]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 030c 	and.w	r3, r3, #12
 8000f3c:	2b04      	cmp	r3, #4
 8000f3e:	d00c      	beq.n	8000f5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f40:	4b8f      	ldr	r3, [pc, #572]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 030c 	and.w	r3, r3, #12
 8000f48:	2b08      	cmp	r3, #8
 8000f4a:	d112      	bne.n	8000f72 <HAL_RCC_OscConfig+0x5e>
 8000f4c:	4b8c      	ldr	r3, [pc, #560]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f58:	d10b      	bne.n	8000f72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f5a:	4b89      	ldr	r3, [pc, #548]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d06c      	beq.n	8001040 <HAL_RCC_OscConfig+0x12c>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d168      	bne.n	8001040 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e246      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f7a:	d106      	bne.n	8000f8a <HAL_RCC_OscConfig+0x76>
 8000f7c:	4b80      	ldr	r3, [pc, #512]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a7f      	ldr	r2, [pc, #508]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	e02e      	b.n	8000fe8 <HAL_RCC_OscConfig+0xd4>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10c      	bne.n	8000fac <HAL_RCC_OscConfig+0x98>
 8000f92:	4b7b      	ldr	r3, [pc, #492]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a7a      	ldr	r2, [pc, #488]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	4b78      	ldr	r3, [pc, #480]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a77      	ldr	r2, [pc, #476]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	e01d      	b.n	8000fe8 <HAL_RCC_OscConfig+0xd4>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fb4:	d10c      	bne.n	8000fd0 <HAL_RCC_OscConfig+0xbc>
 8000fb6:	4b72      	ldr	r3, [pc, #456]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a71      	ldr	r2, [pc, #452]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	4b6f      	ldr	r3, [pc, #444]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a6e      	ldr	r2, [pc, #440]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	e00b      	b.n	8000fe8 <HAL_RCC_OscConfig+0xd4>
 8000fd0:	4b6b      	ldr	r3, [pc, #428]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a6a      	ldr	r2, [pc, #424]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b68      	ldr	r3, [pc, #416]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a67      	ldr	r2, [pc, #412]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d013      	beq.n	8001018 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fcca 	bl	8000988 <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff8:	f7ff fcc6 	bl	8000988 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b64      	cmp	r3, #100	; 0x64
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e1fa      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100a:	4b5d      	ldr	r3, [pc, #372]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0f0      	beq.n	8000ff8 <HAL_RCC_OscConfig+0xe4>
 8001016:	e014      	b.n	8001042 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001018:	f7ff fcb6 	bl	8000988 <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001020:	f7ff fcb2 	bl	8000988 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b64      	cmp	r3, #100	; 0x64
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e1e6      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001032:	4b53      	ldr	r3, [pc, #332]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f0      	bne.n	8001020 <HAL_RCC_OscConfig+0x10c>
 800103e:	e000      	b.n	8001042 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d063      	beq.n	8001116 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800104e:	4b4c      	ldr	r3, [pc, #304]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 030c 	and.w	r3, r3, #12
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00b      	beq.n	8001072 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800105a:	4b49      	ldr	r3, [pc, #292]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 030c 	and.w	r3, r3, #12
 8001062:	2b08      	cmp	r3, #8
 8001064:	d11c      	bne.n	80010a0 <HAL_RCC_OscConfig+0x18c>
 8001066:	4b46      	ldr	r3, [pc, #280]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d116      	bne.n	80010a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001072:	4b43      	ldr	r3, [pc, #268]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d005      	beq.n	800108a <HAL_RCC_OscConfig+0x176>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d001      	beq.n	800108a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e1ba      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108a:	4b3d      	ldr	r3, [pc, #244]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	4939      	ldr	r1, [pc, #228]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 800109a:	4313      	orrs	r3, r2
 800109c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800109e:	e03a      	b.n	8001116 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	691b      	ldr	r3, [r3, #16]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d020      	beq.n	80010ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010a8:	4b36      	ldr	r3, [pc, #216]	; (8001184 <HAL_RCC_OscConfig+0x270>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ae:	f7ff fc6b 	bl	8000988 <HAL_GetTick>
 80010b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b4:	e008      	b.n	80010c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010b6:	f7ff fc67 	bl	8000988 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e19b      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c8:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0f0      	beq.n	80010b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d4:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	4927      	ldr	r1, [pc, #156]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	4313      	orrs	r3, r2
 80010e6:	600b      	str	r3, [r1, #0]
 80010e8:	e015      	b.n	8001116 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <HAL_RCC_OscConfig+0x270>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fc4a 	bl	8000988 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010f8:	f7ff fc46 	bl	8000988 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e17a      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f0      	bne.n	80010f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	2b00      	cmp	r3, #0
 8001120:	d03a      	beq.n	8001198 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d019      	beq.n	800115e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_RCC_OscConfig+0x274>)
 800112c:	2201      	movs	r2, #1
 800112e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001130:	f7ff fc2a 	bl	8000988 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001138:	f7ff fc26 	bl	8000988 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e15a      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800114a:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <HAL_RCC_OscConfig+0x26c>)
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0f0      	beq.n	8001138 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001156:	2001      	movs	r0, #1
 8001158:	f000 fada 	bl	8001710 <RCC_Delay>
 800115c:	e01c      	b.n	8001198 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_RCC_OscConfig+0x274>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001164:	f7ff fc10 	bl	8000988 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116a:	e00f      	b.n	800118c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800116c:	f7ff fc0c 	bl	8000988 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d908      	bls.n	800118c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e140      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	42420000 	.word	0x42420000
 8001188:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800118c:	4b9e      	ldr	r3, [pc, #632]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800118e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1e9      	bne.n	800116c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 80a6 	beq.w	80012f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011aa:	4b97      	ldr	r3, [pc, #604]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10d      	bne.n	80011d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	4b94      	ldr	r3, [pc, #592]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	4a93      	ldr	r2, [pc, #588]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c0:	61d3      	str	r3, [r2, #28]
 80011c2:	4b91      	ldr	r3, [pc, #580]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ce:	2301      	movs	r3, #1
 80011d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d2:	4b8e      	ldr	r3, [pc, #568]	; (800140c <HAL_RCC_OscConfig+0x4f8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d118      	bne.n	8001210 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011de:	4b8b      	ldr	r3, [pc, #556]	; (800140c <HAL_RCC_OscConfig+0x4f8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a8a      	ldr	r2, [pc, #552]	; (800140c <HAL_RCC_OscConfig+0x4f8>)
 80011e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ea:	f7ff fbcd 	bl	8000988 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f2:	f7ff fbc9 	bl	8000988 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b64      	cmp	r3, #100	; 0x64
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e0fd      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001204:	4b81      	ldr	r3, [pc, #516]	; (800140c <HAL_RCC_OscConfig+0x4f8>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0f0      	beq.n	80011f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d106      	bne.n	8001226 <HAL_RCC_OscConfig+0x312>
 8001218:	4b7b      	ldr	r3, [pc, #492]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	4a7a      	ldr	r2, [pc, #488]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	6213      	str	r3, [r2, #32]
 8001224:	e02d      	b.n	8001282 <HAL_RCC_OscConfig+0x36e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10c      	bne.n	8001248 <HAL_RCC_OscConfig+0x334>
 800122e:	4b76      	ldr	r3, [pc, #472]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	4a75      	ldr	r2, [pc, #468]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001234:	f023 0301 	bic.w	r3, r3, #1
 8001238:	6213      	str	r3, [r2, #32]
 800123a:	4b73      	ldr	r3, [pc, #460]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	4a72      	ldr	r2, [pc, #456]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001240:	f023 0304 	bic.w	r3, r3, #4
 8001244:	6213      	str	r3, [r2, #32]
 8001246:	e01c      	b.n	8001282 <HAL_RCC_OscConfig+0x36e>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	2b05      	cmp	r3, #5
 800124e:	d10c      	bne.n	800126a <HAL_RCC_OscConfig+0x356>
 8001250:	4b6d      	ldr	r3, [pc, #436]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	4a6c      	ldr	r2, [pc, #432]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001256:	f043 0304 	orr.w	r3, r3, #4
 800125a:	6213      	str	r3, [r2, #32]
 800125c:	4b6a      	ldr	r3, [pc, #424]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	4a69      	ldr	r2, [pc, #420]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6213      	str	r3, [r2, #32]
 8001268:	e00b      	b.n	8001282 <HAL_RCC_OscConfig+0x36e>
 800126a:	4b67      	ldr	r3, [pc, #412]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	4a66      	ldr	r2, [pc, #408]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001270:	f023 0301 	bic.w	r3, r3, #1
 8001274:	6213      	str	r3, [r2, #32]
 8001276:	4b64      	ldr	r3, [pc, #400]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	4a63      	ldr	r2, [pc, #396]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800127c:	f023 0304 	bic.w	r3, r3, #4
 8001280:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d015      	beq.n	80012b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128a:	f7ff fb7d 	bl	8000988 <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001290:	e00a      	b.n	80012a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001292:	f7ff fb79 	bl	8000988 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e0ab      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a8:	4b57      	ldr	r3, [pc, #348]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0ee      	beq.n	8001292 <HAL_RCC_OscConfig+0x37e>
 80012b4:	e014      	b.n	80012e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b6:	f7ff fb67 	bl	8000988 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012bc:	e00a      	b.n	80012d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012be:	f7ff fb63 	bl	8000988 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e095      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d4:	4b4c      	ldr	r3, [pc, #304]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1ee      	bne.n	80012be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d105      	bne.n	80012f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e6:	4b48      	ldr	r3, [pc, #288]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	4a47      	ldr	r2, [pc, #284]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80012ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 8081 	beq.w	80013fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012fc:	4b42      	ldr	r3, [pc, #264]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 030c 	and.w	r3, r3, #12
 8001304:	2b08      	cmp	r3, #8
 8001306:	d061      	beq.n	80013cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d146      	bne.n	800139e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001310:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <HAL_RCC_OscConfig+0x4fc>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001316:	f7ff fb37 	bl	8000988 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131e:	f7ff fb33 	bl	8000988 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e067      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001330:	4b35      	ldr	r3, [pc, #212]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f0      	bne.n	800131e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001344:	d108      	bne.n	8001358 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001346:	4b30      	ldr	r3, [pc, #192]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	492d      	ldr	r1, [pc, #180]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001358:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a19      	ldr	r1, [r3, #32]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	430b      	orrs	r3, r1
 800136a:	4927      	ldr	r1, [pc, #156]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <HAL_RCC_OscConfig+0x4fc>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001376:	f7ff fb07 	bl	8000988 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800137e:	f7ff fb03 	bl	8000988 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e037      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001390:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x46a>
 800139c:	e02f      	b.n	80013fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800139e:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <HAL_RCC_OscConfig+0x4fc>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff faf0 	bl	8000988 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ac:	f7ff faec 	bl	8000988 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e020      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x498>
 80013ca:	e018      	b.n	80013fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d101      	bne.n	80013d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e013      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_RCC_OscConfig+0x4f4>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d106      	bne.n	80013fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d001      	beq.n	80013fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40021000 	.word	0x40021000
 800140c:	40007000 	.word	0x40007000
 8001410:	42420060 	.word	0x42420060

08001414 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e0d0      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001428:	4b6a      	ldr	r3, [pc, #424]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d910      	bls.n	8001458 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001436:	4b67      	ldr	r3, [pc, #412]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 0207 	bic.w	r2, r3, #7
 800143e:	4965      	ldr	r1, [pc, #404]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	4313      	orrs	r3, r2
 8001444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001446:	4b63      	ldr	r3, [pc, #396]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	d001      	beq.n	8001458 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e0b8      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d020      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001470:	4b59      	ldr	r3, [pc, #356]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	4a58      	ldr	r2, [pc, #352]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001476:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800147a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001488:	4b53      	ldr	r3, [pc, #332]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	4a52      	ldr	r2, [pc, #328]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 800148e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001492:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001494:	4b50      	ldr	r3, [pc, #320]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	494d      	ldr	r1, [pc, #308]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d040      	beq.n	8001534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d107      	bne.n	80014ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ba:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d115      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e07f      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d107      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d2:	4b41      	ldr	r3, [pc, #260]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d109      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e073      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e2:	4b3d      	ldr	r3, [pc, #244]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e06b      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014f2:	4b39      	ldr	r3, [pc, #228]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f023 0203 	bic.w	r2, r3, #3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	4936      	ldr	r1, [pc, #216]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001500:	4313      	orrs	r3, r2
 8001502:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001504:	f7ff fa40 	bl	8000988 <HAL_GetTick>
 8001508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150a:	e00a      	b.n	8001522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800150c:	f7ff fa3c 	bl	8000988 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f241 3288 	movw	r2, #5000	; 0x1388
 800151a:	4293      	cmp	r3, r2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e053      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001522:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 020c 	and.w	r2, r3, #12
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	429a      	cmp	r2, r3
 8001532:	d1eb      	bne.n	800150c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001534:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d210      	bcs.n	8001564 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001542:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f023 0207 	bic.w	r2, r3, #7
 800154a:	4922      	ldr	r1, [pc, #136]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	4313      	orrs	r3, r2
 8001550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001552:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d001      	beq.n	8001564 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e032      	b.n	80015ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	d008      	beq.n	8001582 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	4916      	ldr	r1, [pc, #88]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 800157e:	4313      	orrs	r3, r2
 8001580:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	d009      	beq.n	80015a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	490e      	ldr	r1, [pc, #56]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015a2:	f000 f821 	bl	80015e8 <HAL_RCC_GetSysClockFreq>
 80015a6:	4601      	mov	r1, r0
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	091b      	lsrs	r3, r3, #4
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <HAL_RCC_ClockConfig+0x1c8>)
 80015b4:	5cd3      	ldrb	r3, [r2, r3]
 80015b6:	fa21 f303 	lsr.w	r3, r1, r3
 80015ba:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <HAL_RCC_ClockConfig+0x1cc>)
 80015bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_RCC_ClockConfig+0x1d0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff f99e 	bl	8000904 <HAL_InitTick>

  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40022000 	.word	0x40022000
 80015d8:	40021000 	.word	0x40021000
 80015dc:	080028cc 	.word	0x080028cc
 80015e0:	20000000 	.word	0x20000000
 80015e4:	20000004 	.word	0x20000004

080015e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015e8:	b490      	push	{r4, r7}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015ee:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015f0:	1d3c      	adds	r4, r7, #4
 80015f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015f8:	4b28      	ldr	r3, [pc, #160]	; (800169c <HAL_RCC_GetSysClockFreq+0xb4>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b04      	cmp	r3, #4
 8001620:	d002      	beq.n	8001628 <HAL_RCC_GetSysClockFreq+0x40>
 8001622:	2b08      	cmp	r3, #8
 8001624:	d003      	beq.n	800162e <HAL_RCC_GetSysClockFreq+0x46>
 8001626:	e02d      	b.n	8001684 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001628:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800162a:	623b      	str	r3, [r7, #32]
      break;
 800162c:	e02d      	b.n	800168a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	0c9b      	lsrs	r3, r3, #18
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800163a:	4413      	add	r3, r2
 800163c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001640:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d013      	beq.n	8001674 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	0c5b      	lsrs	r3, r3, #17
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800165a:	4413      	add	r3, r2
 800165c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001660:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	4a0f      	ldr	r2, [pc, #60]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001666:	fb02 f203 	mul.w	r2, r2, r3
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
 8001672:	e004      	b.n	800167e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001678:	fb02 f303 	mul.w	r3, r2, r3
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	623b      	str	r3, [r7, #32]
      break;
 8001682:	e002      	b.n	800168a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001684:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001686:	623b      	str	r3, [r7, #32]
      break;
 8001688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800168a:	6a3b      	ldr	r3, [r7, #32]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3728      	adds	r7, #40	; 0x28
 8001690:	46bd      	mov	sp, r7
 8001692:	bc90      	pop	{r4, r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	080028b8 	.word	0x080028b8
 800169c:	080028c8 	.word	0x080028c8
 80016a0:	40021000 	.word	0x40021000
 80016a4:	007a1200 	.word	0x007a1200
 80016a8:	003d0900 	.word	0x003d0900

080016ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016b0:	4b02      	ldr	r3, [pc, #8]	; (80016bc <HAL_RCC_GetHCLKFreq+0x10>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	20000000 	.word	0x20000000

080016c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016c4:	f7ff fff2 	bl	80016ac <HAL_RCC_GetHCLKFreq>
 80016c8:	4601      	mov	r1, r0
 80016ca:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	0a1b      	lsrs	r3, r3, #8
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	4a03      	ldr	r2, [pc, #12]	; (80016e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016d6:	5cd3      	ldrb	r3, [r2, r3]
 80016d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016dc:	4618      	mov	r0, r3
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40021000 	.word	0x40021000
 80016e4:	080028dc 	.word	0x080028dc

080016e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016ec:	f7ff ffde 	bl	80016ac <HAL_RCC_GetHCLKFreq>
 80016f0:	4601      	mov	r1, r0
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	0adb      	lsrs	r3, r3, #11
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	4a03      	ldr	r2, [pc, #12]	; (800170c <HAL_RCC_GetPCLK2Freq+0x24>)
 80016fe:	5cd3      	ldrb	r3, [r2, r3]
 8001700:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001704:	4618      	mov	r0, r3
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40021000 	.word	0x40021000
 800170c:	080028dc 	.word	0x080028dc

08001710 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001718:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <RCC_Delay+0x34>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <RCC_Delay+0x38>)
 800171e:	fba2 2303 	umull	r2, r3, r2, r3
 8001722:	0a5b      	lsrs	r3, r3, #9
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	fb02 f303 	mul.w	r3, r2, r3
 800172a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800172c:	bf00      	nop
  }
  while (Delay --);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	1e5a      	subs	r2, r3, #1
 8001732:	60fa      	str	r2, [r7, #12]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1f9      	bne.n	800172c <RCC_Delay+0x1c>
}
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000000 	.word	0x20000000
 8001748:	10624dd3 	.word	0x10624dd3

0800174c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e041      	b.n	80017e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d106      	bne.n	8001778 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7fe ff98 	bl	80006a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2202      	movs	r2, #2
 800177c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3304      	adds	r3, #4
 8001788:	4619      	mov	r1, r3
 800178a:	4610      	mov	r0, r2
 800178c:	f000 fc1c 	bl	8001fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d001      	beq.n	8001804 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e03a      	b.n	800187a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2202      	movs	r2, #2
 8001808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0201 	orr.w	r2, r2, #1
 800181a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a18      	ldr	r2, [pc, #96]	; (8001884 <HAL_TIM_Base_Start_IT+0x98>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d00e      	beq.n	8001844 <HAL_TIM_Base_Start_IT+0x58>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800182e:	d009      	beq.n	8001844 <HAL_TIM_Base_Start_IT+0x58>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a14      	ldr	r2, [pc, #80]	; (8001888 <HAL_TIM_Base_Start_IT+0x9c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d004      	beq.n	8001844 <HAL_TIM_Base_Start_IT+0x58>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a13      	ldr	r2, [pc, #76]	; (800188c <HAL_TIM_Base_Start_IT+0xa0>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d111      	bne.n	8001868 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2b06      	cmp	r3, #6
 8001854:	d010      	beq.n	8001878 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f042 0201 	orr.w	r2, r2, #1
 8001864:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001866:	e007      	b.n	8001878 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f042 0201 	orr.w	r2, r2, #1
 8001876:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	40012c00 	.word	0x40012c00
 8001888:	40000400 	.word	0x40000400
 800188c:	40000800 	.word	0x40000800

08001890 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e041      	b.n	8001926 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d106      	bne.n	80018bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f839 	bl	800192e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2202      	movs	r2, #2
 80018c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3304      	adds	r3, #4
 80018cc:	4619      	mov	r1, r3
 80018ce:	4610      	mov	r0, r2
 80018d0:	f000 fb7a 	bl	8001fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d109      	bne.n	8001964 <HAL_TIM_PWM_Start+0x24>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b01      	cmp	r3, #1
 800195a:	bf14      	ite	ne
 800195c:	2301      	movne	r3, #1
 800195e:	2300      	moveq	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	e022      	b.n	80019aa <HAL_TIM_PWM_Start+0x6a>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	2b04      	cmp	r3, #4
 8001968:	d109      	bne.n	800197e <HAL_TIM_PWM_Start+0x3e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b01      	cmp	r3, #1
 8001974:	bf14      	ite	ne
 8001976:	2301      	movne	r3, #1
 8001978:	2300      	moveq	r3, #0
 800197a:	b2db      	uxtb	r3, r3
 800197c:	e015      	b.n	80019aa <HAL_TIM_PWM_Start+0x6a>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b08      	cmp	r3, #8
 8001982:	d109      	bne.n	8001998 <HAL_TIM_PWM_Start+0x58>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b01      	cmp	r3, #1
 800198e:	bf14      	ite	ne
 8001990:	2301      	movne	r3, #1
 8001992:	2300      	moveq	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	e008      	b.n	80019aa <HAL_TIM_PWM_Start+0x6a>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	bf14      	ite	ne
 80019a4:	2301      	movne	r3, #1
 80019a6:	2300      	moveq	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e05e      	b.n	8001a70 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d104      	bne.n	80019c2 <HAL_TIM_PWM_Start+0x82>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2202      	movs	r2, #2
 80019bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019c0:	e013      	b.n	80019ea <HAL_TIM_PWM_Start+0xaa>
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d104      	bne.n	80019d2 <HAL_TIM_PWM_Start+0x92>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2202      	movs	r2, #2
 80019cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019d0:	e00b      	b.n	80019ea <HAL_TIM_PWM_Start+0xaa>
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d104      	bne.n	80019e2 <HAL_TIM_PWM_Start+0xa2>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2202      	movs	r2, #2
 80019dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019e0:	e003      	b.n	80019ea <HAL_TIM_PWM_Start+0xaa>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2202      	movs	r2, #2
 80019e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2201      	movs	r2, #1
 80019f0:	6839      	ldr	r1, [r7, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 fd68 	bl	80024c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a1e      	ldr	r2, [pc, #120]	; (8001a78 <HAL_TIM_PWM_Start+0x138>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d107      	bne.n	8001a12 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a18      	ldr	r2, [pc, #96]	; (8001a78 <HAL_TIM_PWM_Start+0x138>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d00e      	beq.n	8001a3a <HAL_TIM_PWM_Start+0xfa>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a24:	d009      	beq.n	8001a3a <HAL_TIM_PWM_Start+0xfa>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <HAL_TIM_PWM_Start+0x13c>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d004      	beq.n	8001a3a <HAL_TIM_PWM_Start+0xfa>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <HAL_TIM_PWM_Start+0x140>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d111      	bne.n	8001a5e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2b06      	cmp	r3, #6
 8001a4a:	d010      	beq.n	8001a6e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 0201 	orr.w	r2, r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a5c:	e007      	b.n	8001a6e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f042 0201 	orr.w	r2, r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40012c00 	.word	0x40012c00
 8001a7c:	40000400 	.word	0x40000400
 8001a80:	40000800 	.word	0x40000800

08001a84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d122      	bne.n	8001ae0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d11b      	bne.n	8001ae0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f06f 0202 	mvn.w	r2, #2
 8001ab0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 fa62 	bl	8001f90 <HAL_TIM_IC_CaptureCallback>
 8001acc:	e005      	b.n	8001ada <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 fa55 	bl	8001f7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 fa64 	bl	8001fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	d122      	bne.n	8001b34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	d11b      	bne.n	8001b34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f06f 0204 	mvn.w	r2, #4
 8001b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2202      	movs	r2, #2
 8001b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 fa38 	bl	8001f90 <HAL_TIM_IC_CaptureCallback>
 8001b20:	e005      	b.n	8001b2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 fa2b 	bl	8001f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 fa3a 	bl	8001fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d122      	bne.n	8001b88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d11b      	bne.n	8001b88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f06f 0208 	mvn.w	r2, #8
 8001b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2204      	movs	r2, #4
 8001b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 fa0e 	bl	8001f90 <HAL_TIM_IC_CaptureCallback>
 8001b74:	e005      	b.n	8001b82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 fa01 	bl	8001f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 fa10 	bl	8001fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	2b10      	cmp	r3, #16
 8001b94:	d122      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	f003 0310 	and.w	r3, r3, #16
 8001ba0:	2b10      	cmp	r3, #16
 8001ba2:	d11b      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f06f 0210 	mvn.w	r2, #16
 8001bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f9e4 	bl	8001f90 <HAL_TIM_IC_CaptureCallback>
 8001bc8:	e005      	b.n	8001bd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f9d7 	bl	8001f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f9e6 	bl	8001fa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d10e      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d107      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0201 	mvn.w	r2, #1
 8001c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7fe fd04 	bl	8000610 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c12:	2b80      	cmp	r3, #128	; 0x80
 8001c14:	d10e      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c20:	2b80      	cmp	r3, #128	; 0x80
 8001c22:	d107      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 fd26 	bl	8002680 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3e:	2b40      	cmp	r3, #64	; 0x40
 8001c40:	d10e      	bne.n	8001c60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c4c:	2b40      	cmp	r3, #64	; 0x40
 8001c4e:	d107      	bne.n	8001c60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f9aa 	bl	8001fb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	f003 0320 	and.w	r3, r3, #32
 8001c6a:	2b20      	cmp	r3, #32
 8001c6c:	d10e      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	f003 0320 	and.w	r3, r3, #32
 8001c78:	2b20      	cmp	r3, #32
 8001c7a:	d107      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f06f 0220 	mvn.w	r2, #32
 8001c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 fcf1 	bl	800266e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d101      	bne.n	8001cae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e0ac      	b.n	8001e08 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b0c      	cmp	r3, #12
 8001cba:	f200 809f 	bhi.w	8001dfc <HAL_TIM_PWM_ConfigChannel+0x168>
 8001cbe:	a201      	add	r2, pc, #4	; (adr r2, 8001cc4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc4:	08001cf9 	.word	0x08001cf9
 8001cc8:	08001dfd 	.word	0x08001dfd
 8001ccc:	08001dfd 	.word	0x08001dfd
 8001cd0:	08001dfd 	.word	0x08001dfd
 8001cd4:	08001d39 	.word	0x08001d39
 8001cd8:	08001dfd 	.word	0x08001dfd
 8001cdc:	08001dfd 	.word	0x08001dfd
 8001ce0:	08001dfd 	.word	0x08001dfd
 8001ce4:	08001d7b 	.word	0x08001d7b
 8001ce8:	08001dfd 	.word	0x08001dfd
 8001cec:	08001dfd 	.word	0x08001dfd
 8001cf0:	08001dfd 	.word	0x08001dfd
 8001cf4:	08001dbb 	.word	0x08001dbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 f9c4 	bl	800208c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	699a      	ldr	r2, [r3, #24]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0208 	orr.w	r2, r2, #8
 8001d12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699a      	ldr	r2, [r3, #24]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0204 	bic.w	r2, r2, #4
 8001d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6999      	ldr	r1, [r3, #24]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	691a      	ldr	r2, [r3, #16]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	619a      	str	r2, [r3, #24]
      break;
 8001d36:	e062      	b.n	8001dfe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 fa0a 	bl	8002158 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	699a      	ldr	r2, [r3, #24]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	699a      	ldr	r2, [r3, #24]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6999      	ldr	r1, [r3, #24]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	021a      	lsls	r2, r3, #8
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	619a      	str	r2, [r3, #24]
      break;
 8001d78:	e041      	b.n	8001dfe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68b9      	ldr	r1, [r7, #8]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f000 fa53 	bl	800222c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	69da      	ldr	r2, [r3, #28]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f042 0208 	orr.w	r2, r2, #8
 8001d94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	69da      	ldr	r2, [r3, #28]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0204 	bic.w	r2, r2, #4
 8001da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	69d9      	ldr	r1, [r3, #28]
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	61da      	str	r2, [r3, #28]
      break;
 8001db8:	e021      	b.n	8001dfe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68b9      	ldr	r1, [r7, #8]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 fa9d 	bl	8002300 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	69da      	ldr	r2, [r3, #28]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	69da      	ldr	r2, [r3, #28]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001de4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	69d9      	ldr	r1, [r3, #28]
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	021a      	lsls	r2, r3, #8
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	61da      	str	r2, [r3, #28]
      break;
 8001dfa:	e000      	b.n	8001dfe <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001dfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_TIM_ConfigClockSource+0x18>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e0a6      	b.n	8001f76 <HAL_TIM_ConfigClockSource+0x166>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b40      	cmp	r3, #64	; 0x40
 8001e5e:	d067      	beq.n	8001f30 <HAL_TIM_ConfigClockSource+0x120>
 8001e60:	2b40      	cmp	r3, #64	; 0x40
 8001e62:	d80b      	bhi.n	8001e7c <HAL_TIM_ConfigClockSource+0x6c>
 8001e64:	2b10      	cmp	r3, #16
 8001e66:	d073      	beq.n	8001f50 <HAL_TIM_ConfigClockSource+0x140>
 8001e68:	2b10      	cmp	r3, #16
 8001e6a:	d802      	bhi.n	8001e72 <HAL_TIM_ConfigClockSource+0x62>
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d06f      	beq.n	8001f50 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001e70:	e078      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001e72:	2b20      	cmp	r3, #32
 8001e74:	d06c      	beq.n	8001f50 <HAL_TIM_ConfigClockSource+0x140>
 8001e76:	2b30      	cmp	r3, #48	; 0x30
 8001e78:	d06a      	beq.n	8001f50 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001e7a:	e073      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001e7c:	2b70      	cmp	r3, #112	; 0x70
 8001e7e:	d00d      	beq.n	8001e9c <HAL_TIM_ConfigClockSource+0x8c>
 8001e80:	2b70      	cmp	r3, #112	; 0x70
 8001e82:	d804      	bhi.n	8001e8e <HAL_TIM_ConfigClockSource+0x7e>
 8001e84:	2b50      	cmp	r3, #80	; 0x50
 8001e86:	d033      	beq.n	8001ef0 <HAL_TIM_ConfigClockSource+0xe0>
 8001e88:	2b60      	cmp	r3, #96	; 0x60
 8001e8a:	d041      	beq.n	8001f10 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001e8c:	e06a      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e92:	d066      	beq.n	8001f62 <HAL_TIM_ConfigClockSource+0x152>
 8001e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e98:	d017      	beq.n	8001eca <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001e9a:	e063      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	6899      	ldr	r1, [r3, #8]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f000 faed 	bl	800248a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ebe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	609a      	str	r2, [r3, #8]
      break;
 8001ec8:	e04c      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	6899      	ldr	r1, [r3, #8]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	f000 fad6 	bl	800248a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eec:	609a      	str	r2, [r3, #8]
      break;
 8001eee:	e039      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6818      	ldr	r0, [r3, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	461a      	mov	r2, r3
 8001efe:	f000 fa4d 	bl	800239c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2150      	movs	r1, #80	; 0x50
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 faa4 	bl	8002456 <TIM_ITRx_SetConfig>
      break;
 8001f0e:	e029      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	6859      	ldr	r1, [r3, #4]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	f000 fa6b 	bl	80023f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2160      	movs	r1, #96	; 0x60
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 fa94 	bl	8002456 <TIM_ITRx_SetConfig>
      break;
 8001f2e:	e019      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6859      	ldr	r1, [r3, #4]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	f000 fa2d 	bl	800239c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2140      	movs	r1, #64	; 0x40
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f000 fa84 	bl	8002456 <TIM_ITRx_SetConfig>
      break;
 8001f4e:	e009      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	f000 fa7b 	bl	8002456 <TIM_ITRx_SetConfig>
        break;
 8001f60:	e000      	b.n	8001f64 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001f62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
	...

08001fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a29      	ldr	r2, [pc, #164]	; (8002080 <TIM_Base_SetConfig+0xb8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d00b      	beq.n	8001ff8 <TIM_Base_SetConfig+0x30>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe6:	d007      	beq.n	8001ff8 <TIM_Base_SetConfig+0x30>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a26      	ldr	r2, [pc, #152]	; (8002084 <TIM_Base_SetConfig+0xbc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d003      	beq.n	8001ff8 <TIM_Base_SetConfig+0x30>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a25      	ldr	r2, [pc, #148]	; (8002088 <TIM_Base_SetConfig+0xc0>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d108      	bne.n	800200a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4313      	orrs	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a1c      	ldr	r2, [pc, #112]	; (8002080 <TIM_Base_SetConfig+0xb8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00b      	beq.n	800202a <TIM_Base_SetConfig+0x62>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002018:	d007      	beq.n	800202a <TIM_Base_SetConfig+0x62>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a19      	ldr	r2, [pc, #100]	; (8002084 <TIM_Base_SetConfig+0xbc>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d003      	beq.n	800202a <TIM_Base_SetConfig+0x62>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a18      	ldr	r2, [pc, #96]	; (8002088 <TIM_Base_SetConfig+0xc0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d108      	bne.n	800203c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4313      	orrs	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	4313      	orrs	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a07      	ldr	r2, [pc, #28]	; (8002080 <TIM_Base_SetConfig+0xb8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d103      	bne.n	8002070 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	615a      	str	r2, [r3, #20]
}
 8002076:	bf00      	nop
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	40012c00 	.word	0x40012c00
 8002084:	40000400 	.word	0x40000400
 8002088:	40000800 	.word	0x40000800

0800208c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800208c:	b480      	push	{r7}
 800208e:	b087      	sub	sp, #28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	f023 0201 	bic.w	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f023 0303 	bic.w	r3, r3, #3
 80020c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f023 0302 	bic.w	r3, r3, #2
 80020d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	4313      	orrs	r3, r2
 80020de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a1c      	ldr	r2, [pc, #112]	; (8002154 <TIM_OC1_SetConfig+0xc8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d10c      	bne.n	8002102 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f023 0308 	bic.w	r3, r3, #8
 80020ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f023 0304 	bic.w	r3, r3, #4
 8002100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a13      	ldr	r2, [pc, #76]	; (8002154 <TIM_OC1_SetConfig+0xc8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d111      	bne.n	800212e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	621a      	str	r2, [r3, #32]
}
 8002148:	bf00      	nop
 800214a:	371c      	adds	r7, #28
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40012c00 	.word	0x40012c00

08002158 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	f023 0210 	bic.w	r2, r3, #16
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800218e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	021b      	lsls	r3, r3, #8
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4313      	orrs	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	f023 0320 	bic.w	r3, r3, #32
 80021a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a1d      	ldr	r2, [pc, #116]	; (8002228 <TIM_OC2_SetConfig+0xd0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d10d      	bne.n	80021d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a14      	ldr	r2, [pc, #80]	; (8002228 <TIM_OC2_SetConfig+0xd0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d113      	bne.n	8002204 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	621a      	str	r2, [r3, #32]
}
 800221e:	bf00      	nop
 8002220:	371c      	adds	r7, #28
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	40012c00 	.word	0x40012c00

0800222c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800225a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f023 0303 	bic.w	r3, r3, #3
 8002262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	4313      	orrs	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	021b      	lsls	r3, r3, #8
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	4313      	orrs	r3, r2
 8002280:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a1d      	ldr	r2, [pc, #116]	; (80022fc <TIM_OC3_SetConfig+0xd0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d10d      	bne.n	80022a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	4313      	orrs	r3, r2
 800229c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a14      	ldr	r2, [pc, #80]	; (80022fc <TIM_OC3_SetConfig+0xd0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d113      	bne.n	80022d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	621a      	str	r2, [r3, #32]
}
 80022f0:	bf00      	nop
 80022f2:	371c      	adds	r7, #28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40012c00 	.word	0x40012c00

08002300 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002300:	b480      	push	{r7}
 8002302:	b087      	sub	sp, #28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800232e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	021b      	lsls	r3, r3, #8
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800234a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	031b      	lsls	r3, r3, #12
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a0f      	ldr	r2, [pc, #60]	; (8002398 <TIM_OC4_SetConfig+0x98>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d109      	bne.n	8002374 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002366:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	019b      	lsls	r3, r3, #6
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	4313      	orrs	r3, r2
 8002372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	621a      	str	r2, [r3, #32]
}
 800238e:	bf00      	nop
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	40012c00 	.word	0x40012c00

0800239c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	f023 0201 	bic.w	r2, r3, #1
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f023 030a 	bic.w	r3, r3, #10
 80023d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4313      	orrs	r3, r2
 80023e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	621a      	str	r2, [r3, #32]
}
 80023ee:	bf00      	nop
 80023f0:	371c      	adds	r7, #28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	f023 0210 	bic.w	r2, r3, #16
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002422:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	031b      	lsls	r3, r3, #12
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	4313      	orrs	r3, r2
 800242c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002434:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	621a      	str	r2, [r3, #32]
}
 800244c:	bf00      	nop
 800244e:	371c      	adds	r7, #28
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr

08002456 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002456:	b480      	push	{r7}
 8002458:	b085      	sub	sp, #20
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800246c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	f043 0307 	orr.w	r3, r3, #7
 8002478:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	609a      	str	r2, [r3, #8]
}
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800248a:	b480      	push	{r7}
 800248c:	b087      	sub	sp, #28
 800248e:	af00      	add	r7, sp, #0
 8002490:	60f8      	str	r0, [r7, #12]
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	021a      	lsls	r2, r3, #8
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	431a      	orrs	r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	609a      	str	r2, [r3, #8]
}
 80024be:	bf00      	nop
 80024c0:	371c      	adds	r7, #28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f003 031f 	and.w	r3, r3, #31
 80024da:	2201      	movs	r2, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a1a      	ldr	r2, [r3, #32]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	401a      	ands	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a1a      	ldr	r2, [r3, #32]
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002500:	431a      	orrs	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	621a      	str	r2, [r3, #32]
}
 8002506:	bf00      	nop
 8002508:	371c      	adds	r7, #28
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002524:	2302      	movs	r3, #2
 8002526:	e046      	b.n	80025b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	4313      	orrs	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a16      	ldr	r2, [pc, #88]	; (80025c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d00e      	beq.n	800258a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002574:	d009      	beq.n	800258a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d004      	beq.n	800258a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a10      	ldr	r2, [pc, #64]	; (80025c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d10c      	bne.n	80025a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002590:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	4313      	orrs	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	40012c00 	.word	0x40012c00
 80025c4:	40000400 	.word	0x40000400
 80025c8:	40000800 	.word	0x40000800

080025cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e03d      	b.n	8002664 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	4313      	orrs	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4313      	orrs	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4313      	orrs	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	4313      	orrs	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr

08002692 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e03f      	b.n	8002724 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d106      	bne.n	80026be <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7fe f861 	bl	8000780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2224      	movs	r2, #36	; 0x24
 80026c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026d4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f828 	bl	800272c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691a      	ldr	r2, [r3, #16]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800270a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2220      	movs	r2, #32
 8002716:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	4313      	orrs	r3, r2
 800275a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002766:	f023 030c 	bic.w	r3, r3, #12
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	68b9      	ldr	r1, [r7, #8]
 8002770:	430b      	orrs	r3, r1
 8002772:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699a      	ldr	r2, [r3, #24]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a2c      	ldr	r2, [pc, #176]	; (8002840 <UART_SetConfig+0x114>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d103      	bne.n	800279c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002794:	f7fe ffa8 	bl	80016e8 <HAL_RCC_GetPCLK2Freq>
 8002798:	60f8      	str	r0, [r7, #12]
 800279a:	e002      	b.n	80027a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800279c:	f7fe ff90 	bl	80016c0 <HAL_RCC_GetPCLK1Freq>
 80027a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	009a      	lsls	r2, r3, #2
 80027ac:	441a      	add	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b8:	4a22      	ldr	r2, [pc, #136]	; (8002844 <UART_SetConfig+0x118>)
 80027ba:	fba2 2303 	umull	r2, r3, r2, r3
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	0119      	lsls	r1, r3, #4
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	009a      	lsls	r2, r3, #2
 80027cc:	441a      	add	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80027d8:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <UART_SetConfig+0x118>)
 80027da:	fba3 0302 	umull	r0, r3, r3, r2
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	2064      	movs	r0, #100	; 0x64
 80027e2:	fb00 f303 	mul.w	r3, r0, r3
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	3332      	adds	r3, #50	; 0x32
 80027ec:	4a15      	ldr	r2, [pc, #84]	; (8002844 <UART_SetConfig+0x118>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027f8:	4419      	add	r1, r3
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	009a      	lsls	r2, r3, #2
 8002804:	441a      	add	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <UART_SetConfig+0x118>)
 8002812:	fba3 0302 	umull	r0, r3, r3, r2
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	2064      	movs	r0, #100	; 0x64
 800281a:	fb00 f303 	mul.w	r3, r0, r3
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	3332      	adds	r3, #50	; 0x32
 8002824:	4a07      	ldr	r2, [pc, #28]	; (8002844 <UART_SetConfig+0x118>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	f003 020f 	and.w	r2, r3, #15
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	440a      	add	r2, r1
 8002836:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002838:	bf00      	nop
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40013800 	.word	0x40013800
 8002844:	51eb851f 	.word	0x51eb851f

08002848 <__libc_init_array>:
 8002848:	b570      	push	{r4, r5, r6, lr}
 800284a:	2500      	movs	r5, #0
 800284c:	4e0c      	ldr	r6, [pc, #48]	; (8002880 <__libc_init_array+0x38>)
 800284e:	4c0d      	ldr	r4, [pc, #52]	; (8002884 <__libc_init_array+0x3c>)
 8002850:	1ba4      	subs	r4, r4, r6
 8002852:	10a4      	asrs	r4, r4, #2
 8002854:	42a5      	cmp	r5, r4
 8002856:	d109      	bne.n	800286c <__libc_init_array+0x24>
 8002858:	f000 f822 	bl	80028a0 <_init>
 800285c:	2500      	movs	r5, #0
 800285e:	4e0a      	ldr	r6, [pc, #40]	; (8002888 <__libc_init_array+0x40>)
 8002860:	4c0a      	ldr	r4, [pc, #40]	; (800288c <__libc_init_array+0x44>)
 8002862:	1ba4      	subs	r4, r4, r6
 8002864:	10a4      	asrs	r4, r4, #2
 8002866:	42a5      	cmp	r5, r4
 8002868:	d105      	bne.n	8002876 <__libc_init_array+0x2e>
 800286a:	bd70      	pop	{r4, r5, r6, pc}
 800286c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002870:	4798      	blx	r3
 8002872:	3501      	adds	r5, #1
 8002874:	e7ee      	b.n	8002854 <__libc_init_array+0xc>
 8002876:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800287a:	4798      	blx	r3
 800287c:	3501      	adds	r5, #1
 800287e:	e7f2      	b.n	8002866 <__libc_init_array+0x1e>
 8002880:	080028e4 	.word	0x080028e4
 8002884:	080028e4 	.word	0x080028e4
 8002888:	080028e4 	.word	0x080028e4
 800288c:	080028e8 	.word	0x080028e8

08002890 <memset>:
 8002890:	4603      	mov	r3, r0
 8002892:	4402      	add	r2, r0
 8002894:	4293      	cmp	r3, r2
 8002896:	d100      	bne.n	800289a <memset+0xa>
 8002898:	4770      	bx	lr
 800289a:	f803 1b01 	strb.w	r1, [r3], #1
 800289e:	e7f9      	b.n	8002894 <memset+0x4>

080028a0 <_init>:
 80028a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a2:	bf00      	nop
 80028a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028a6:	bc08      	pop	{r3}
 80028a8:	469e      	mov	lr, r3
 80028aa:	4770      	bx	lr

080028ac <_fini>:
 80028ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ae:	bf00      	nop
 80028b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b2:	bc08      	pop	{r3}
 80028b4:	469e      	mov	lr, r3
 80028b6:	4770      	bx	lr
