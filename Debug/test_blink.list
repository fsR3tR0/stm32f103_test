
test_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004538  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004644  08004644  00014644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046c0  080046c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080046c0  080046c0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046c0  080046c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046c0  080046c0  000146c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046c4  080046c4  000146c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080046c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000070  08004738  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08004738  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb4b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002268  00000000  00000000  0002ebe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d80  00000000  00000000  00030e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c68  00000000  00000000  00031bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018e98  00000000  00000000  00032838  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb13  00000000  00000000  0004b6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009089d  00000000  00000000  000571e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7a80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ae0  00000000  00000000  000e7afc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800462c 	.word	0x0800462c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800462c 	.word	0x0800462c

0800014c <strtoINT>:
 *  Created on: Dec 12, 2020
 *      Author: root
 */
#include "functions.h"

void strtoINT(uint32_t number, int lenght){
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	466b      	mov	r3, sp
 8000158:	461d      	mov	r5, r3
	uch string[lenght];
 800015a:	6838      	ldr	r0, [r7, #0]
 800015c:	1e43      	subs	r3, r0, #1
 800015e:	60fb      	str	r3, [r7, #12]
 8000160:	4603      	mov	r3, r0
 8000162:	4619      	mov	r1, r3
 8000164:	f04f 0200 	mov.w	r2, #0
 8000168:	f04f 0300 	mov.w	r3, #0
 800016c:	f04f 0400 	mov.w	r4, #0
 8000170:	00d4      	lsls	r4, r2, #3
 8000172:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000176:	00cb      	lsls	r3, r1, #3
 8000178:	4603      	mov	r3, r0
 800017a:	4619      	mov	r1, r3
 800017c:	f04f 0200 	mov.w	r2, #0
 8000180:	f04f 0300 	mov.w	r3, #0
 8000184:	f04f 0400 	mov.w	r4, #0
 8000188:	00d4      	lsls	r4, r2, #3
 800018a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800018e:	00cb      	lsls	r3, r1, #3
 8000190:	4603      	mov	r3, r0
 8000192:	3307      	adds	r3, #7
 8000194:	08db      	lsrs	r3, r3, #3
 8000196:	00db      	lsls	r3, r3, #3
 8000198:	ebad 0d03 	sub.w	sp, sp, r3
 800019c:	466b      	mov	r3, sp
 800019e:	3300      	adds	r3, #0
 80001a0:	60bb      	str	r3, [r7, #8]
	sprintf(string,"%d",number);
 80001a2:	68bb      	ldr	r3, [r7, #8]
 80001a4:	687a      	ldr	r2, [r7, #4]
 80001a6:	4906      	ldr	r1, [pc, #24]	; (80001c0 <strtoINT+0x74>)
 80001a8:	4618      	mov	r0, r3
 80001aa:	f003 fe2d 	bl	8003e08 <siprintf>

	LCD_string(string);
 80001ae:	68bb      	ldr	r3, [r7, #8]
 80001b0:	4618      	mov	r0, r3
 80001b2:	f000 f807 	bl	80001c4 <LCD_string>
 80001b6:	46ad      	mov	sp, r5
}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bdb0      	pop	{r4, r5, r7, pc}
 80001c0:	08004644 	.word	0x08004644

080001c4 <LCD_string>:
 */
//I use a LCD display with 2 row and 16 cool, with Hitachi basic
//i use it in 4 data_bit mode
#include "lcd.h"

void LCD_string(char *str){
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
	while(*str){
 80001cc:	e007      	b.n	80001de <LCD_string+0x1a>
		LCD_data(*str);
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	4618      	mov	r0, r3
 80001d4:	f000 f8c6 	bl	8000364 <LCD_data>
		str++;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	3301      	adds	r3, #1
 80001dc:	607b      	str	r3, [r7, #4]
	while(*str){
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d1f3      	bne.n	80001ce <LCD_string+0xa>
	}
}
 80001e6:	bf00      	nop
 80001e8:	3708      	adds	r7, #8
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}

080001ee <LCD_goto>:

void LCD_goto(u8 row, u8 col){
 80001ee:	b580      	push	{r7, lr}
 80001f0:	b084      	sub	sp, #16
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	4603      	mov	r3, r0
 80001f6:	460a      	mov	r2, r1
 80001f8:	71fb      	strb	r3, [r7, #7]
 80001fa:	4613      	mov	r3, r2
 80001fc:	71bb      	strb	r3, [r7, #6]
	switch(row){
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	2b00      	cmp	r3, #0
 8000202:	d002      	beq.n	800020a <LCD_goto+0x1c>
 8000204:	2b01      	cmp	r3, #1
 8000206:	d010      	beq.n	800022a <LCD_goto+0x3c>
			for(u8 i = col; i>0; i--){
				LCD_cmd(0x14);
			}
		 break;
	}
}
 8000208:	e01f      	b.n	800024a <LCD_goto+0x5c>
			LCD_cmd(0x80);
 800020a:	2080      	movs	r0, #128	; 0x80
 800020c:	f000 f840 	bl	8000290 <LCD_cmd>
			for(u8 i = col; i>0; i--){
 8000210:	79bb      	ldrb	r3, [r7, #6]
 8000212:	73fb      	strb	r3, [r7, #15]
 8000214:	e005      	b.n	8000222 <LCD_goto+0x34>
				LCD_cmd(0x14);
 8000216:	2014      	movs	r0, #20
 8000218:	f000 f83a 	bl	8000290 <LCD_cmd>
			for(u8 i = col; i>0; i--){
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	3b01      	subs	r3, #1
 8000220:	73fb      	strb	r3, [r7, #15]
 8000222:	7bfb      	ldrb	r3, [r7, #15]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d1f6      	bne.n	8000216 <LCD_goto+0x28>
		 break;
 8000228:	e00f      	b.n	800024a <LCD_goto+0x5c>
			LCD_cmd(0xC0);
 800022a:	20c0      	movs	r0, #192	; 0xc0
 800022c:	f000 f830 	bl	8000290 <LCD_cmd>
			for(u8 i = col; i>0; i--){
 8000230:	79bb      	ldrb	r3, [r7, #6]
 8000232:	73bb      	strb	r3, [r7, #14]
 8000234:	e005      	b.n	8000242 <LCD_goto+0x54>
				LCD_cmd(0x14);
 8000236:	2014      	movs	r0, #20
 8000238:	f000 f82a 	bl	8000290 <LCD_cmd>
			for(u8 i = col; i>0; i--){
 800023c:	7bbb      	ldrb	r3, [r7, #14]
 800023e:	3b01      	subs	r3, #1
 8000240:	73bb      	strb	r3, [r7, #14]
 8000242:	7bbb      	ldrb	r3, [r7, #14]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d1f6      	bne.n	8000236 <LCD_goto+0x48>
		 break;
 8000248:	bf00      	nop
}
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <LCD_enable>:

void LCD_enable(){
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	//need a square  signal _| |_ for LCD enable Port
	//we need a 0-1-0 signalflow, transition
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, RESET);	//make _
 8000258:	2200      	movs	r2, #0
 800025a:	2108      	movs	r1, #8
 800025c:	480b      	ldr	r0, [pc, #44]	; (800028c <LCD_enable+0x38>)
 800025e:	f002 f81f 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_Delay(5);		//wait
 8000262:	2005      	movs	r0, #5
 8000264:	f000 ff2e 	bl	80010c4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port,LCD_E_Pin, SET);	//_|
 8000268:	2201      	movs	r2, #1
 800026a:	2108      	movs	r1, #8
 800026c:	4807      	ldr	r0, [pc, #28]	; (800028c <LCD_enable+0x38>)
 800026e:	f002 f817 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_Delay(5);		//wait
 8000272:	2005      	movs	r0, #5
 8000274:	f000 ff26 	bl	80010c4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port,LCD_E_Pin, RESET);	//	|_
 8000278:	2200      	movs	r2, #0
 800027a:	2108      	movs	r1, #8
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <LCD_enable+0x38>)
 800027e:	f002 f80f 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000282:	2005      	movs	r0, #5
 8000284:	f000 ff1e 	bl	80010c4 <HAL_Delay>
}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}
 800028c:	40010c00 	.word	0x40010c00

08000290 <LCD_cmd>:

void LCD_cmd(u8 cmd){
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
	//we need reset RS port, why we send commands for the LCD display
		//the R/W pin is already on GNDm because we only write the display
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin, RESET);
 800029a:	2200      	movs	r2, #0
 800029c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002a0:	482e      	ldr	r0, [pc, #184]	; (800035c <LCD_cmd+0xcc>)
 80002a2:	f001 fffd 	bl	80022a0 <HAL_GPIO_WritePin>
	//we write the data with 2 cycle, first the upper Bits
		//we use PORT MASK just in case
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin,(cmd>>7) & 0x01);
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	09db      	lsrs	r3, r3, #7
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	461a      	mov	r2, r3
 80002ae:	2180      	movs	r1, #128	; 0x80
 80002b0:	482b      	ldr	r0, [pc, #172]	; (8000360 <LCD_cmd+0xd0>)
 80002b2:	f001 fff5 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin,(cmd>>6) & 0x01);
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	099b      	lsrs	r3, r3, #6
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	f003 0301 	and.w	r3, r3, #1
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	461a      	mov	r2, r3
 80002c4:	2140      	movs	r1, #64	; 0x40
 80002c6:	4826      	ldr	r0, [pc, #152]	; (8000360 <LCD_cmd+0xd0>)
 80002c8:	f001 ffea 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin,(cmd>>5) & 0x01);
 80002cc:	79fb      	ldrb	r3, [r7, #7]
 80002ce:	095b      	lsrs	r3, r3, #5
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	461a      	mov	r2, r3
 80002da:	2120      	movs	r1, #32
 80002dc:	4820      	ldr	r0, [pc, #128]	; (8000360 <LCD_cmd+0xd0>)
 80002de:	f001 ffdf 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin,(cmd>>4) & 0x01);
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	091b      	lsrs	r3, r3, #4
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	f003 0301 	and.w	r3, r3, #1
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	461a      	mov	r2, r3
 80002f0:	2110      	movs	r1, #16
 80002f2:	481b      	ldr	r0, [pc, #108]	; (8000360 <LCD_cmd+0xd0>)
 80002f4:	f001 ffd4 	bl	80022a0 <HAL_GPIO_WritePin>

	//we write this for LCD with LCD_enable, we send the datas
	LCD_enable();
 80002f8:	f7ff ffac 	bl	8000254 <LCD_enable>

	//now we write the four lower Bit
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin,(cmd>>3) & 0x01);
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	08db      	lsrs	r3, r3, #3
 8000300:	b2db      	uxtb	r3, r3
 8000302:	f003 0301 	and.w	r3, r3, #1
 8000306:	b2db      	uxtb	r3, r3
 8000308:	461a      	mov	r2, r3
 800030a:	2180      	movs	r1, #128	; 0x80
 800030c:	4814      	ldr	r0, [pc, #80]	; (8000360 <LCD_cmd+0xd0>)
 800030e:	f001 ffc7 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin,(cmd>>2) & 0x01);
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	089b      	lsrs	r3, r3, #2
 8000316:	b2db      	uxtb	r3, r3
 8000318:	f003 0301 	and.w	r3, r3, #1
 800031c:	b2db      	uxtb	r3, r3
 800031e:	461a      	mov	r2, r3
 8000320:	2140      	movs	r1, #64	; 0x40
 8000322:	480f      	ldr	r0, [pc, #60]	; (8000360 <LCD_cmd+0xd0>)
 8000324:	f001 ffbc 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin,(cmd>>1) & 0x01);
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	085b      	lsrs	r3, r3, #1
 800032c:	b2db      	uxtb	r3, r3
 800032e:	f003 0301 	and.w	r3, r3, #1
 8000332:	b2db      	uxtb	r3, r3
 8000334:	461a      	mov	r2, r3
 8000336:	2120      	movs	r1, #32
 8000338:	4809      	ldr	r0, [pc, #36]	; (8000360 <LCD_cmd+0xd0>)
 800033a:	f001 ffb1 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin,(cmd>>0) & 0x01);		//here truly we don`t need the MASK,just in case
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	f003 0301 	and.w	r3, r3, #1
 8000344:	b2db      	uxtb	r3, r3
 8000346:	461a      	mov	r2, r3
 8000348:	2110      	movs	r1, #16
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <LCD_cmd+0xd0>)
 800034c:	f001 ffa8 	bl	80022a0 <HAL_GPIO_WritePin>

	//again write for LCD
	LCD_enable();
 8000350:	f7ff ff80 	bl	8000254 <LCD_enable>
}
 8000354:	bf00      	nop
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	40010800 	.word	0x40010800
 8000360:	40010c00 	.word	0x40010c00

08000364 <LCD_data>:

void LCD_data(u8 data){
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
	//we set the RS Pin, because we send now data
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin,SET);
 800036e:	2201      	movs	r2, #1
 8000370:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000374:	482e      	ldr	r0, [pc, #184]	; (8000430 <LCD_data+0xcc>)
 8000376:	f001 ff93 	bl	80022a0 <HAL_GPIO_WritePin>
	//send data again with 2 cycles
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin, (data>>7) & 0x01);
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	09db      	lsrs	r3, r3, #7
 800037e:	b2db      	uxtb	r3, r3
 8000380:	461a      	mov	r2, r3
 8000382:	2180      	movs	r1, #128	; 0x80
 8000384:	482b      	ldr	r0, [pc, #172]	; (8000434 <LCD_data+0xd0>)
 8000386:	f001 ff8b 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin, (data>>6) & 0x01);
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	099b      	lsrs	r3, r3, #6
 800038e:	b2db      	uxtb	r3, r3
 8000390:	f003 0301 	and.w	r3, r3, #1
 8000394:	b2db      	uxtb	r3, r3
 8000396:	461a      	mov	r2, r3
 8000398:	2140      	movs	r1, #64	; 0x40
 800039a:	4826      	ldr	r0, [pc, #152]	; (8000434 <LCD_data+0xd0>)
 800039c:	f001 ff80 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin, (data>>5) & 0x01);
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	095b      	lsrs	r3, r3, #5
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	461a      	mov	r2, r3
 80003ae:	2120      	movs	r1, #32
 80003b0:	4820      	ldr	r0, [pc, #128]	; (8000434 <LCD_data+0xd0>)
 80003b2:	f001 ff75 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin, (data>>4) & 0x01);
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	091b      	lsrs	r3, r3, #4
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	f003 0301 	and.w	r3, r3, #1
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	461a      	mov	r2, r3
 80003c4:	2110      	movs	r1, #16
 80003c6:	481b      	ldr	r0, [pc, #108]	; (8000434 <LCD_data+0xd0>)
 80003c8:	f001 ff6a 	bl	80022a0 <HAL_GPIO_WritePin>
	//we send the data for display
	LCD_enable();
 80003cc:	f7ff ff42 	bl	8000254 <LCD_enable>

	//now we send the low 4 bits
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin, (data>>3) & 0x01);
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	08db      	lsrs	r3, r3, #3
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	461a      	mov	r2, r3
 80003de:	2180      	movs	r1, #128	; 0x80
 80003e0:	4814      	ldr	r0, [pc, #80]	; (8000434 <LCD_data+0xd0>)
 80003e2:	f001 ff5d 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin, (data>>2) & 0x01);
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	089b      	lsrs	r3, r3, #2
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	f003 0301 	and.w	r3, r3, #1
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	461a      	mov	r2, r3
 80003f4:	2140      	movs	r1, #64	; 0x40
 80003f6:	480f      	ldr	r0, [pc, #60]	; (8000434 <LCD_data+0xd0>)
 80003f8:	f001 ff52 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin, (data>>1) & 0x01);
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	085b      	lsrs	r3, r3, #1
 8000400:	b2db      	uxtb	r3, r3
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	b2db      	uxtb	r3, r3
 8000408:	461a      	mov	r2, r3
 800040a:	2120      	movs	r1, #32
 800040c:	4809      	ldr	r0, [pc, #36]	; (8000434 <LCD_data+0xd0>)
 800040e:	f001 ff47 	bl	80022a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin, (data>>0) & 0x01);
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	f003 0301 	and.w	r3, r3, #1
 8000418:	b2db      	uxtb	r3, r3
 800041a:	461a      	mov	r2, r3
 800041c:	2110      	movs	r1, #16
 800041e:	4805      	ldr	r0, [pc, #20]	; (8000434 <LCD_data+0xd0>)
 8000420:	f001 ff3e 	bl	80022a0 <HAL_GPIO_WritePin>

	LCD_enable();
 8000424:	f7ff ff16 	bl	8000254 <LCD_enable>
}
 8000428:	bf00      	nop
 800042a:	3708      	adds	r7, #8
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	40010800 	.word	0x40010800
 8000434:	40010c00 	.word	0x40010c00

08000438 <LCD_init>:

void LCD_init(bool curzor, bool blink){
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	460a      	mov	r2, r1
 8000442:	71fb      	strb	r3, [r7, #7]
 8000444:	4613      	mov	r3, r2
 8000446:	71bb      	strb	r3, [r7, #6]
	//we before init
	HAL_Delay(15);
 8000448:	200f      	movs	r0, #15
 800044a:	f000 fe3b 	bl	80010c4 <HAL_Delay>
	//we use it in 4bit mode with 2 row - 5*8 pixel
	LCD_cmd(0x20);
 800044e:	2020      	movs	r0, #32
 8000450:	f7ff ff1e 	bl	8000290 <LCD_cmd>

	//just in case we send for Enable PORT 3 cycle
	LCD_enable();
 8000454:	f7ff fefe 	bl	8000254 <LCD_enable>
	LCD_enable();
 8000458:	f7ff fefc 	bl	8000254 <LCD_enable>
	LCD_enable();
 800045c:	f7ff fefa 	bl	8000254 <LCD_enable>

	//this hexacodes is from datasheet (LCD 1602, with hitachi base)
	LCD_cmd(0x28);		//set the mode 3 time
 8000460:	2028      	movs	r0, #40	; 0x28
 8000462:	f7ff ff15 	bl	8000290 <LCD_cmd>
	LCD_cmd(0x28);		//we don`t know before the init function wich one mode is the display
 8000466:	2028      	movs	r0, #40	; 0x28
 8000468:	f7ff ff12 	bl	8000290 <LCD_cmd>
	LCD_cmd(0x28);		//when we set the mode only 2 times, the display cant work well
 800046c:	2028      	movs	r0, #40	; 0x28
 800046e:	f7ff ff0f 	bl	8000290 <LCD_cmd>

	LCD_cmd(0x01);			//lcd clear
 8000472:	2001      	movs	r0, #1
 8000474:	f7ff ff0c 	bl	8000290 <LCD_cmd>
	LCD_cmd(0x02);			//send the curzor to 0.row 0.cool
 8000478:	2002      	movs	r0, #2
 800047a:	f7ff ff09 	bl	8000290 <LCD_cmd>
	//set the curzor blink and the curzor visibility
	LCD_cmd(0x08 | (1<<LCD_E) | (curzor<<LCD_curzor) | (blink<<LCD_blink));
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	b25b      	sxtb	r3, r3
 8000484:	f043 030c 	orr.w	r3, r3, #12
 8000488:	b25a      	sxtb	r2, r3
 800048a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800048e:	4313      	orrs	r3, r2
 8000490:	b25b      	sxtb	r3, r3
 8000492:	b2db      	uxtb	r3, r3
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff fefb 	bl	8000290 <LCD_cmd>
}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
	...

080004a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	u32 temp_lcd = 0;
 80004aa:	2300      	movs	r3, #0
 80004ac:	607b      	str	r3, [r7, #4]
	u32 temp_vin = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	603b      	str	r3, [r7, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b2:	f000 fda5 	bl	8001000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b6:	f000 f8c9 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ba:	f000 faef 	bl	8000a9c <MX_GPIO_Init>
  MX_TIM1_Init();
 80004be:	f000 f9b9 	bl	8000834 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80004c2:	f000 faa3 	bl	8000a0c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80004c6:	f000 f919 	bl	80006fc <MX_ADC1_Init>
  MX_TIM2_Init();
 80004ca:	f000 fa51 	bl	8000970 <MX_TIM2_Init>
  MX_DMA_Init();
 80004ce:	f000 fac7 	bl	8000a60 <MX_DMA_Init>
  MX_ADC2_Init();
 80004d2:	f000 f971 	bl	80007b8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 80004d6:	210c      	movs	r1, #12
 80004d8:	4852      	ldr	r0, [pc, #328]	; (8000624 <main+0x180>)
 80004da:	f002 fcdf 	bl	8002e9c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80004de:	4852      	ldr	r0, [pc, #328]	; (8000628 <main+0x184>)
 80004e0:	f002 fc32 	bl	8002d48 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, temp,3);
 80004e4:	2203      	movs	r2, #3
 80004e6:	4951      	ldr	r1, [pc, #324]	; (800062c <main+0x188>)
 80004e8:	4851      	ldr	r0, [pc, #324]	; (8000630 <main+0x18c>)
 80004ea:	f000 ff93 	bl	8001414 <HAL_ADC_Start_DMA>
  HAL_ADC_Start(&hadc2);
 80004ee:	4851      	ldr	r0, [pc, #324]	; (8000634 <main+0x190>)
 80004f0:	f000 fee2 	bl	80012b8 <HAL_ADC_Start>
  LCD_init(1,1);
 80004f4:	2101      	movs	r1, #1
 80004f6:	2001      	movs	r0, #1
 80004f8:	f7ff ff9e 	bl	8000438 <LCD_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,100);
 80004fc:	4b49      	ldr	r3, [pc, #292]	; (8000624 <main+0x180>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2264      	movs	r2, #100	; 0x64
 8000502:	641a      	str	r2, [r3, #64]	; 0x40
  LCD_string("Helo");
 8000504:	484c      	ldr	r0, [pc, #304]	; (8000638 <main+0x194>)
 8000506:	f7ff fe5d 	bl	80001c4 <LCD_string>
  HAL_Delay(2000);
 800050a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800050e:	f000 fdd9 	bl	80010c4 <HAL_Delay>
  LCD_cmd(0x01);
 8000512:	2001      	movs	r0, #1
 8000514:	f7ff febc 	bl	8000290 <LCD_cmd>
  LCD_goto(0,0);
 8000518:	2100      	movs	r1, #0
 800051a:	2000      	movs	r0, #0
 800051c:	f7ff fe67 	bl	80001ee <LCD_goto>
  LCD_string("Temp: ");
 8000520:	4846      	ldr	r0, [pc, #280]	; (800063c <main+0x198>)
 8000522:	f7ff fe4f 	bl	80001c4 <LCD_string>
  LCD_goto(1,0);
 8000526:	2100      	movs	r1, #0
 8000528:	2001      	movs	r0, #1
 800052a:	f7ff fe60 	bl	80001ee <LCD_goto>
  LCD_string("ADC: ");
 800052e:	4844      	ldr	r0, [pc, #272]	; (8000640 <main+0x19c>)
 8000530:	f7ff fe48 	bl	80001c4 <LCD_string>
  while (1)
  {
	  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);

	  //LCD_string("Mehet");
	  LCD_goto(0,6);
 8000534:	2106      	movs	r1, #6
 8000536:	2000      	movs	r0, #0
 8000538:	f7ff fe59 	bl	80001ee <LCD_goto>
	  strtoINT(temp[0], sizeof(temp[0]));
 800053c:	4b3b      	ldr	r3, [pc, #236]	; (800062c <main+0x188>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2104      	movs	r1, #4
 8000542:	4618      	mov	r0, r3
 8000544:	f7ff fe02 	bl	800014c <strtoINT>

	  LCD_goto(1,6);
 8000548:	2106      	movs	r1, #6
 800054a:	2001      	movs	r0, #1
 800054c:	f7ff fe4f 	bl	80001ee <LCD_goto>
	  //strtoINT(temp[1],sizeof(temp[1]));
	  temp_vin = HAL_ADC_GetValue(&hadc2);
 8000550:	4838      	ldr	r0, [pc, #224]	; (8000634 <main+0x190>)
 8000552:	f001 f83d 	bl	80015d0 <HAL_ADC_GetValue>
 8000556:	6038      	str	r0, [r7, #0]
	  strtoINT(temp_vin,sizeof(temp_vin));
 8000558:	2104      	movs	r1, #4
 800055a:	6838      	ldr	r0, [r7, #0]
 800055c:	f7ff fdf6 	bl	800014c <strtoINT>
	  LCD_goto(1,7);
	  strtoINT(temp_vin, sizeof(temp_vin));
*/
	  //LCD_goto(1,6);
	  //LCD_string(temp[1]);
	  HAL_GPIO_TogglePin(led_0_GPIO_Port,led_0_Pin);
 8000560:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000564:	4837      	ldr	r0, [pc, #220]	; (8000644 <main+0x1a0>)
 8000566:	f001 feb3 	bl	80022d0 <HAL_GPIO_TogglePin>
	  HAL_GPIO_WritePin(led_1_GPIO_Port,led_1_Pin, SET);
 800056a:	2201      	movs	r2, #1
 800056c:	2102      	movs	r1, #2
 800056e:	4836      	ldr	r0, [pc, #216]	; (8000648 <main+0x1a4>)
 8000570:	f001 fe96 	bl	80022a0 <HAL_GPIO_WritePin>
	  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,80);
 8000574:	4b2b      	ldr	r3, [pc, #172]	; (8000624 <main+0x180>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2250      	movs	r2, #80	; 0x50
 800057a:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(500);
 800057c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000580:	f000 fda0 	bl	80010c4 <HAL_Delay>

	  HAL_GPIO_WritePin(led_1_GPIO_Port,led_1_Pin, RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2102      	movs	r1, #2
 8000588:	482f      	ldr	r0, [pc, #188]	; (8000648 <main+0x1a4>)
 800058a:	f001 fe89 	bl	80022a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(led_2_GPIO_Port,led_2_Pin, SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2104      	movs	r1, #4
 8000592:	482d      	ldr	r0, [pc, #180]	; (8000648 <main+0x1a4>)
 8000594:	f001 fe84 	bl	80022a0 <HAL_GPIO_WritePin>

	  HAL_Delay(500);
 8000598:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800059c:	f000 fd92 	bl	80010c4 <HAL_Delay>

	  HAL_GPIO_WritePin(led_2_GPIO_Port,led_2_Pin, RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2104      	movs	r1, #4
 80005a4:	4828      	ldr	r0, [pc, #160]	; (8000648 <main+0x1a4>)
 80005a6:	f001 fe7b 	bl	80022a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(led_3_GPIO_Port,led_3_Pin, SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2108      	movs	r1, #8
 80005ae:	4826      	ldr	r0, [pc, #152]	; (8000648 <main+0x1a4>)
 80005b0:	f001 fe76 	bl	80022a0 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80005b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005b8:	f000 fd84 	bl	80010c4 <HAL_Delay>

	  HAL_GPIO_WritePin(led_3_GPIO_Port,led_3_Pin, RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2108      	movs	r1, #8
 80005c0:	4821      	ldr	r0, [pc, #132]	; (8000648 <main+0x1a4>)
 80005c2:	f001 fe6d 	bl	80022a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(led_4_GPIO_Port,led_4_Pin, SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2110      	movs	r1, #16
 80005ca:	481f      	ldr	r0, [pc, #124]	; (8000648 <main+0x1a4>)
 80005cc:	f001 fe68 	bl	80022a0 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80005d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005d4:	f000 fd76 	bl	80010c4 <HAL_Delay>

	  HAL_GPIO_WritePin(led_4_GPIO_Port,led_4_Pin, RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2110      	movs	r1, #16
 80005dc:	481a      	ldr	r0, [pc, #104]	; (8000648 <main+0x1a4>)
 80005de:	f001 fe5f 	bl	80022a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(led_5_GPIO_Port,led_5_Pin, SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	2120      	movs	r1, #32
 80005e6:	4818      	ldr	r0, [pc, #96]	; (8000648 <main+0x1a4>)
 80005e8:	f001 fe5a 	bl	80022a0 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80005ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005f0:	f000 fd68 	bl	80010c4 <HAL_Delay>
/*
	  HAL_GPIO_WritePin(led_4_GPIO_Port,led_1_Pin, RESET);
	  HAL_GPIO_WritePin(led_5_GPIO_Port,led_2_Pin, SET);
	  HAL_Delay(500);
*/
	  HAL_GPIO_WritePin(led_5_GPIO_Port,led_5_Pin, RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2120      	movs	r1, #32
 80005f8:	4813      	ldr	r0, [pc, #76]	; (8000648 <main+0x1a4>)
 80005fa:	f001 fe51 	bl	80022a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(led_6_GPIO_Port,led_6_Pin, SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	2140      	movs	r1, #64	; 0x40
 8000602:	4811      	ldr	r0, [pc, #68]	; (8000648 <main+0x1a4>)
 8000604:	f001 fe4c 	bl	80022a0 <HAL_GPIO_WritePin>
	  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,20);
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <main+0x180>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2214      	movs	r2, #20
 800060e:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(500);
 8000610:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000614:	f000 fd56 	bl	80010c4 <HAL_Delay>

	  HAL_GPIO_WritePin(led_6_GPIO_Port,led_6_Pin, RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2140      	movs	r1, #64	; 0x40
 800061c:	480a      	ldr	r0, [pc, #40]	; (8000648 <main+0x1a4>)
 800061e:	f001 fe3f 	bl	80022a0 <HAL_GPIO_WritePin>
	  LCD_goto(0,6);
 8000622:	e787      	b.n	8000534 <main+0x90>
 8000624:	20000188 	.word	0x20000188
 8000628:	200001d0 	.word	0x200001d0
 800062c:	2000008c 	.word	0x2000008c
 8000630:	200000d4 	.word	0x200000d4
 8000634:	200000a4 	.word	0x200000a4
 8000638:	08004648 	.word	0x08004648
 800063c:	08004650 	.word	0x08004650
 8000640:	08004658 	.word	0x08004658
 8000644:	40011000 	.word	0x40011000
 8000648:	40010800 	.word	0x40010800

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000656:	2228      	movs	r2, #40	; 0x28
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f003 fbcc 	bl	8003df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067c:	2301      	movs	r3, #1
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000684:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068a:	2301      	movs	r3, #1
 800068c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000698:	2300      	movs	r3, #0
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 fe2f 	bl	8002304 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80006ac:	f000 fa8e 	bl	8000bcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 f89a 	bl	8002804 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006d6:	f000 fa79 	bl	8000bcc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006da:	2302      	movs	r3, #2
 80006dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 fa29 	bl	8002b3c <HAL_RCCEx_PeriphCLKConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80006f0:	f000 fa6c 	bl	8000bcc <Error_Handler>
  }
}
 80006f4:	bf00      	nop
 80006f6:	3750      	adds	r7, #80	; 0x50
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800070c:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <MX_ADC1_Init+0xb4>)
 800070e:	4a29      	ldr	r2, [pc, #164]	; (80007b4 <MX_ADC1_Init+0xb8>)
 8000710:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000712:	4b27      	ldr	r3, [pc, #156]	; (80007b0 <MX_ADC1_Init+0xb4>)
 8000714:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000718:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800071a:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <MX_ADC1_Init+0xb4>)
 800071c:	2201      	movs	r2, #1
 800071e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000720:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <MX_ADC1_Init+0xb4>)
 8000722:	2200      	movs	r2, #0
 8000724:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000726:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <MX_ADC1_Init+0xb4>)
 8000728:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800072c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072e:	4b20      	ldr	r3, [pc, #128]	; (80007b0 <MX_ADC1_Init+0xb4>)
 8000730:	2200      	movs	r2, #0
 8000732:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000734:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <MX_ADC1_Init+0xb4>)
 8000736:	2203      	movs	r2, #3
 8000738:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800073a:	481d      	ldr	r0, [pc, #116]	; (80007b0 <MX_ADC1_Init+0xb4>)
 800073c:	f000 fce4 	bl	8001108 <HAL_ADC_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000746:	f000 fa41 	bl	8000bcc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800074a:	2310      	movs	r3, #16
 800074c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800074e:	2301      	movs	r3, #1
 8000750:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000752:	2306      	movs	r3, #6
 8000754:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4619      	mov	r1, r3
 800075a:	4815      	ldr	r0, [pc, #84]	; (80007b0 <MX_ADC1_Init+0xb4>)
 800075c:	f000 ff60 	bl	8001620 <HAL_ADC_ConfigChannel>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000766:	f000 fa31 	bl	8000bcc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800076a:	2308      	movs	r3, #8
 800076c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800076e:	2302      	movs	r3, #2
 8000770:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000772:	2307      	movs	r3, #7
 8000774:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	4619      	mov	r1, r3
 800077a:	480d      	ldr	r0, [pc, #52]	; (80007b0 <MX_ADC1_Init+0xb4>)
 800077c:	f000 ff50 	bl	8001620 <HAL_ADC_ConfigChannel>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000786:	f000 fa21 	bl	8000bcc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800078a:	2309      	movs	r3, #9
 800078c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800078e:	2303      	movs	r3, #3
 8000790:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	4619      	mov	r1, r3
 8000796:	4806      	ldr	r0, [pc, #24]	; (80007b0 <MX_ADC1_Init+0xb4>)
 8000798:	f000 ff42 	bl	8001620 <HAL_ADC_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80007a2:	f000 fa13 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000d4 	.word	0x200000d4
 80007b4:	40012400 	.word	0x40012400

080007b8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_ADC2_Init+0x74>)
 80007ca:	4a19      	ldr	r2, [pc, #100]	; (8000830 <MX_ADC2_Init+0x78>)
 80007cc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_ADC2_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_ADC2_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_ADC2_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_ADC2_Init+0x74>)
 80007e2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80007e6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <MX_ADC2_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_ADC2_Init+0x74>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007f4:	480d      	ldr	r0, [pc, #52]	; (800082c <MX_ADC2_Init+0x74>)
 80007f6:	f000 fc87 	bl	8001108 <HAL_ADC_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000800:	f000 f9e4 	bl	8000bcc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000804:	2307      	movs	r3, #7
 8000806:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000808:	2301      	movs	r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_ADC2_Init+0x74>)
 8000816:	f000 ff03 	bl	8001620 <HAL_ADC_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000820:	f000 f9d4 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200000a4 	.word	0x200000a4
 8000830:	40012800 	.word	0x40012800

08000834 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b096      	sub	sp, #88	; 0x58
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000848:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
 8000862:	615a      	str	r2, [r3, #20]
 8000864:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2220      	movs	r2, #32
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f003 fac3 	bl	8003df8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000872:	4b3d      	ldr	r3, [pc, #244]	; (8000968 <MX_TIM1_Init+0x134>)
 8000874:	4a3d      	ldr	r2, [pc, #244]	; (800096c <MX_TIM1_Init+0x138>)
 8000876:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1599;
 8000878:	4b3b      	ldr	r3, [pc, #236]	; (8000968 <MX_TIM1_Init+0x134>)
 800087a:	f240 623f 	movw	r2, #1599	; 0x63f
 800087e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b39      	ldr	r3, [pc, #228]	; (8000968 <MX_TIM1_Init+0x134>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8000886:	4b38      	ldr	r3, [pc, #224]	; (8000968 <MX_TIM1_Init+0x134>)
 8000888:	22c8      	movs	r2, #200	; 0xc8
 800088a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088c:	4b36      	ldr	r3, [pc, #216]	; (8000968 <MX_TIM1_Init+0x134>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000892:	4b35      	ldr	r3, [pc, #212]	; (8000968 <MX_TIM1_Init+0x134>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000898:	4b33      	ldr	r3, [pc, #204]	; (8000968 <MX_TIM1_Init+0x134>)
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800089e:	4832      	ldr	r0, [pc, #200]	; (8000968 <MX_TIM1_Init+0x134>)
 80008a0:	f002 fa02 	bl	8002ca8 <HAL_TIM_Base_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80008aa:	f000 f98f 	bl	8000bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008b8:	4619      	mov	r1, r3
 80008ba:	482b      	ldr	r0, [pc, #172]	; (8000968 <MX_TIM1_Init+0x134>)
 80008bc:	f002 fd56 	bl	800336c <HAL_TIM_ConfigClockSource>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008c6:	f000 f981 	bl	8000bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008ca:	4827      	ldr	r0, [pc, #156]	; (8000968 <MX_TIM1_Init+0x134>)
 80008cc:	f002 fa8e 	bl	8002dec <HAL_TIM_PWM_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80008d6:	f000 f979 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008da:	2300      	movs	r3, #0
 80008dc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008e6:	4619      	mov	r1, r3
 80008e8:	481f      	ldr	r0, [pc, #124]	; (8000968 <MX_TIM1_Init+0x134>)
 80008ea:	f003 f8bf 	bl	8003a6c <HAL_TIMEx_MasterConfigSynchronization>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80008f4:	f000 f96a 	bl	8000bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f8:	2360      	movs	r3, #96	; 0x60
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 100;
 80008fc:	2364      	movs	r3, #100	; 0x64
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000900:	2300      	movs	r3, #0
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000908:	2300      	movs	r3, #0
 800090a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800090c:	2300      	movs	r3, #0
 800090e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000914:	220c      	movs	r2, #12
 8000916:	4619      	mov	r1, r3
 8000918:	4813      	ldr	r0, [pc, #76]	; (8000968 <MX_TIM1_Init+0x134>)
 800091a:	f002 fc69 	bl	80031f0 <HAL_TIM_PWM_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000924:	f000 f952 	bl	8000bcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800093c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000940:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4619      	mov	r1, r3
 800094a:	4807      	ldr	r0, [pc, #28]	; (8000968 <MX_TIM1_Init+0x134>)
 800094c:	f003 f8ec 	bl	8003b28 <HAL_TIMEx_ConfigBreakDeadTime>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000956:	f000 f939 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800095a:	4803      	ldr	r0, [pc, #12]	; (8000968 <MX_TIM1_Init+0x134>)
 800095c:	f000 fa3a 	bl	8000dd4 <HAL_TIM_MspPostInit>

}
 8000960:	bf00      	nop
 8000962:	3758      	adds	r7, #88	; 0x58
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000188 	.word	0x20000188
 800096c:	40012c00 	.word	0x40012c00

08000970 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000984:	463b      	mov	r3, r7
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <MX_TIM2_Init+0x98>)
 800098e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000992:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39999;
 8000994:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <MX_TIM2_Init+0x98>)
 8000996:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800099a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_TIM2_Init+0x98>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_TIM2_Init+0x98>)
 80009a4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80009a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_TIM2_Init+0x98>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <MX_TIM2_Init+0x98>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009b6:	4814      	ldr	r0, [pc, #80]	; (8000a08 <MX_TIM2_Init+0x98>)
 80009b8:	f002 f976 	bl	8002ca8 <HAL_TIM_Base_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80009c2:	f000 f903 	bl	8000bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	4619      	mov	r1, r3
 80009d2:	480d      	ldr	r0, [pc, #52]	; (8000a08 <MX_TIM2_Init+0x98>)
 80009d4:	f002 fcca 	bl	800336c <HAL_TIM_ConfigClockSource>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80009de:	f000 f8f5 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ea:	463b      	mov	r3, r7
 80009ec:	4619      	mov	r1, r3
 80009ee:	4806      	ldr	r0, [pc, #24]	; (8000a08 <MX_TIM2_Init+0x98>)
 80009f0:	f003 f83c 	bl	8003a6c <HAL_TIMEx_MasterConfigSynchronization>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009fa:	f000 f8e7 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200001d0 	.word	0x200001d0

08000a0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <MX_USART1_UART_Init+0x50>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a44:	f003 f8d3 	bl	8003bee <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a4e:	f000 f8bd 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000104 	.word	0x20000104
 8000a5c:	40013800 	.word	0x40013800

08000a60 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_DMA_Init+0x38>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <MX_DMA_Init+0x38>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6153      	str	r3, [r2, #20]
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_DMA_Init+0x38>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2100      	movs	r1, #0
 8000a82:	200b      	movs	r0, #11
 8000a84:	f001 f88d 	bl	8001ba2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a88:	200b      	movs	r0, #11
 8000a8a:	f001 f8a6 	bl	8001bda <HAL_NVIC_EnableIRQ>

}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40021000 	.word	0x40021000

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab0:	4b38      	ldr	r3, [pc, #224]	; (8000b94 <MX_GPIO_Init+0xf8>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a37      	ldr	r2, [pc, #220]	; (8000b94 <MX_GPIO_Init+0xf8>)
 8000ab6:	f043 0310 	orr.w	r3, r3, #16
 8000aba:	6193      	str	r3, [r2, #24]
 8000abc:	4b35      	ldr	r3, [pc, #212]	; (8000b94 <MX_GPIO_Init+0xf8>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f003 0310 	and.w	r3, r3, #16
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac8:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <MX_GPIO_Init+0xf8>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a31      	ldr	r2, [pc, #196]	; (8000b94 <MX_GPIO_Init+0xf8>)
 8000ace:	f043 0320 	orr.w	r3, r3, #32
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <MX_GPIO_Init+0xf8>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f003 0320 	and.w	r3, r3, #32
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <MX_GPIO_Init+0xf8>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a2b      	ldr	r2, [pc, #172]	; (8000b94 <MX_GPIO_Init+0xf8>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <MX_GPIO_Init+0xf8>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af8:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <MX_GPIO_Init+0xf8>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a25      	ldr	r2, [pc, #148]	; (8000b94 <MX_GPIO_Init+0xf8>)
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <MX_GPIO_Init+0xf8>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0308 	and.w	r3, r3, #8
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_0_GPIO_Port, led_0_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b16:	4820      	ldr	r0, [pc, #128]	; (8000b98 <MX_GPIO_Init+0xfc>)
 8000b18:	f001 fbc2 	bl	80022a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_1_Pin|led_2_Pin|led_3_Pin|led_4_Pin 
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f248 117e 	movw	r1, #33150	; 0x817e
 8000b22:	481e      	ldr	r0, [pc, #120]	; (8000b9c <MX_GPIO_Init+0x100>)
 8000b24:	f001 fbbc 	bl	80022a0 <HAL_GPIO_WritePin>
                          |led_5_Pin|led_6_Pin|led_IT_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_E_Pin|LCD_DATA_4_Pin|LCD_DATA_5_Pin|LCD_DATA_6_Pin 
 8000b28:	2200      	movs	r2, #0
 8000b2a:	21f8      	movs	r1, #248	; 0xf8
 8000b2c:	481c      	ldr	r0, [pc, #112]	; (8000ba0 <MX_GPIO_Init+0x104>)
 8000b2e:	f001 fbb7 	bl	80022a0 <HAL_GPIO_WritePin>
                          |LCD_DATA_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : led_0_Pin */
  GPIO_InitStruct.Pin = led_0_Pin;
 8000b32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2302      	movs	r3, #2
 8000b42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_0_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4813      	ldr	r0, [pc, #76]	; (8000b98 <MX_GPIO_Init+0xfc>)
 8000b4c:	f001 fa4e 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pins : led_1_Pin led_2_Pin led_3_Pin led_4_Pin 
                           led_5_Pin led_6_Pin led_IT_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = led_1_Pin|led_2_Pin|led_3_Pin|led_4_Pin 
 8000b50:	f248 137e 	movw	r3, #33150	; 0x817e
 8000b54:	613b      	str	r3, [r7, #16]
                          |led_5_Pin|led_6_Pin|led_IT_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0310 	add.w	r3, r7, #16
 8000b66:	4619      	mov	r1, r3
 8000b68:	480c      	ldr	r0, [pc, #48]	; (8000b9c <MX_GPIO_Init+0x100>)
 8000b6a:	f001 fa3f 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_E_Pin LCD_DATA_4_Pin LCD_DATA_5_Pin LCD_DATA_6_Pin 
                           LCD_DATA_7_Pin */
  GPIO_InitStruct.Pin = LCD_E_Pin|LCD_DATA_4_Pin|LCD_DATA_5_Pin|LCD_DATA_6_Pin 
 8000b6e:	23f8      	movs	r3, #248	; 0xf8
 8000b70:	613b      	str	r3, [r7, #16]
                          |LCD_DATA_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7e:	f107 0310 	add.w	r3, r7, #16
 8000b82:	4619      	mov	r1, r3
 8000b84:	4806      	ldr	r0, [pc, #24]	; (8000ba0 <MX_GPIO_Init+0x104>)
 8000b86:	f001 fa31 	bl	8001fec <HAL_GPIO_Init>

}
 8000b8a:	bf00      	nop
 8000b8c:	3720      	adds	r7, #32
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40011000 	.word	0x40011000
 8000b9c:	40010800 	.word	0x40010800
 8000ba0:	40010c00 	.word	0x40010c00

08000ba4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bb4:	d104      	bne.n	8000bc0 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(led_IT_GPIO_Port, led_IT_Pin);
 8000bb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bba:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000bbc:	f001 fb88 	bl	80022d0 <HAL_GPIO_TogglePin>
	}
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40010800 	.word	0x40010800

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <HAL_MspInit+0x5c>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <HAL_MspInit+0x5c>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6193      	str	r3, [r2, #24]
 8000bea:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <HAL_MspInit+0x5c>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_MspInit+0x5c>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <HAL_MspInit+0x5c>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c00:	61d3      	str	r3, [r2, #28]
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <HAL_MspInit+0x5c>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <HAL_MspInit+0x60>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <HAL_MspInit+0x60>)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40010000 	.word	0x40010000

08000c3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0318 	add.w	r3, r7, #24
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a3c      	ldr	r2, [pc, #240]	; (8000d48 <HAL_ADC_MspInit+0x10c>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d14a      	bne.n	8000cf2 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c5c:	4b3b      	ldr	r3, [pc, #236]	; (8000d4c <HAL_ADC_MspInit+0x110>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a3a      	ldr	r2, [pc, #232]	; (8000d4c <HAL_ADC_MspInit+0x110>)
 8000c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b38      	ldr	r3, [pc, #224]	; (8000d4c <HAL_ADC_MspInit+0x110>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c70:	617b      	str	r3, [r7, #20]
 8000c72:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c74:	4b35      	ldr	r3, [pc, #212]	; (8000d4c <HAL_ADC_MspInit+0x110>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a34      	ldr	r2, [pc, #208]	; (8000d4c <HAL_ADC_MspInit+0x110>)
 8000c7a:	f043 0308 	orr.w	r3, r3, #8
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b32      	ldr	r3, [pc, #200]	; (8000d4c <HAL_ADC_MspInit+0x110>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0308 	and.w	r3, r3, #8
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c90:	2303      	movs	r3, #3
 8000c92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c94:	f107 0318 	add.w	r3, r7, #24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	482d      	ldr	r0, [pc, #180]	; (8000d50 <HAL_ADC_MspInit+0x114>)
 8000c9c:	f001 f9a6 	bl	8001fec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ca0:	4b2c      	ldr	r3, [pc, #176]	; (8000d54 <HAL_ADC_MspInit+0x118>)
 8000ca2:	4a2d      	ldr	r2, [pc, #180]	; (8000d58 <HAL_ADC_MspInit+0x11c>)
 8000ca4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ca6:	4b2b      	ldr	r3, [pc, #172]	; (8000d54 <HAL_ADC_MspInit+0x118>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cac:	4b29      	ldr	r3, [pc, #164]	; (8000d54 <HAL_ADC_MspInit+0x118>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cb2:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <HAL_ADC_MspInit+0x118>)
 8000cb4:	2280      	movs	r2, #128	; 0x80
 8000cb6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cb8:	4b26      	ldr	r3, [pc, #152]	; (8000d54 <HAL_ADC_MspInit+0x118>)
 8000cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cbe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cc0:	4b24      	ldr	r3, [pc, #144]	; (8000d54 <HAL_ADC_MspInit+0x118>)
 8000cc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cc6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cc8:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <HAL_ADC_MspInit+0x118>)
 8000cca:	2220      	movs	r2, #32
 8000ccc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cce:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <HAL_ADC_MspInit+0x118>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cd4:	481f      	ldr	r0, [pc, #124]	; (8000d54 <HAL_ADC_MspInit+0x118>)
 8000cd6:	f000 ff9b 	bl	8001c10 <HAL_DMA_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000ce0:	f7ff ff74 	bl	8000bcc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a1b      	ldr	r2, [pc, #108]	; (8000d54 <HAL_ADC_MspInit+0x118>)
 8000ce8:	621a      	str	r2, [r3, #32]
 8000cea:	4a1a      	ldr	r2, [pc, #104]	; (8000d54 <HAL_ADC_MspInit+0x118>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000cf0:	e026      	b.n	8000d40 <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC2)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a19      	ldr	r2, [pc, #100]	; (8000d5c <HAL_ADC_MspInit+0x120>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d121      	bne.n	8000d40 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <HAL_ADC_MspInit+0x110>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <HAL_ADC_MspInit+0x110>)
 8000d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <HAL_ADC_MspInit+0x110>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <HAL_ADC_MspInit+0x110>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a0c      	ldr	r2, [pc, #48]	; (8000d4c <HAL_ADC_MspInit+0x110>)
 8000d1a:	f043 0304 	orr.w	r3, r3, #4
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_ADC_MspInit+0x110>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d30:	2303      	movs	r3, #3
 8000d32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 0318 	add.w	r3, r7, #24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4809      	ldr	r0, [pc, #36]	; (8000d60 <HAL_ADC_MspInit+0x124>)
 8000d3c:	f001 f956 	bl	8001fec <HAL_GPIO_Init>
}
 8000d40:	bf00      	nop
 8000d42:	3728      	adds	r7, #40	; 0x28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40012400 	.word	0x40012400
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40010c00 	.word	0x40010c00
 8000d54:	20000144 	.word	0x20000144
 8000d58:	40020008 	.word	0x40020008
 8000d5c:	40012800 	.word	0x40012800
 8000d60:	40010800 	.word	0x40010800

08000d64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a16      	ldr	r2, [pc, #88]	; (8000dcc <HAL_TIM_Base_MspInit+0x68>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d10c      	bne.n	8000d90 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <HAL_TIM_Base_MspInit+0x6c>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	4a15      	ldr	r2, [pc, #84]	; (8000dd0 <HAL_TIM_Base_MspInit+0x6c>)
 8000d7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d80:	6193      	str	r3, [r2, #24]
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <HAL_TIM_Base_MspInit+0x6c>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d8e:	e018      	b.n	8000dc2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d98:	d113      	bne.n	8000dc2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <HAL_TIM_Base_MspInit+0x6c>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <HAL_TIM_Base_MspInit+0x6c>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	61d3      	str	r3, [r2, #28]
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_TIM_Base_MspInit+0x6c>)
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	201c      	movs	r0, #28
 8000db8:	f000 fef3 	bl	8001ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dbc:	201c      	movs	r0, #28
 8000dbe:	f000 ff0c 	bl	8001bda <HAL_NVIC_EnableIRQ>
}
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40012c00 	.word	0x40012c00
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a10      	ldr	r2, [pc, #64]	; (8000e30 <HAL_TIM_MspPostInit+0x5c>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d118      	bne.n	8000e26 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <HAL_TIM_MspPostInit+0x60>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <HAL_TIM_MspPostInit+0x60>)
 8000dfa:	f043 0304 	orr.w	r3, r3, #4
 8000dfe:	6193      	str	r3, [r2, #24]
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <HAL_TIM_MspPostInit+0x60>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2302      	movs	r3, #2
 8000e18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0310 	add.w	r3, r7, #16
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <HAL_TIM_MspPostInit+0x64>)
 8000e22:	f001 f8e3 	bl	8001fec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e26:	bf00      	nop
 8000e28:	3720      	adds	r7, #32
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40012c00 	.word	0x40012c00
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40010800 	.word	0x40010800

08000e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a1c      	ldr	r2, [pc, #112]	; (8000ec8 <HAL_UART_MspInit+0x8c>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d131      	bne.n	8000ec0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <HAL_UART_MspInit+0x90>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	4a1a      	ldr	r2, [pc, #104]	; (8000ecc <HAL_UART_MspInit+0x90>)
 8000e62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e66:	6193      	str	r3, [r2, #24]
 8000e68:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_UART_MspInit+0x90>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e74:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_UART_MspInit+0x90>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a14      	ldr	r2, [pc, #80]	; (8000ecc <HAL_UART_MspInit+0x90>)
 8000e7a:	f043 0304 	orr.w	r3, r3, #4
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_UART_MspInit+0x90>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0310 	add.w	r3, r7, #16
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480b      	ldr	r0, [pc, #44]	; (8000ed0 <HAL_UART_MspInit+0x94>)
 8000ea2:	f001 f8a3 	bl	8001fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <HAL_UART_MspInit+0x94>)
 8000ebc:	f001 f896 	bl	8001fec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ec0:	bf00      	nop
 8000ec2:	3720      	adds	r7, #32
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40013800 	.word	0x40013800
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40010800 	.word	0x40010800

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <HardFault_Handler+0x4>

08000ee6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <MemManage_Handler+0x4>

08000eec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <BusFault_Handler+0x4>

08000ef2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <UsageFault_Handler+0x4>

08000ef8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr

08000f10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f20:	f000 f8b4 	bl	800108c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <DMA1_Channel1_IRQHandler+0x10>)
 8000f2e:	f000 ff29 	bl	8001d84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000144 	.word	0x20000144

08000f3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <TIM2_IRQHandler+0x10>)
 8000f42:	f002 f84d 	bl	8002fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200001d0 	.word	0x200001d0

08000f50 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <_sbrk+0x50>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <_sbrk+0x16>
		heap_end = &end;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <_sbrk+0x50>)
 8000f62:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <_sbrk+0x54>)
 8000f64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <_sbrk+0x50>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <_sbrk+0x50>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4413      	add	r3, r2
 8000f74:	466a      	mov	r2, sp
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d907      	bls.n	8000f8a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f7a:	f002 ff13 	bl	8003da4 <__errno>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	230c      	movs	r3, #12
 8000f82:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f88:	e006      	b.n	8000f98 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f8a:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <_sbrk+0x50>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a03      	ldr	r2, [pc, #12]	; (8000fa0 <_sbrk+0x50>)
 8000f94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000098 	.word	0x20000098
 8000fa4:	20000220 	.word	0x20000220

08000fa8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000fb4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000fb6:	e003      	b.n	8000fc0 <LoopCopyDataInit>

08000fb8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000fba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000fbc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000fbe:	3104      	adds	r1, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000fc0:	480a      	ldr	r0, [pc, #40]	; (8000fec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000fc4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000fc6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000fc8:	d3f6      	bcc.n	8000fb8 <CopyDataInit>
  ldr r2, =_sbss
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000fcc:	e002      	b.n	8000fd4 <LoopFillZerobss>

08000fce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000fd0:	f842 3b04 	str.w	r3, [r2], #4

08000fd4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000fd6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000fd8:	d3f9      	bcc.n	8000fce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fda:	f7ff ffe5 	bl	8000fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fde:	f002 fee7 	bl	8003db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fe2:	f7ff fa5f 	bl	80004a4 <main>
  bx lr
 8000fe6:	4770      	bx	lr
  ldr r3, =_sidata
 8000fe8:	080046c8 	.word	0x080046c8
  ldr r0, =_sdata
 8000fec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ff0:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000ff4:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000ff8:	20000220 	.word	0x20000220

08000ffc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC1_2_IRQHandler>
	...

08001000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <HAL_Init+0x28>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a07      	ldr	r2, [pc, #28]	; (8001028 <HAL_Init+0x28>)
 800100a:	f043 0310 	orr.w	r3, r3, #16
 800100e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f000 fdbb 	bl	8001b8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001016:	2000      	movs	r0, #0
 8001018:	f000 f808 	bl	800102c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800101c:	f7ff fddc 	bl	8000bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40022000 	.word	0x40022000

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_InitTick+0x54>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_InitTick+0x58>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001042:	fbb3 f3f1 	udiv	r3, r3, r1
 8001046:	fbb2 f3f3 	udiv	r3, r2, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fdd3 	bl	8001bf6 <HAL_SYSTICK_Config>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e00e      	b.n	8001078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b0f      	cmp	r3, #15
 800105e:	d80a      	bhi.n	8001076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001060:	2200      	movs	r2, #0
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001068:	f000 fd9b 	bl	8001ba2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800106c:	4a06      	ldr	r2, [pc, #24]	; (8001088 <HAL_InitTick+0x5c>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	e000      	b.n	8001078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000000 	.word	0x20000000
 8001084:	20000008 	.word	0x20000008
 8001088:	20000004 	.word	0x20000004

0800108c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_IncTick+0x1c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <HAL_IncTick+0x20>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a03      	ldr	r2, [pc, #12]	; (80010ac <HAL_IncTick+0x20>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	20000008 	.word	0x20000008
 80010ac:	20000218 	.word	0x20000218

080010b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return uwTick;
 80010b4:	4b02      	ldr	r3, [pc, #8]	; (80010c0 <HAL_GetTick+0x10>)
 80010b6:	681b      	ldr	r3, [r3, #0]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	20000218 	.word	0x20000218

080010c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff fff0 	bl	80010b0 <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010dc:	d005      	beq.n	80010ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <HAL_Delay+0x40>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ea:	bf00      	nop
 80010ec:	f7ff ffe0 	bl	80010b0 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d8f7      	bhi.n	80010ec <HAL_Delay+0x28>
  {
  }
}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000008 	.word	0x20000008

08001108 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001110:	2300      	movs	r3, #0
 8001112:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e0be      	b.n	80012a8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001134:	2b00      	cmp	r3, #0
 8001136:	d109      	bne.n	800114c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff fd78 	bl	8000c3c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 fbb1 	bl	80018b4 <ADC_ConversionStop_Disable>
 8001152:	4603      	mov	r3, r0
 8001154:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115a:	f003 0310 	and.w	r3, r3, #16
 800115e:	2b00      	cmp	r3, #0
 8001160:	f040 8099 	bne.w	8001296 <HAL_ADC_Init+0x18e>
 8001164:	7dfb      	ldrb	r3, [r7, #23]
 8001166:	2b00      	cmp	r3, #0
 8001168:	f040 8095 	bne.w	8001296 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001170:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001174:	f023 0302 	bic.w	r3, r3, #2
 8001178:	f043 0202 	orr.w	r2, r3, #2
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001188:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	7b1b      	ldrb	r3, [r3, #12]
 800118e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001190:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	4313      	orrs	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011a0:	d003      	beq.n	80011aa <HAL_ADC_Init+0xa2>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d102      	bne.n	80011b0 <HAL_ADC_Init+0xa8>
 80011aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ae:	e000      	b.n	80011b2 <HAL_ADC_Init+0xaa>
 80011b0:	2300      	movs	r3, #0
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	7d1b      	ldrb	r3, [r3, #20]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d119      	bne.n	80011f4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7b1b      	ldrb	r3, [r3, #12]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d109      	bne.n	80011dc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	035a      	lsls	r2, r3, #13
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	e00b      	b.n	80011f4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e0:	f043 0220 	orr.w	r2, r3, #32
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ec:	f043 0201 	orr.w	r2, r3, #1
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	430a      	orrs	r2, r1
 8001206:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <HAL_ADC_Init+0x1a8>)
 8001210:	4013      	ands	r3, r2
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	6812      	ldr	r2, [r2, #0]
 8001216:	68b9      	ldr	r1, [r7, #8]
 8001218:	430b      	orrs	r3, r1
 800121a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001224:	d003      	beq.n	800122e <HAL_ADC_Init+0x126>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d104      	bne.n	8001238 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	3b01      	subs	r3, #1
 8001234:	051b      	lsls	r3, r3, #20
 8001236:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	430a      	orrs	r2, r1
 800124a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <HAL_ADC_Init+0x1ac>)
 8001254:	4013      	ands	r3, r2
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	429a      	cmp	r2, r3
 800125a:	d10b      	bne.n	8001274 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001266:	f023 0303 	bic.w	r3, r3, #3
 800126a:	f043 0201 	orr.w	r2, r3, #1
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001272:	e018      	b.n	80012a6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001278:	f023 0312 	bic.w	r3, r3, #18
 800127c:	f043 0210 	orr.w	r2, r3, #16
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001288:	f043 0201 	orr.w	r2, r3, #1
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001294:	e007      	b.n	80012a6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129a:	f043 0210 	orr.w	r2, r3, #16
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	ffe1f7fd 	.word	0xffe1f7fd
 80012b4:	ff1f0efe 	.word	0xff1f0efe

080012b8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012c0:	2300      	movs	r3, #0
 80012c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d101      	bne.n	80012d2 <HAL_ADC_Start+0x1a>
 80012ce:	2302      	movs	r3, #2
 80012d0:	e098      	b.n	8001404 <HAL_ADC_Start+0x14c>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 fa98 	bl	8001810 <ADC_Enable>
 80012e0:	4603      	mov	r3, r0
 80012e2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f040 8087 	bne.w	80013fa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012f4:	f023 0301 	bic.w	r3, r3, #1
 80012f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a41      	ldr	r2, [pc, #260]	; (800140c <HAL_ADC_Start+0x154>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d105      	bne.n	8001316 <HAL_ADC_Start+0x5e>
 800130a:	4b41      	ldr	r3, [pc, #260]	; (8001410 <HAL_ADC_Start+0x158>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d115      	bne.n	8001342 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800132c:	2b00      	cmp	r3, #0
 800132e:	d026      	beq.n	800137e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001334:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001338:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001340:	e01d      	b.n	800137e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001346:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a2f      	ldr	r2, [pc, #188]	; (8001410 <HAL_ADC_Start+0x158>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d004      	beq.n	8001362 <HAL_ADC_Start+0xaa>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a2b      	ldr	r2, [pc, #172]	; (800140c <HAL_ADC_Start+0x154>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d10d      	bne.n	800137e <HAL_ADC_Start+0xc6>
 8001362:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <HAL_ADC_Start+0x158>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136a:	2b00      	cmp	r3, #0
 800136c:	d007      	beq.n	800137e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001372:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001376:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001382:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d006      	beq.n	8001398 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138e:	f023 0206 	bic.w	r2, r3, #6
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	62da      	str	r2, [r3, #44]	; 0x2c
 8001396:	e002      	b.n	800139e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f06f 0202 	mvn.w	r2, #2
 80013ae:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80013ba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80013be:	d113      	bne.n	80013e8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013c4:	4a11      	ldr	r2, [pc, #68]	; (800140c <HAL_ADC_Start+0x154>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d105      	bne.n	80013d6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <HAL_ADC_Start+0x158>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d108      	bne.n	80013e8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	e00c      	b.n	8001402 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	e003      	b.n	8001402 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001402:	7bfb      	ldrb	r3, [r7, #15]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40012800 	.word	0x40012800
 8001410:	40012400 	.word	0x40012400

08001414 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001420:	2300      	movs	r3, #0
 8001422:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a64      	ldr	r2, [pc, #400]	; (80015bc <HAL_ADC_Start_DMA+0x1a8>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d004      	beq.n	8001438 <HAL_ADC_Start_DMA+0x24>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a63      	ldr	r2, [pc, #396]	; (80015c0 <HAL_ADC_Start_DMA+0x1ac>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d106      	bne.n	8001446 <HAL_ADC_Start_DMA+0x32>
 8001438:	4b60      	ldr	r3, [pc, #384]	; (80015bc <HAL_ADC_Start_DMA+0x1a8>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001440:	2b00      	cmp	r3, #0
 8001442:	f040 80b3 	bne.w	80015ac <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800144c:	2b01      	cmp	r3, #1
 800144e:	d101      	bne.n	8001454 <HAL_ADC_Start_DMA+0x40>
 8001450:	2302      	movs	r3, #2
 8001452:	e0ae      	b.n	80015b2 <HAL_ADC_Start_DMA+0x19e>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f000 f9d7 	bl	8001810 <ADC_Enable>
 8001462:	4603      	mov	r3, r0
 8001464:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001466:	7dfb      	ldrb	r3, [r7, #23]
 8001468:	2b00      	cmp	r3, #0
 800146a:	f040 809a 	bne.w	80015a2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001472:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001476:	f023 0301 	bic.w	r3, r3, #1
 800147a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a4e      	ldr	r2, [pc, #312]	; (80015c0 <HAL_ADC_Start_DMA+0x1ac>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d105      	bne.n	8001498 <HAL_ADC_Start_DMA+0x84>
 800148c:	4b4b      	ldr	r3, [pc, #300]	; (80015bc <HAL_ADC_Start_DMA+0x1a8>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d115      	bne.n	80014c4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d026      	beq.n	8001500 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014c2:	e01d      	b.n	8001500 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a39      	ldr	r2, [pc, #228]	; (80015bc <HAL_ADC_Start_DMA+0x1a8>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d004      	beq.n	80014e4 <HAL_ADC_Start_DMA+0xd0>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a38      	ldr	r2, [pc, #224]	; (80015c0 <HAL_ADC_Start_DMA+0x1ac>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d10d      	bne.n	8001500 <HAL_ADC_Start_DMA+0xec>
 80014e4:	4b35      	ldr	r3, [pc, #212]	; (80015bc <HAL_ADC_Start_DMA+0x1a8>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d007      	beq.n	8001500 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d006      	beq.n	800151a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001510:	f023 0206 	bic.w	r2, r3, #6
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
 8001518:	e002      	b.n	8001520 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2200      	movs	r2, #0
 800151e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	4a25      	ldr	r2, [pc, #148]	; (80015c4 <HAL_ADC_Start_DMA+0x1b0>)
 800152e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	4a24      	ldr	r2, [pc, #144]	; (80015c8 <HAL_ADC_Start_DMA+0x1b4>)
 8001536:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	4a23      	ldr	r2, [pc, #140]	; (80015cc <HAL_ADC_Start_DMA+0x1b8>)
 800153e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f06f 0202 	mvn.w	r2, #2
 8001548:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001558:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6a18      	ldr	r0, [r3, #32]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	334c      	adds	r3, #76	; 0x4c
 8001564:	4619      	mov	r1, r3
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f000 fbab 	bl	8001cc4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001578:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800157c:	d108      	bne.n	8001590 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800158c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800158e:	e00f      	b.n	80015b0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800159e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80015a0:	e006      	b.n	80015b0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80015aa:	e001      	b.n	80015b0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40012400 	.word	0x40012400
 80015c0:	40012800 	.word	0x40012800
 80015c4:	08001929 	.word	0x08001929
 80015c8:	080019a5 	.word	0x080019a5
 80015cc:	080019c1 	.word	0x080019c1

080015d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
	...

08001620 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x20>
 800163c:	2302      	movs	r3, #2
 800163e:	e0dc      	b.n	80017fa <HAL_ADC_ConfigChannel+0x1da>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b06      	cmp	r3, #6
 800164e:	d81c      	bhi.n	800168a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	3b05      	subs	r3, #5
 8001662:	221f      	movs	r2, #31
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	4019      	ands	r1, r3
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	6818      	ldr	r0, [r3, #0]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	3b05      	subs	r3, #5
 800167c:	fa00 f203 	lsl.w	r2, r0, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	635a      	str	r2, [r3, #52]	; 0x34
 8001688:	e03c      	b.n	8001704 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b0c      	cmp	r3, #12
 8001690:	d81c      	bhi.n	80016cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	3b23      	subs	r3, #35	; 0x23
 80016a4:	221f      	movs	r2, #31
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	4019      	ands	r1, r3
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	6818      	ldr	r0, [r3, #0]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	3b23      	subs	r3, #35	; 0x23
 80016be:	fa00 f203 	lsl.w	r2, r0, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	631a      	str	r2, [r3, #48]	; 0x30
 80016ca:	e01b      	b.n	8001704 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	3b41      	subs	r3, #65	; 0x41
 80016de:	221f      	movs	r2, #31
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	4019      	ands	r1, r3
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	3b41      	subs	r3, #65	; 0x41
 80016f8:	fa00 f203 	lsl.w	r2, r0, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b09      	cmp	r3, #9
 800170a:	d91c      	bls.n	8001746 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68d9      	ldr	r1, [r3, #12]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	3b1e      	subs	r3, #30
 800171e:	2207      	movs	r2, #7
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	4019      	ands	r1, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	6898      	ldr	r0, [r3, #8]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4613      	mov	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	3b1e      	subs	r3, #30
 8001738:	fa00 f203 	lsl.w	r2, r0, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	e019      	b.n	800177a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6919      	ldr	r1, [r3, #16]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4613      	mov	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	2207      	movs	r2, #7
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	4019      	ands	r1, r3
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	6898      	ldr	r0, [r3, #8]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	fa00 f203 	lsl.w	r2, r0, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b10      	cmp	r3, #16
 8001780:	d003      	beq.n	800178a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001786:	2b11      	cmp	r3, #17
 8001788:	d132      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a1d      	ldr	r2, [pc, #116]	; (8001804 <HAL_ADC_ConfigChannel+0x1e4>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d125      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d126      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80017b0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b10      	cmp	r3, #16
 80017b8:	d11a      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <HAL_ADC_ConfigChannel+0x1e8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a13      	ldr	r2, [pc, #76]	; (800180c <HAL_ADC_ConfigChannel+0x1ec>)
 80017c0:	fba2 2303 	umull	r2, r3, r2, r3
 80017c4:	0c9a      	lsrs	r2, r3, #18
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017d0:	e002      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f9      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x1b2>
 80017de:	e007      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e4:	f043 0220 	orr.w	r2, r3, #32
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	40012400 	.word	0x40012400
 8001808:	20000000 	.word	0x20000000
 800180c:	431bde83 	.word	0x431bde83

08001810 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b01      	cmp	r3, #1
 800182c:	d039      	beq.n	80018a2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0201 	orr.w	r2, r2, #1
 800183c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800183e:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <ADC_Enable+0x9c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a1b      	ldr	r2, [pc, #108]	; (80018b0 <ADC_Enable+0xa0>)
 8001844:	fba2 2303 	umull	r2, r3, r2, r3
 8001848:	0c9b      	lsrs	r3, r3, #18
 800184a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800184c:	e002      	b.n	8001854 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	3b01      	subs	r3, #1
 8001852:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f9      	bne.n	800184e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800185a:	f7ff fc29 	bl	80010b0 <HAL_GetTick>
 800185e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001860:	e018      	b.n	8001894 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001862:	f7ff fc25 	bl	80010b0 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d911      	bls.n	8001894 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	f043 0210 	orr.w	r2, r3, #16
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001880:	f043 0201 	orr.w	r2, r3, #1
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e007      	b.n	80018a4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d1df      	bne.n	8001862 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000000 	.word	0x20000000
 80018b0:	431bde83 	.word	0x431bde83

080018b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d127      	bne.n	800191e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0201 	bic.w	r2, r2, #1
 80018dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018de:	f7ff fbe7 	bl	80010b0 <HAL_GetTick>
 80018e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018e4:	e014      	b.n	8001910 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018e6:	f7ff fbe3 	bl	80010b0 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d90d      	bls.n	8001910 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	f043 0210 	orr.w	r2, r3, #16
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	f043 0201 	orr.w	r2, r3, #1
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e007      	b.n	8001920 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b01      	cmp	r3, #1
 800191c:	d0e3      	beq.n	80018e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800193e:	2b00      	cmp	r3, #0
 8001940:	d127      	bne.n	8001992 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001946:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001958:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800195c:	d115      	bne.n	800198a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001962:	2b00      	cmp	r3, #0
 8001964:	d111      	bne.n	800198a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d105      	bne.n	800198a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001982:	f043 0201 	orr.w	r2, r3, #1
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f7ff fe2c 	bl	80015e8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001990:	e004      	b.n	800199c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	4798      	blx	r3
}
 800199c:	bf00      	nop
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f7ff fe21 	bl	80015fa <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019b8:	bf00      	nop
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	f043 0204 	orr.w	r2, r3, #4
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f7ff fe10 	bl	800160c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019ec:	bf00      	nop
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a10:	4013      	ands	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a26:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	60d3      	str	r3, [r2, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <__NVIC_GetPriorityGrouping+0x18>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	f003 0307 	and.w	r3, r3, #7
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	db0b      	blt.n	8001a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	f003 021f 	and.w	r2, r3, #31
 8001a70:	4906      	ldr	r1, [pc, #24]	; (8001a8c <__NVIC_EnableIRQ+0x34>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	2001      	movs	r0, #1
 8001a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	e000e100 	.word	0xe000e100

08001a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	db0a      	blt.n	8001aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	490c      	ldr	r1, [pc, #48]	; (8001adc <__NVIC_SetPriority+0x4c>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	0112      	lsls	r2, r2, #4
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab8:	e00a      	b.n	8001ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4908      	ldr	r1, [pc, #32]	; (8001ae0 <__NVIC_SetPriority+0x50>)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	3b04      	subs	r3, #4
 8001ac8:	0112      	lsls	r2, r2, #4
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	440b      	add	r3, r1
 8001ace:	761a      	strb	r2, [r3, #24]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000e100 	.word	0xe000e100
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f1c3 0307 	rsb	r3, r3, #7
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	bf28      	it	cs
 8001b02:	2304      	movcs	r3, #4
 8001b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d902      	bls.n	8001b14 <NVIC_EncodePriority+0x30>
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3b03      	subs	r3, #3
 8001b12:	e000      	b.n	8001b16 <NVIC_EncodePriority+0x32>
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43da      	mvns	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	401a      	ands	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	43d9      	mvns	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	4313      	orrs	r3, r2
         );
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3724      	adds	r7, #36	; 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b58:	d301      	bcc.n	8001b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e00f      	b.n	8001b7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <SysTick_Config+0x40>)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b66:	210f      	movs	r1, #15
 8001b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b6c:	f7ff ff90 	bl	8001a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <SysTick_Config+0x40>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b76:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <SysTick_Config+0x40>)
 8001b78:	2207      	movs	r2, #7
 8001b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	e000e010 	.word	0xe000e010

08001b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ff2d 	bl	80019f4 <__NVIC_SetPriorityGrouping>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b086      	sub	sp, #24
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	607a      	str	r2, [r7, #4]
 8001bae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb4:	f7ff ff42 	bl	8001a3c <__NVIC_GetPriorityGrouping>
 8001bb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	68b9      	ldr	r1, [r7, #8]
 8001bbe:	6978      	ldr	r0, [r7, #20]
 8001bc0:	f7ff ff90 	bl	8001ae4 <NVIC_EncodePriority>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff5f 	bl	8001a90 <__NVIC_SetPriority>
}
 8001bd2:	bf00      	nop
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff35 	bl	8001a58 <__NVIC_EnableIRQ>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ffa2 	bl	8001b48 <SysTick_Config>
 8001c04:	4603      	mov	r3, r0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e043      	b.n	8001cae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <HAL_DMA_Init+0xa8>)
 8001c2e:	4413      	add	r3, r2
 8001c30:	4a22      	ldr	r2, [pc, #136]	; (8001cbc <HAL_DMA_Init+0xac>)
 8001c32:	fba2 2303 	umull	r2, r3, r2, r3
 8001c36:	091b      	lsrs	r3, r3, #4
 8001c38:	009a      	lsls	r2, r3, #2
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a1f      	ldr	r2, [pc, #124]	; (8001cc0 <HAL_DMA_Init+0xb0>)
 8001c42:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c5a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	bffdfff8 	.word	0xbffdfff8
 8001cbc:	cccccccd 	.word	0xcccccccd
 8001cc0:	40020000 	.word	0x40020000

08001cc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
 8001cd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <HAL_DMA_Start_IT+0x20>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e04a      	b.n	8001d7a <HAL_DMA_Start_IT+0xb6>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d13a      	bne.n	8001d6c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0201 	bic.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	68b9      	ldr	r1, [r7, #8]
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 f938 	bl	8001f90 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d008      	beq.n	8001d3a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 020e 	orr.w	r2, r2, #14
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	e00f      	b.n	8001d5a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0204 	bic.w	r2, r2, #4
 8001d48:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 020a 	orr.w	r2, r2, #10
 8001d58:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0201 	orr.w	r2, r2, #1
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	e005      	b.n	8001d78 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d74:	2302      	movs	r3, #2
 8001d76:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	2204      	movs	r2, #4
 8001da2:	409a      	lsls	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d04f      	beq.n	8001e4c <HAL_DMA_IRQHandler+0xc8>
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d04a      	beq.n	8001e4c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0320 	and.w	r3, r3, #32
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d107      	bne.n	8001dd4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0204 	bic.w	r2, r2, #4
 8001dd2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a66      	ldr	r2, [pc, #408]	; (8001f74 <HAL_DMA_IRQHandler+0x1f0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d029      	beq.n	8001e32 <HAL_DMA_IRQHandler+0xae>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a65      	ldr	r2, [pc, #404]	; (8001f78 <HAL_DMA_IRQHandler+0x1f4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d022      	beq.n	8001e2e <HAL_DMA_IRQHandler+0xaa>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a63      	ldr	r2, [pc, #396]	; (8001f7c <HAL_DMA_IRQHandler+0x1f8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d01a      	beq.n	8001e28 <HAL_DMA_IRQHandler+0xa4>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a62      	ldr	r2, [pc, #392]	; (8001f80 <HAL_DMA_IRQHandler+0x1fc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d012      	beq.n	8001e22 <HAL_DMA_IRQHandler+0x9e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a60      	ldr	r2, [pc, #384]	; (8001f84 <HAL_DMA_IRQHandler+0x200>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00a      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x98>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a5f      	ldr	r2, [pc, #380]	; (8001f88 <HAL_DMA_IRQHandler+0x204>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d102      	bne.n	8001e16 <HAL_DMA_IRQHandler+0x92>
 8001e10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e14:	e00e      	b.n	8001e34 <HAL_DMA_IRQHandler+0xb0>
 8001e16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001e1a:	e00b      	b.n	8001e34 <HAL_DMA_IRQHandler+0xb0>
 8001e1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e20:	e008      	b.n	8001e34 <HAL_DMA_IRQHandler+0xb0>
 8001e22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e26:	e005      	b.n	8001e34 <HAL_DMA_IRQHandler+0xb0>
 8001e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e2c:	e002      	b.n	8001e34 <HAL_DMA_IRQHandler+0xb0>
 8001e2e:	2340      	movs	r3, #64	; 0x40
 8001e30:	e000      	b.n	8001e34 <HAL_DMA_IRQHandler+0xb0>
 8001e32:	2304      	movs	r3, #4
 8001e34:	4a55      	ldr	r2, [pc, #340]	; (8001f8c <HAL_DMA_IRQHandler+0x208>)
 8001e36:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 8094 	beq.w	8001f6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001e4a:	e08e      	b.n	8001f6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	2202      	movs	r2, #2
 8001e52:	409a      	lsls	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d056      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x186>
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d051      	beq.n	8001f0a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0320 	and.w	r3, r3, #32
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10b      	bne.n	8001e8c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 020a 	bic.w	r2, r2, #10
 8001e82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a38      	ldr	r2, [pc, #224]	; (8001f74 <HAL_DMA_IRQHandler+0x1f0>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d029      	beq.n	8001eea <HAL_DMA_IRQHandler+0x166>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a37      	ldr	r2, [pc, #220]	; (8001f78 <HAL_DMA_IRQHandler+0x1f4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d022      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x162>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a35      	ldr	r2, [pc, #212]	; (8001f7c <HAL_DMA_IRQHandler+0x1f8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d01a      	beq.n	8001ee0 <HAL_DMA_IRQHandler+0x15c>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a34      	ldr	r2, [pc, #208]	; (8001f80 <HAL_DMA_IRQHandler+0x1fc>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d012      	beq.n	8001eda <HAL_DMA_IRQHandler+0x156>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a32      	ldr	r2, [pc, #200]	; (8001f84 <HAL_DMA_IRQHandler+0x200>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d00a      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0x150>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a31      	ldr	r2, [pc, #196]	; (8001f88 <HAL_DMA_IRQHandler+0x204>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d102      	bne.n	8001ece <HAL_DMA_IRQHandler+0x14a>
 8001ec8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ecc:	e00e      	b.n	8001eec <HAL_DMA_IRQHandler+0x168>
 8001ece:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ed2:	e00b      	b.n	8001eec <HAL_DMA_IRQHandler+0x168>
 8001ed4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ed8:	e008      	b.n	8001eec <HAL_DMA_IRQHandler+0x168>
 8001eda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ede:	e005      	b.n	8001eec <HAL_DMA_IRQHandler+0x168>
 8001ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ee4:	e002      	b.n	8001eec <HAL_DMA_IRQHandler+0x168>
 8001ee6:	2320      	movs	r3, #32
 8001ee8:	e000      	b.n	8001eec <HAL_DMA_IRQHandler+0x168>
 8001eea:	2302      	movs	r3, #2
 8001eec:	4a27      	ldr	r2, [pc, #156]	; (8001f8c <HAL_DMA_IRQHandler+0x208>)
 8001eee:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d034      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f08:	e02f      	b.n	8001f6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	2208      	movs	r2, #8
 8001f10:	409a      	lsls	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d028      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x1e8>
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d023      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 020e 	bic.w	r2, r2, #14
 8001f32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d004      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	4798      	blx	r3
    }
  }
  return;
 8001f6a:	bf00      	nop
 8001f6c:	bf00      	nop
}
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40020008 	.word	0x40020008
 8001f78:	4002001c 	.word	0x4002001c
 8001f7c:	40020030 	.word	0x40020030
 8001f80:	40020044 	.word	0x40020044
 8001f84:	40020058 	.word	0x40020058
 8001f88:	4002006c 	.word	0x4002006c
 8001f8c:	40020000 	.word	0x40020000

08001f90 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
 8001f9c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b10      	cmp	r3, #16
 8001fbc:	d108      	bne.n	8001fd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fce:	e007      	b.n	8001fe0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	60da      	str	r2, [r3, #12]
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr
	...

08001fec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b08b      	sub	sp, #44	; 0x2c
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ffe:	e127      	b.n	8002250 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002000:	2201      	movs	r2, #1
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	69fa      	ldr	r2, [r7, #28]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	429a      	cmp	r2, r3
 800201a:	f040 8116 	bne.w	800224a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b12      	cmp	r3, #18
 8002024:	d034      	beq.n	8002090 <HAL_GPIO_Init+0xa4>
 8002026:	2b12      	cmp	r3, #18
 8002028:	d80d      	bhi.n	8002046 <HAL_GPIO_Init+0x5a>
 800202a:	2b02      	cmp	r3, #2
 800202c:	d02b      	beq.n	8002086 <HAL_GPIO_Init+0x9a>
 800202e:	2b02      	cmp	r3, #2
 8002030:	d804      	bhi.n	800203c <HAL_GPIO_Init+0x50>
 8002032:	2b00      	cmp	r3, #0
 8002034:	d031      	beq.n	800209a <HAL_GPIO_Init+0xae>
 8002036:	2b01      	cmp	r3, #1
 8002038:	d01c      	beq.n	8002074 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800203a:	e048      	b.n	80020ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800203c:	2b03      	cmp	r3, #3
 800203e:	d043      	beq.n	80020c8 <HAL_GPIO_Init+0xdc>
 8002040:	2b11      	cmp	r3, #17
 8002042:	d01b      	beq.n	800207c <HAL_GPIO_Init+0x90>
          break;
 8002044:	e043      	b.n	80020ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002046:	4a89      	ldr	r2, [pc, #548]	; (800226c <HAL_GPIO_Init+0x280>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d026      	beq.n	800209a <HAL_GPIO_Init+0xae>
 800204c:	4a87      	ldr	r2, [pc, #540]	; (800226c <HAL_GPIO_Init+0x280>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d806      	bhi.n	8002060 <HAL_GPIO_Init+0x74>
 8002052:	4a87      	ldr	r2, [pc, #540]	; (8002270 <HAL_GPIO_Init+0x284>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d020      	beq.n	800209a <HAL_GPIO_Init+0xae>
 8002058:	4a86      	ldr	r2, [pc, #536]	; (8002274 <HAL_GPIO_Init+0x288>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d01d      	beq.n	800209a <HAL_GPIO_Init+0xae>
          break;
 800205e:	e036      	b.n	80020ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002060:	4a85      	ldr	r2, [pc, #532]	; (8002278 <HAL_GPIO_Init+0x28c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d019      	beq.n	800209a <HAL_GPIO_Init+0xae>
 8002066:	4a85      	ldr	r2, [pc, #532]	; (800227c <HAL_GPIO_Init+0x290>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d016      	beq.n	800209a <HAL_GPIO_Init+0xae>
 800206c:	4a84      	ldr	r2, [pc, #528]	; (8002280 <HAL_GPIO_Init+0x294>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_GPIO_Init+0xae>
          break;
 8002072:	e02c      	b.n	80020ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	623b      	str	r3, [r7, #32]
          break;
 800207a:	e028      	b.n	80020ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	3304      	adds	r3, #4
 8002082:	623b      	str	r3, [r7, #32]
          break;
 8002084:	e023      	b.n	80020ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	3308      	adds	r3, #8
 800208c:	623b      	str	r3, [r7, #32]
          break;
 800208e:	e01e      	b.n	80020ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	330c      	adds	r3, #12
 8002096:	623b      	str	r3, [r7, #32]
          break;
 8002098:	e019      	b.n	80020ce <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d102      	bne.n	80020a8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020a2:	2304      	movs	r3, #4
 80020a4:	623b      	str	r3, [r7, #32]
          break;
 80020a6:	e012      	b.n	80020ce <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d105      	bne.n	80020bc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020b0:	2308      	movs	r3, #8
 80020b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69fa      	ldr	r2, [r7, #28]
 80020b8:	611a      	str	r2, [r3, #16]
          break;
 80020ba:	e008      	b.n	80020ce <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020bc:	2308      	movs	r3, #8
 80020be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69fa      	ldr	r2, [r7, #28]
 80020c4:	615a      	str	r2, [r3, #20]
          break;
 80020c6:	e002      	b.n	80020ce <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020c8:	2300      	movs	r3, #0
 80020ca:	623b      	str	r3, [r7, #32]
          break;
 80020cc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	2bff      	cmp	r3, #255	; 0xff
 80020d2:	d801      	bhi.n	80020d8 <HAL_GPIO_Init+0xec>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	e001      	b.n	80020dc <HAL_GPIO_Init+0xf0>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3304      	adds	r3, #4
 80020dc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	2bff      	cmp	r3, #255	; 0xff
 80020e2:	d802      	bhi.n	80020ea <HAL_GPIO_Init+0xfe>
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	e002      	b.n	80020f0 <HAL_GPIO_Init+0x104>
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	3b08      	subs	r3, #8
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	210f      	movs	r1, #15
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	fa01 f303 	lsl.w	r3, r1, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	401a      	ands	r2, r3
 8002102:	6a39      	ldr	r1, [r7, #32]
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	431a      	orrs	r2, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 8096 	beq.w	800224a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800211e:	4b59      	ldr	r3, [pc, #356]	; (8002284 <HAL_GPIO_Init+0x298>)
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	4a58      	ldr	r2, [pc, #352]	; (8002284 <HAL_GPIO_Init+0x298>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	6193      	str	r3, [r2, #24]
 800212a:	4b56      	ldr	r3, [pc, #344]	; (8002284 <HAL_GPIO_Init+0x298>)
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002136:	4a54      	ldr	r2, [pc, #336]	; (8002288 <HAL_GPIO_Init+0x29c>)
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	089b      	lsrs	r3, r3, #2
 800213c:	3302      	adds	r3, #2
 800213e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002142:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	220f      	movs	r2, #15
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4013      	ands	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a4b      	ldr	r2, [pc, #300]	; (800228c <HAL_GPIO_Init+0x2a0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d013      	beq.n	800218a <HAL_GPIO_Init+0x19e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a4a      	ldr	r2, [pc, #296]	; (8002290 <HAL_GPIO_Init+0x2a4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00d      	beq.n	8002186 <HAL_GPIO_Init+0x19a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a49      	ldr	r2, [pc, #292]	; (8002294 <HAL_GPIO_Init+0x2a8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d007      	beq.n	8002182 <HAL_GPIO_Init+0x196>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a48      	ldr	r2, [pc, #288]	; (8002298 <HAL_GPIO_Init+0x2ac>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d101      	bne.n	800217e <HAL_GPIO_Init+0x192>
 800217a:	2303      	movs	r3, #3
 800217c:	e006      	b.n	800218c <HAL_GPIO_Init+0x1a0>
 800217e:	2304      	movs	r3, #4
 8002180:	e004      	b.n	800218c <HAL_GPIO_Init+0x1a0>
 8002182:	2302      	movs	r3, #2
 8002184:	e002      	b.n	800218c <HAL_GPIO_Init+0x1a0>
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <HAL_GPIO_Init+0x1a0>
 800218a:	2300      	movs	r3, #0
 800218c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218e:	f002 0203 	and.w	r2, r2, #3
 8002192:	0092      	lsls	r2, r2, #2
 8002194:	4093      	lsls	r3, r2
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4313      	orrs	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800219c:	493a      	ldr	r1, [pc, #232]	; (8002288 <HAL_GPIO_Init+0x29c>)
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	089b      	lsrs	r3, r3, #2
 80021a2:	3302      	adds	r3, #2
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d006      	beq.n	80021c4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021b6:	4b39      	ldr	r3, [pc, #228]	; (800229c <HAL_GPIO_Init+0x2b0>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	4938      	ldr	r1, [pc, #224]	; (800229c <HAL_GPIO_Init+0x2b0>)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]
 80021c2:	e006      	b.n	80021d2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021c4:	4b35      	ldr	r3, [pc, #212]	; (800229c <HAL_GPIO_Init+0x2b0>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	43db      	mvns	r3, r3
 80021cc:	4933      	ldr	r1, [pc, #204]	; (800229c <HAL_GPIO_Init+0x2b0>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d006      	beq.n	80021ec <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021de:	4b2f      	ldr	r3, [pc, #188]	; (800229c <HAL_GPIO_Init+0x2b0>)
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	492e      	ldr	r1, [pc, #184]	; (800229c <HAL_GPIO_Init+0x2b0>)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	604b      	str	r3, [r1, #4]
 80021ea:	e006      	b.n	80021fa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021ec:	4b2b      	ldr	r3, [pc, #172]	; (800229c <HAL_GPIO_Init+0x2b0>)
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	4929      	ldr	r1, [pc, #164]	; (800229c <HAL_GPIO_Init+0x2b0>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d006      	beq.n	8002214 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002206:	4b25      	ldr	r3, [pc, #148]	; (800229c <HAL_GPIO_Init+0x2b0>)
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	4924      	ldr	r1, [pc, #144]	; (800229c <HAL_GPIO_Init+0x2b0>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	608b      	str	r3, [r1, #8]
 8002212:	e006      	b.n	8002222 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002214:	4b21      	ldr	r3, [pc, #132]	; (800229c <HAL_GPIO_Init+0x2b0>)
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	43db      	mvns	r3, r3
 800221c:	491f      	ldr	r1, [pc, #124]	; (800229c <HAL_GPIO_Init+0x2b0>)
 800221e:	4013      	ands	r3, r2
 8002220:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d006      	beq.n	800223c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800222e:	4b1b      	ldr	r3, [pc, #108]	; (800229c <HAL_GPIO_Init+0x2b0>)
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	491a      	ldr	r1, [pc, #104]	; (800229c <HAL_GPIO_Init+0x2b0>)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	60cb      	str	r3, [r1, #12]
 800223a:	e006      	b.n	800224a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800223c:	4b17      	ldr	r3, [pc, #92]	; (800229c <HAL_GPIO_Init+0x2b0>)
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	43db      	mvns	r3, r3
 8002244:	4915      	ldr	r1, [pc, #84]	; (800229c <HAL_GPIO_Init+0x2b0>)
 8002246:	4013      	ands	r3, r2
 8002248:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	3301      	adds	r3, #1
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	fa22 f303 	lsr.w	r3, r2, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	f47f aed0 	bne.w	8002000 <HAL_GPIO_Init+0x14>
  }
}
 8002260:	bf00      	nop
 8002262:	372c      	adds	r7, #44	; 0x2c
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	10210000 	.word	0x10210000
 8002270:	10110000 	.word	0x10110000
 8002274:	10120000 	.word	0x10120000
 8002278:	10310000 	.word	0x10310000
 800227c:	10320000 	.word	0x10320000
 8002280:	10220000 	.word	0x10220000
 8002284:	40021000 	.word	0x40021000
 8002288:	40010000 	.word	0x40010000
 800228c:	40010800 	.word	0x40010800
 8002290:	40010c00 	.word	0x40010c00
 8002294:	40011000 	.word	0x40011000
 8002298:	40011400 	.word	0x40011400
 800229c:	40010400 	.word	0x40010400

080022a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]
 80022ac:	4613      	mov	r3, r2
 80022ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022b0:	787b      	ldrb	r3, [r7, #1]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022b6:	887a      	ldrh	r2, [r7, #2]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022bc:	e003      	b.n	80022c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022be:	887b      	ldrh	r3, [r7, #2]
 80022c0:	041a      	lsls	r2, r3, #16
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	611a      	str	r2, [r3, #16]
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4013      	ands	r3, r2
 80022e8:	041a      	lsls	r2, r3, #16
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	43d9      	mvns	r1, r3
 80022ee:	887b      	ldrh	r3, [r7, #2]
 80022f0:	400b      	ands	r3, r1
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	611a      	str	r2, [r3, #16]
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr
	...

08002304 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e26c      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 8087 	beq.w	8002432 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002324:	4b92      	ldr	r3, [pc, #584]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 030c 	and.w	r3, r3, #12
 800232c:	2b04      	cmp	r3, #4
 800232e:	d00c      	beq.n	800234a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002330:	4b8f      	ldr	r3, [pc, #572]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b08      	cmp	r3, #8
 800233a:	d112      	bne.n	8002362 <HAL_RCC_OscConfig+0x5e>
 800233c:	4b8c      	ldr	r3, [pc, #560]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002348:	d10b      	bne.n	8002362 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234a:	4b89      	ldr	r3, [pc, #548]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d06c      	beq.n	8002430 <HAL_RCC_OscConfig+0x12c>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d168      	bne.n	8002430 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e246      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800236a:	d106      	bne.n	800237a <HAL_RCC_OscConfig+0x76>
 800236c:	4b80      	ldr	r3, [pc, #512]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a7f      	ldr	r2, [pc, #508]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	e02e      	b.n	80023d8 <HAL_RCC_OscConfig+0xd4>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10c      	bne.n	800239c <HAL_RCC_OscConfig+0x98>
 8002382:	4b7b      	ldr	r3, [pc, #492]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a7a      	ldr	r2, [pc, #488]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	4b78      	ldr	r3, [pc, #480]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a77      	ldr	r2, [pc, #476]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	e01d      	b.n	80023d8 <HAL_RCC_OscConfig+0xd4>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0xbc>
 80023a6:	4b72      	ldr	r3, [pc, #456]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a71      	ldr	r2, [pc, #452]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	4b6f      	ldr	r3, [pc, #444]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a6e      	ldr	r2, [pc, #440]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e00b      	b.n	80023d8 <HAL_RCC_OscConfig+0xd4>
 80023c0:	4b6b      	ldr	r3, [pc, #428]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a6a      	ldr	r2, [pc, #424]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	4b68      	ldr	r3, [pc, #416]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a67      	ldr	r2, [pc, #412]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d013      	beq.n	8002408 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7fe fe66 	bl	80010b0 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e8:	f7fe fe62 	bl	80010b0 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	; 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e1fa      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fa:	4b5d      	ldr	r3, [pc, #372]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0xe4>
 8002406:	e014      	b.n	8002432 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7fe fe52 	bl	80010b0 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002410:	f7fe fe4e 	bl	80010b0 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b64      	cmp	r3, #100	; 0x64
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e1e6      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002422:	4b53      	ldr	r3, [pc, #332]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x10c>
 800242e:	e000      	b.n	8002432 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d063      	beq.n	8002506 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800243e:	4b4c      	ldr	r3, [pc, #304]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00b      	beq.n	8002462 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800244a:	4b49      	ldr	r3, [pc, #292]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b08      	cmp	r3, #8
 8002454:	d11c      	bne.n	8002490 <HAL_RCC_OscConfig+0x18c>
 8002456:	4b46      	ldr	r3, [pc, #280]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d116      	bne.n	8002490 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002462:	4b43      	ldr	r3, [pc, #268]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d005      	beq.n	800247a <HAL_RCC_OscConfig+0x176>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d001      	beq.n	800247a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e1ba      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247a:	4b3d      	ldr	r3, [pc, #244]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4939      	ldr	r1, [pc, #228]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248e:	e03a      	b.n	8002506 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d020      	beq.n	80024da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002498:	4b36      	ldr	r3, [pc, #216]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 800249a:	2201      	movs	r2, #1
 800249c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249e:	f7fe fe07 	bl	80010b0 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a6:	f7fe fe03 	bl	80010b0 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e19b      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b8:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c4:	4b2a      	ldr	r3, [pc, #168]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4927      	ldr	r1, [pc, #156]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]
 80024d8:	e015      	b.n	8002506 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024da:	4b26      	ldr	r3, [pc, #152]	; (8002574 <HAL_RCC_OscConfig+0x270>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7fe fde6 	bl	80010b0 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e8:	f7fe fde2 	bl	80010b0 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e17a      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fa:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d03a      	beq.n	8002588 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d019      	beq.n	800254e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251a:	4b17      	ldr	r3, [pc, #92]	; (8002578 <HAL_RCC_OscConfig+0x274>)
 800251c:	2201      	movs	r2, #1
 800251e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002520:	f7fe fdc6 	bl	80010b0 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002528:	f7fe fdc2 	bl	80010b0 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e15a      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253a:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <HAL_RCC_OscConfig+0x26c>)
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002546:	2001      	movs	r0, #1
 8002548:	f000 fada 	bl	8002b00 <RCC_Delay>
 800254c:	e01c      	b.n	8002588 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <HAL_RCC_OscConfig+0x274>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002554:	f7fe fdac 	bl	80010b0 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255a:	e00f      	b.n	800257c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800255c:	f7fe fda8 	bl	80010b0 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d908      	bls.n	800257c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e140      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000
 8002574:	42420000 	.word	0x42420000
 8002578:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800257c:	4b9e      	ldr	r3, [pc, #632]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1e9      	bne.n	800255c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80a6 	beq.w	80026e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002596:	2300      	movs	r3, #0
 8002598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259a:	4b97      	ldr	r3, [pc, #604]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10d      	bne.n	80025c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a6:	4b94      	ldr	r3, [pc, #592]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	4a93      	ldr	r2, [pc, #588]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	61d3      	str	r3, [r2, #28]
 80025b2:	4b91      	ldr	r3, [pc, #580]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b8e      	ldr	r3, [pc, #568]	; (80027fc <HAL_RCC_OscConfig+0x4f8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d118      	bne.n	8002600 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b8b      	ldr	r3, [pc, #556]	; (80027fc <HAL_RCC_OscConfig+0x4f8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a8a      	ldr	r2, [pc, #552]	; (80027fc <HAL_RCC_OscConfig+0x4f8>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025da:	f7fe fd69 	bl	80010b0 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e2:	f7fe fd65 	bl	80010b0 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b64      	cmp	r3, #100	; 0x64
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e0fd      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f4:	4b81      	ldr	r3, [pc, #516]	; (80027fc <HAL_RCC_OscConfig+0x4f8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d106      	bne.n	8002616 <HAL_RCC_OscConfig+0x312>
 8002608:	4b7b      	ldr	r3, [pc, #492]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	4a7a      	ldr	r2, [pc, #488]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6213      	str	r3, [r2, #32]
 8002614:	e02d      	b.n	8002672 <HAL_RCC_OscConfig+0x36e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10c      	bne.n	8002638 <HAL_RCC_OscConfig+0x334>
 800261e:	4b76      	ldr	r3, [pc, #472]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	4a75      	ldr	r2, [pc, #468]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002624:	f023 0301 	bic.w	r3, r3, #1
 8002628:	6213      	str	r3, [r2, #32]
 800262a:	4b73      	ldr	r3, [pc, #460]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4a72      	ldr	r2, [pc, #456]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002630:	f023 0304 	bic.w	r3, r3, #4
 8002634:	6213      	str	r3, [r2, #32]
 8002636:	e01c      	b.n	8002672 <HAL_RCC_OscConfig+0x36e>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b05      	cmp	r3, #5
 800263e:	d10c      	bne.n	800265a <HAL_RCC_OscConfig+0x356>
 8002640:	4b6d      	ldr	r3, [pc, #436]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	4a6c      	ldr	r2, [pc, #432]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002646:	f043 0304 	orr.w	r3, r3, #4
 800264a:	6213      	str	r3, [r2, #32]
 800264c:	4b6a      	ldr	r3, [pc, #424]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4a69      	ldr	r2, [pc, #420]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6213      	str	r3, [r2, #32]
 8002658:	e00b      	b.n	8002672 <HAL_RCC_OscConfig+0x36e>
 800265a:	4b67      	ldr	r3, [pc, #412]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	4a66      	ldr	r2, [pc, #408]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002660:	f023 0301 	bic.w	r3, r3, #1
 8002664:	6213      	str	r3, [r2, #32]
 8002666:	4b64      	ldr	r3, [pc, #400]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	4a63      	ldr	r2, [pc, #396]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800266c:	f023 0304 	bic.w	r3, r3, #4
 8002670:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d015      	beq.n	80026a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267a:	f7fe fd19 	bl	80010b0 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7fe fd15 	bl	80010b0 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e0ab      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002698:	4b57      	ldr	r3, [pc, #348]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0ee      	beq.n	8002682 <HAL_RCC_OscConfig+0x37e>
 80026a4:	e014      	b.n	80026d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a6:	f7fe fd03 	bl	80010b0 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ac:	e00a      	b.n	80026c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ae:	f7fe fcff 	bl	80010b0 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026bc:	4293      	cmp	r3, r2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e095      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c4:	4b4c      	ldr	r3, [pc, #304]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1ee      	bne.n	80026ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026d0:	7dfb      	ldrb	r3, [r7, #23]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d105      	bne.n	80026e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d6:	4b48      	ldr	r3, [pc, #288]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	4a47      	ldr	r2, [pc, #284]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80026dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 8081 	beq.w	80027ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ec:	4b42      	ldr	r3, [pc, #264]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 030c 	and.w	r3, r3, #12
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d061      	beq.n	80027bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d146      	bne.n	800278e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002700:	4b3f      	ldr	r3, [pc, #252]	; (8002800 <HAL_RCC_OscConfig+0x4fc>)
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002706:	f7fe fcd3 	bl	80010b0 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270e:	f7fe fccf 	bl	80010b0 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e067      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002720:	4b35      	ldr	r3, [pc, #212]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f0      	bne.n	800270e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002734:	d108      	bne.n	8002748 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002736:	4b30      	ldr	r3, [pc, #192]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	492d      	ldr	r1, [pc, #180]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002748:	4b2b      	ldr	r3, [pc, #172]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a19      	ldr	r1, [r3, #32]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	430b      	orrs	r3, r1
 800275a:	4927      	ldr	r1, [pc, #156]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 800275c:	4313      	orrs	r3, r2
 800275e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002760:	4b27      	ldr	r3, [pc, #156]	; (8002800 <HAL_RCC_OscConfig+0x4fc>)
 8002762:	2201      	movs	r2, #1
 8002764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002766:	f7fe fca3 	bl	80010b0 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800276e:	f7fe fc9f 	bl	80010b0 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e037      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002780:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x46a>
 800278c:	e02f      	b.n	80027ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278e:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <HAL_RCC_OscConfig+0x4fc>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7fe fc8c 	bl	80010b0 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279c:	f7fe fc88 	bl	80010b0 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e020      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ae:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x498>
 80027ba:	e018      	b.n	80027ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e013      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_RCC_OscConfig+0x4f4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d106      	bne.n	80027ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d001      	beq.n	80027ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40007000 	.word	0x40007000
 8002800:	42420060 	.word	0x42420060

08002804 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e0d0      	b.n	80029ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002818:	4b6a      	ldr	r3, [pc, #424]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d910      	bls.n	8002848 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002826:	4b67      	ldr	r3, [pc, #412]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 0207 	bic.w	r2, r3, #7
 800282e:	4965      	ldr	r1, [pc, #404]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	4313      	orrs	r3, r2
 8002834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002836:	4b63      	ldr	r3, [pc, #396]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d001      	beq.n	8002848 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0b8      	b.n	80029ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d020      	beq.n	8002896 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002860:	4b59      	ldr	r3, [pc, #356]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4a58      	ldr	r2, [pc, #352]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800286a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002878:	4b53      	ldr	r3, [pc, #332]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4a52      	ldr	r2, [pc, #328]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002882:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002884:	4b50      	ldr	r3, [pc, #320]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	494d      	ldr	r1, [pc, #308]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	4313      	orrs	r3, r2
 8002894:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d040      	beq.n	8002924 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028aa:	4b47      	ldr	r3, [pc, #284]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d115      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e07f      	b.n	80029ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d107      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c2:	4b41      	ldr	r3, [pc, #260]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e073      	b.n	80029ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d2:	4b3d      	ldr	r3, [pc, #244]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e06b      	b.n	80029ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028e2:	4b39      	ldr	r3, [pc, #228]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f023 0203 	bic.w	r2, r3, #3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	4936      	ldr	r1, [pc, #216]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f4:	f7fe fbdc 	bl	80010b0 <HAL_GetTick>
 80028f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028fc:	f7fe fbd8 	bl	80010b0 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	; 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e053      	b.n	80029ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002912:	4b2d      	ldr	r3, [pc, #180]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 020c 	and.w	r2, r3, #12
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	429a      	cmp	r2, r3
 8002922:	d1eb      	bne.n	80028fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002924:	4b27      	ldr	r3, [pc, #156]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d210      	bcs.n	8002954 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002932:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 0207 	bic.w	r2, r3, #7
 800293a:	4922      	ldr	r1, [pc, #136]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	4313      	orrs	r3, r2
 8002940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002942:	4b20      	ldr	r3, [pc, #128]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d001      	beq.n	8002954 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e032      	b.n	80029ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002960:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4916      	ldr	r1, [pc, #88]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	4313      	orrs	r3, r2
 8002970:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d009      	beq.n	8002992 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800297e:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	490e      	ldr	r1, [pc, #56]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 800298e:	4313      	orrs	r3, r2
 8002990:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002992:	f000 f821 	bl	80029d8 <HAL_RCC_GetSysClockFreq>
 8002996:	4601      	mov	r1, r0
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <HAL_RCC_ClockConfig+0x1c8>)
 80029a4:	5cd3      	ldrb	r3, [r2, r3]
 80029a6:	fa21 f303 	lsr.w	r3, r1, r3
 80029aa:	4a09      	ldr	r2, [pc, #36]	; (80029d0 <HAL_RCC_ClockConfig+0x1cc>)
 80029ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ae:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <HAL_RCC_ClockConfig+0x1d0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe fb3a 	bl	800102c <HAL_InitTick>

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40022000 	.word	0x40022000
 80029c8:	40021000 	.word	0x40021000
 80029cc:	08004674 	.word	0x08004674
 80029d0:	20000000 	.word	0x20000000
 80029d4:	20000004 	.word	0x20000004

080029d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d8:	b490      	push	{r4, r7}
 80029da:	b08a      	sub	sp, #40	; 0x28
 80029dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029de:	4b2a      	ldr	r3, [pc, #168]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029e0:	1d3c      	adds	r4, r7, #4
 80029e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029e8:	4b28      	ldr	r3, [pc, #160]	; (8002a8c <HAL_RCC_GetSysClockFreq+0xb4>)
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
 80029f2:	2300      	movs	r3, #0
 80029f4:	61bb      	str	r3, [r7, #24]
 80029f6:	2300      	movs	r3, #0
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a02:	4b23      	ldr	r3, [pc, #140]	; (8002a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d002      	beq.n	8002a18 <HAL_RCC_GetSysClockFreq+0x40>
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d003      	beq.n	8002a1e <HAL_RCC_GetSysClockFreq+0x46>
 8002a16:	e02d      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a18:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a1a:	623b      	str	r3, [r7, #32]
      break;
 8002a1c:	e02d      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	0c9b      	lsrs	r3, r3, #18
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a30:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d013      	beq.n	8002a64 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a3c:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	0c5b      	lsrs	r3, r3, #17
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a50:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	4a0f      	ldr	r2, [pc, #60]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a56:	fb02 f203 	mul.w	r2, r2, r3
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
 8002a62:	e004      	b.n	8002a6e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	4a0c      	ldr	r2, [pc, #48]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a68:	fb02 f303 	mul.w	r3, r2, r3
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	623b      	str	r3, [r7, #32]
      break;
 8002a72:	e002      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a74:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a76:	623b      	str	r3, [r7, #32]
      break;
 8002a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3728      	adds	r7, #40	; 0x28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc90      	pop	{r4, r7}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	08004660 	.word	0x08004660
 8002a8c:	08004670 	.word	0x08004670
 8002a90:	40021000 	.word	0x40021000
 8002a94:	007a1200 	.word	0x007a1200
 8002a98:	003d0900 	.word	0x003d0900

08002a9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa0:	4b02      	ldr	r3, [pc, #8]	; (8002aac <HAL_RCC_GetHCLKFreq+0x10>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr
 8002aac:	20000000 	.word	0x20000000

08002ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ab4:	f7ff fff2 	bl	8002a9c <HAL_RCC_GetHCLKFreq>
 8002ab8:	4601      	mov	r1, r0
 8002aba:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	0a1b      	lsrs	r3, r3, #8
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	4a03      	ldr	r2, [pc, #12]	; (8002ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac6:	5cd3      	ldrb	r3, [r2, r3]
 8002ac8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	08004684 	.word	0x08004684

08002ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002adc:	f7ff ffde 	bl	8002a9c <HAL_RCC_GetHCLKFreq>
 8002ae0:	4601      	mov	r1, r0
 8002ae2:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	0adb      	lsrs	r3, r3, #11
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	4a03      	ldr	r2, [pc, #12]	; (8002afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aee:	5cd3      	ldrb	r3, [r2, r3]
 8002af0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40021000 	.word	0x40021000
 8002afc:	08004684 	.word	0x08004684

08002b00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b08:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <RCC_Delay+0x34>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0a      	ldr	r2, [pc, #40]	; (8002b38 <RCC_Delay+0x38>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	0a5b      	lsrs	r3, r3, #9
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	fb02 f303 	mul.w	r3, r2, r3
 8002b1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b1c:	bf00      	nop
  }
  while (Delay --);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1e5a      	subs	r2, r3, #1
 8002b22:	60fa      	str	r2, [r7, #12]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1f9      	bne.n	8002b1c <RCC_Delay+0x1c>
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	20000000 	.word	0x20000000
 8002b38:	10624dd3 	.word	0x10624dd3

08002b3c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d07d      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b5c:	4b4f      	ldr	r3, [pc, #316]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10d      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b68:	4b4c      	ldr	r3, [pc, #304]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	4a4b      	ldr	r2, [pc, #300]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b72:	61d3      	str	r3, [r2, #28]
 8002b74:	4b49      	ldr	r3, [pc, #292]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b80:	2301      	movs	r3, #1
 8002b82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b84:	4b46      	ldr	r3, [pc, #280]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d118      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b90:	4b43      	ldr	r3, [pc, #268]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a42      	ldr	r2, [pc, #264]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b9c:	f7fe fa88 	bl	80010b0 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba4:	f7fe fa84 	bl	80010b0 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b64      	cmp	r3, #100	; 0x64
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e06d      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb6:	4b3a      	ldr	r3, [pc, #232]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bc2:	4b36      	ldr	r3, [pc, #216]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d02e      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d027      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002be0:	4b2e      	ldr	r3, [pc, #184]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bea:	4b2e      	ldr	r3, [pc, #184]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bf0:	4b2c      	ldr	r3, [pc, #176]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bf6:	4a29      	ldr	r2, [pc, #164]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d014      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c06:	f7fe fa53 	bl	80010b0 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0e:	f7fe fa4f 	bl	80010b0 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e036      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c24:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0ee      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c30:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	4917      	ldr	r1, [pc, #92]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c42:	7dfb      	ldrb	r3, [r7, #23]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d105      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c48:	4b14      	ldr	r3, [pc, #80]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	4a13      	ldr	r2, [pc, #76]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c60:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	490b      	ldr	r1, [pc, #44]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0310 	and.w	r3, r3, #16
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d008      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c7e:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	4904      	ldr	r1, [pc, #16]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40007000 	.word	0x40007000
 8002ca4:	42420440 	.word	0x42420440

08002ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e041      	b.n	8002d3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d106      	bne.n	8002cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7fe f848 	bl	8000d64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	f000 fc1c 	bl	8003524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d001      	beq.n	8002d60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e03a      	b.n	8002dd6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a18      	ldr	r2, [pc, #96]	; (8002de0 <HAL_TIM_Base_Start_IT+0x98>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00e      	beq.n	8002da0 <HAL_TIM_Base_Start_IT+0x58>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8a:	d009      	beq.n	8002da0 <HAL_TIM_Base_Start_IT+0x58>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a14      	ldr	r2, [pc, #80]	; (8002de4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d004      	beq.n	8002da0 <HAL_TIM_Base_Start_IT+0x58>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a13      	ldr	r2, [pc, #76]	; (8002de8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d111      	bne.n	8002dc4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2b06      	cmp	r3, #6
 8002db0:	d010      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f042 0201 	orr.w	r2, r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc2:	e007      	b.n	8002dd4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr
 8002de0:	40012c00 	.word	0x40012c00
 8002de4:	40000400 	.word	0x40000400
 8002de8:	40000800 	.word	0x40000800

08002dec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e041      	b.n	8002e82 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f839 	bl	8002e8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3304      	adds	r3, #4
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	f000 fb7a 	bl	8003524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d109      	bne.n	8002ec0 <HAL_TIM_PWM_Start+0x24>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	bf14      	ite	ne
 8002eb8:	2301      	movne	r3, #1
 8002eba:	2300      	moveq	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	e022      	b.n	8002f06 <HAL_TIM_PWM_Start+0x6a>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d109      	bne.n	8002eda <HAL_TIM_PWM_Start+0x3e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	bf14      	ite	ne
 8002ed2:	2301      	movne	r3, #1
 8002ed4:	2300      	moveq	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	e015      	b.n	8002f06 <HAL_TIM_PWM_Start+0x6a>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d109      	bne.n	8002ef4 <HAL_TIM_PWM_Start+0x58>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	bf14      	ite	ne
 8002eec:	2301      	movne	r3, #1
 8002eee:	2300      	moveq	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	e008      	b.n	8002f06 <HAL_TIM_PWM_Start+0x6a>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	bf14      	ite	ne
 8002f00:	2301      	movne	r3, #1
 8002f02:	2300      	moveq	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e05e      	b.n	8002fcc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d104      	bne.n	8002f1e <HAL_TIM_PWM_Start+0x82>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f1c:	e013      	b.n	8002f46 <HAL_TIM_PWM_Start+0xaa>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d104      	bne.n	8002f2e <HAL_TIM_PWM_Start+0x92>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f2c:	e00b      	b.n	8002f46 <HAL_TIM_PWM_Start+0xaa>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d104      	bne.n	8002f3e <HAL_TIM_PWM_Start+0xa2>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f3c:	e003      	b.n	8002f46 <HAL_TIM_PWM_Start+0xaa>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2202      	movs	r2, #2
 8002f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	6839      	ldr	r1, [r7, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 fd68 	bl	8003a24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a1e      	ldr	r2, [pc, #120]	; (8002fd4 <HAL_TIM_PWM_Start+0x138>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d107      	bne.n	8002f6e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a18      	ldr	r2, [pc, #96]	; (8002fd4 <HAL_TIM_PWM_Start+0x138>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d00e      	beq.n	8002f96 <HAL_TIM_PWM_Start+0xfa>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f80:	d009      	beq.n	8002f96 <HAL_TIM_PWM_Start+0xfa>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a14      	ldr	r2, [pc, #80]	; (8002fd8 <HAL_TIM_PWM_Start+0x13c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d004      	beq.n	8002f96 <HAL_TIM_PWM_Start+0xfa>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a12      	ldr	r2, [pc, #72]	; (8002fdc <HAL_TIM_PWM_Start+0x140>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d111      	bne.n	8002fba <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2b06      	cmp	r3, #6
 8002fa6:	d010      	beq.n	8002fca <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb8:	e007      	b.n	8002fca <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f042 0201 	orr.w	r2, r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40012c00 	.word	0x40012c00
 8002fd8:	40000400 	.word	0x40000400
 8002fdc:	40000800 	.word	0x40000800

08002fe0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d122      	bne.n	800303c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b02      	cmp	r3, #2
 8003002:	d11b      	bne.n	800303c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0202 	mvn.w	r2, #2
 800300c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fa62 	bl	80034ec <HAL_TIM_IC_CaptureCallback>
 8003028:	e005      	b.n	8003036 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fa55 	bl	80034da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fa64 	bl	80034fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b04      	cmp	r3, #4
 8003048:	d122      	bne.n	8003090 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b04      	cmp	r3, #4
 8003056:	d11b      	bne.n	8003090 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0204 	mvn.w	r2, #4
 8003060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2202      	movs	r2, #2
 8003066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fa38 	bl	80034ec <HAL_TIM_IC_CaptureCallback>
 800307c:	e005      	b.n	800308a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fa2b 	bl	80034da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 fa3a 	bl	80034fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b08      	cmp	r3, #8
 800309c:	d122      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d11b      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0208 	mvn.w	r2, #8
 80030b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2204      	movs	r2, #4
 80030ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fa0e 	bl	80034ec <HAL_TIM_IC_CaptureCallback>
 80030d0:	e005      	b.n	80030de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fa01 	bl	80034da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fa10 	bl	80034fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0310 	and.w	r3, r3, #16
 80030ee:	2b10      	cmp	r3, #16
 80030f0:	d122      	bne.n	8003138 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b10      	cmp	r3, #16
 80030fe:	d11b      	bne.n	8003138 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0210 	mvn.w	r2, #16
 8003108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2208      	movs	r2, #8
 800310e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f9e4 	bl	80034ec <HAL_TIM_IC_CaptureCallback>
 8003124:	e005      	b.n	8003132 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f9d7 	bl	80034da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f9e6 	bl	80034fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b01      	cmp	r3, #1
 8003144:	d10e      	bne.n	8003164 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b01      	cmp	r3, #1
 8003152:	d107      	bne.n	8003164 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0201 	mvn.w	r2, #1
 800315c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fd fd20 	bl	8000ba4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316e:	2b80      	cmp	r3, #128	; 0x80
 8003170:	d10e      	bne.n	8003190 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317c:	2b80      	cmp	r3, #128	; 0x80
 800317e:	d107      	bne.n	8003190 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 fd26 	bl	8003bdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319a:	2b40      	cmp	r3, #64	; 0x40
 800319c:	d10e      	bne.n	80031bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a8:	2b40      	cmp	r3, #64	; 0x40
 80031aa:	d107      	bne.n	80031bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f9aa 	bl	8003510 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f003 0320 	and.w	r3, r3, #32
 80031c6:	2b20      	cmp	r3, #32
 80031c8:	d10e      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	d107      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f06f 0220 	mvn.w	r2, #32
 80031e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fcf1 	bl	8003bca <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031e8:	bf00      	nop
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003206:	2302      	movs	r3, #2
 8003208:	e0ac      	b.n	8003364 <HAL_TIM_PWM_ConfigChannel+0x174>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b0c      	cmp	r3, #12
 8003216:	f200 809f 	bhi.w	8003358 <HAL_TIM_PWM_ConfigChannel+0x168>
 800321a:	a201      	add	r2, pc, #4	; (adr r2, 8003220 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800321c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003220:	08003255 	.word	0x08003255
 8003224:	08003359 	.word	0x08003359
 8003228:	08003359 	.word	0x08003359
 800322c:	08003359 	.word	0x08003359
 8003230:	08003295 	.word	0x08003295
 8003234:	08003359 	.word	0x08003359
 8003238:	08003359 	.word	0x08003359
 800323c:	08003359 	.word	0x08003359
 8003240:	080032d7 	.word	0x080032d7
 8003244:	08003359 	.word	0x08003359
 8003248:	08003359 	.word	0x08003359
 800324c:	08003359 	.word	0x08003359
 8003250:	08003317 	.word	0x08003317
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f9c4 	bl	80035e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699a      	ldr	r2, [r3, #24]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0208 	orr.w	r2, r2, #8
 800326e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699a      	ldr	r2, [r3, #24]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0204 	bic.w	r2, r2, #4
 800327e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6999      	ldr	r1, [r3, #24]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	619a      	str	r2, [r3, #24]
      break;
 8003292:	e062      	b.n	800335a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68b9      	ldr	r1, [r7, #8]
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fa0a 	bl	80036b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699a      	ldr	r2, [r3, #24]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699a      	ldr	r2, [r3, #24]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6999      	ldr	r1, [r3, #24]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	021a      	lsls	r2, r3, #8
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	619a      	str	r2, [r3, #24]
      break;
 80032d4:	e041      	b.n	800335a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fa53 	bl	8003788 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	69da      	ldr	r2, [r3, #28]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0208 	orr.w	r2, r2, #8
 80032f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	69da      	ldr	r2, [r3, #28]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0204 	bic.w	r2, r2, #4
 8003300:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	69d9      	ldr	r1, [r3, #28]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	61da      	str	r2, [r3, #28]
      break;
 8003314:	e021      	b.n	800335a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68b9      	ldr	r1, [r7, #8]
 800331c:	4618      	mov	r0, r3
 800331e:	f000 fa9d 	bl	800385c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69da      	ldr	r2, [r3, #28]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003330:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69da      	ldr	r2, [r3, #28]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003340:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69d9      	ldr	r1, [r3, #28]
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	021a      	lsls	r2, r3, #8
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	61da      	str	r2, [r3, #28]
      break;
 8003356:	e000      	b.n	800335a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003358:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_TIM_ConfigClockSource+0x18>
 8003380:	2302      	movs	r3, #2
 8003382:	e0a6      	b.n	80034d2 <HAL_TIM_ConfigClockSource+0x166>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b40      	cmp	r3, #64	; 0x40
 80033ba:	d067      	beq.n	800348c <HAL_TIM_ConfigClockSource+0x120>
 80033bc:	2b40      	cmp	r3, #64	; 0x40
 80033be:	d80b      	bhi.n	80033d8 <HAL_TIM_ConfigClockSource+0x6c>
 80033c0:	2b10      	cmp	r3, #16
 80033c2:	d073      	beq.n	80034ac <HAL_TIM_ConfigClockSource+0x140>
 80033c4:	2b10      	cmp	r3, #16
 80033c6:	d802      	bhi.n	80033ce <HAL_TIM_ConfigClockSource+0x62>
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d06f      	beq.n	80034ac <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80033cc:	e078      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	d06c      	beq.n	80034ac <HAL_TIM_ConfigClockSource+0x140>
 80033d2:	2b30      	cmp	r3, #48	; 0x30
 80033d4:	d06a      	beq.n	80034ac <HAL_TIM_ConfigClockSource+0x140>
      break;
 80033d6:	e073      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033d8:	2b70      	cmp	r3, #112	; 0x70
 80033da:	d00d      	beq.n	80033f8 <HAL_TIM_ConfigClockSource+0x8c>
 80033dc:	2b70      	cmp	r3, #112	; 0x70
 80033de:	d804      	bhi.n	80033ea <HAL_TIM_ConfigClockSource+0x7e>
 80033e0:	2b50      	cmp	r3, #80	; 0x50
 80033e2:	d033      	beq.n	800344c <HAL_TIM_ConfigClockSource+0xe0>
 80033e4:	2b60      	cmp	r3, #96	; 0x60
 80033e6:	d041      	beq.n	800346c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80033e8:	e06a      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ee:	d066      	beq.n	80034be <HAL_TIM_ConfigClockSource+0x152>
 80033f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033f4:	d017      	beq.n	8003426 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80033f6:	e063      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6818      	ldr	r0, [r3, #0]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	6899      	ldr	r1, [r3, #8]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f000 faed 	bl	80039e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800341a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	609a      	str	r2, [r3, #8]
      break;
 8003424:	e04c      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	6899      	ldr	r1, [r3, #8]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f000 fad6 	bl	80039e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003448:	609a      	str	r2, [r3, #8]
      break;
 800344a:	e039      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	6859      	ldr	r1, [r3, #4]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	461a      	mov	r2, r3
 800345a:	f000 fa4d 	bl	80038f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2150      	movs	r1, #80	; 0x50
 8003464:	4618      	mov	r0, r3
 8003466:	f000 faa4 	bl	80039b2 <TIM_ITRx_SetConfig>
      break;
 800346a:	e029      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	6859      	ldr	r1, [r3, #4]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	461a      	mov	r2, r3
 800347a:	f000 fa6b 	bl	8003954 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2160      	movs	r1, #96	; 0x60
 8003484:	4618      	mov	r0, r3
 8003486:	f000 fa94 	bl	80039b2 <TIM_ITRx_SetConfig>
      break;
 800348a:	e019      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	6859      	ldr	r1, [r3, #4]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	461a      	mov	r2, r3
 800349a:	f000 fa2d 	bl	80038f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2140      	movs	r1, #64	; 0x40
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 fa84 	bl	80039b2 <TIM_ITRx_SetConfig>
      break;
 80034aa:	e009      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4619      	mov	r1, r3
 80034b6:	4610      	mov	r0, r2
 80034b8:	f000 fa7b 	bl	80039b2 <TIM_ITRx_SetConfig>
        break;
 80034bc:	e000      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80034be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr

080034ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr

080034fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr

08003510 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr
	...

08003524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a29      	ldr	r2, [pc, #164]	; (80035dc <TIM_Base_SetConfig+0xb8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00b      	beq.n	8003554 <TIM_Base_SetConfig+0x30>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003542:	d007      	beq.n	8003554 <TIM_Base_SetConfig+0x30>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a26      	ldr	r2, [pc, #152]	; (80035e0 <TIM_Base_SetConfig+0xbc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d003      	beq.n	8003554 <TIM_Base_SetConfig+0x30>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a25      	ldr	r2, [pc, #148]	; (80035e4 <TIM_Base_SetConfig+0xc0>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d108      	bne.n	8003566 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a1c      	ldr	r2, [pc, #112]	; (80035dc <TIM_Base_SetConfig+0xb8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00b      	beq.n	8003586 <TIM_Base_SetConfig+0x62>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003574:	d007      	beq.n	8003586 <TIM_Base_SetConfig+0x62>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a19      	ldr	r2, [pc, #100]	; (80035e0 <TIM_Base_SetConfig+0xbc>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d003      	beq.n	8003586 <TIM_Base_SetConfig+0x62>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a18      	ldr	r2, [pc, #96]	; (80035e4 <TIM_Base_SetConfig+0xc0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d108      	bne.n	8003598 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800358c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a07      	ldr	r2, [pc, #28]	; (80035dc <TIM_Base_SetConfig+0xb8>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d103      	bne.n	80035cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	615a      	str	r2, [r3, #20]
}
 80035d2:	bf00      	nop
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr
 80035dc:	40012c00 	.word	0x40012c00
 80035e0:	40000400 	.word	0x40000400
 80035e4:	40000800 	.word	0x40000800

080035e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	f023 0201 	bic.w	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f023 0303 	bic.w	r3, r3, #3
 800361e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	4313      	orrs	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f023 0302 	bic.w	r3, r3, #2
 8003630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a1c      	ldr	r2, [pc, #112]	; (80036b0 <TIM_OC1_SetConfig+0xc8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d10c      	bne.n	800365e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f023 0308 	bic.w	r3, r3, #8
 800364a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f023 0304 	bic.w	r3, r3, #4
 800365c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a13      	ldr	r2, [pc, #76]	; (80036b0 <TIM_OC1_SetConfig+0xc8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d111      	bne.n	800368a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800366c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	621a      	str	r2, [r3, #32]
}
 80036a4:	bf00      	nop
 80036a6:	371c      	adds	r7, #28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40012c00 	.word	0x40012c00

080036b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	f023 0210 	bic.w	r2, r3, #16
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	021b      	lsls	r3, r3, #8
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f023 0320 	bic.w	r3, r3, #32
 80036fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4313      	orrs	r3, r2
 800370a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a1d      	ldr	r2, [pc, #116]	; (8003784 <TIM_OC2_SetConfig+0xd0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d10d      	bne.n	8003730 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800371a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800372e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a14      	ldr	r2, [pc, #80]	; (8003784 <TIM_OC2_SetConfig+0xd0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d113      	bne.n	8003760 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800373e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003746:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4313      	orrs	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	621a      	str	r2, [r3, #32]
}
 800377a:	bf00      	nop
 800377c:	371c      	adds	r7, #28
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr
 8003784:	40012c00 	.word	0x40012c00

08003788 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0303 	bic.w	r3, r3, #3
 80037be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	021b      	lsls	r3, r3, #8
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	4313      	orrs	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a1d      	ldr	r2, [pc, #116]	; (8003858 <TIM_OC3_SetConfig+0xd0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d10d      	bne.n	8003802 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	021b      	lsls	r3, r3, #8
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a14      	ldr	r2, [pc, #80]	; (8003858 <TIM_OC3_SetConfig+0xd0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d113      	bne.n	8003832 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4313      	orrs	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	621a      	str	r2, [r3, #32]
}
 800384c:	bf00      	nop
 800384e:	371c      	adds	r7, #28
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40012c00 	.word	0x40012c00

0800385c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800388a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	021b      	lsls	r3, r3, #8
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	031b      	lsls	r3, r3, #12
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a0f      	ldr	r2, [pc, #60]	; (80038f4 <TIM_OC4_SetConfig+0x98>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d109      	bne.n	80038d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	019b      	lsls	r3, r3, #6
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	621a      	str	r2, [r3, #32]
}
 80038ea:	bf00      	nop
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr
 80038f4:	40012c00 	.word	0x40012c00

080038f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	f023 0201 	bic.w	r2, r3, #1
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003922:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f023 030a 	bic.w	r3, r3, #10
 8003934:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	4313      	orrs	r3, r2
 800393c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	621a      	str	r2, [r3, #32]
}
 800394a:	bf00      	nop
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr

08003954 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	f023 0210 	bic.w	r2, r3, #16
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800397e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	031b      	lsls	r3, r3, #12
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003990:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	621a      	str	r2, [r3, #32]
}
 80039a8:	bf00      	nop
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr

080039b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b085      	sub	sp, #20
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f043 0307 	orr.w	r3, r3, #7
 80039d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	609a      	str	r2, [r3, #8]
}
 80039dc:	bf00      	nop
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr

080039e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b087      	sub	sp, #28
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	60f8      	str	r0, [r7, #12]
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a00:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	021a      	lsls	r2, r3, #8
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	609a      	str	r2, [r3, #8]
}
 8003a1a:	bf00      	nop
 8003a1c:	371c      	adds	r7, #28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr

08003a24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f003 031f 	and.w	r3, r3, #31
 8003a36:	2201      	movs	r2, #1
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a1a      	ldr	r2, [r3, #32]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	43db      	mvns	r3, r3
 8003a46:	401a      	ands	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a1a      	ldr	r2, [r3, #32]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	621a      	str	r2, [r3, #32]
}
 8003a62:	bf00      	nop
 8003a64:	371c      	adds	r7, #28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr

08003a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e046      	b.n	8003b12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a16      	ldr	r2, [pc, #88]	; (8003b1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00e      	beq.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad0:	d009      	beq.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a12      	ldr	r2, [pc, #72]	; (8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d004      	beq.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a10      	ldr	r2, [pc, #64]	; (8003b24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d10c      	bne.n	8003b00 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bc80      	pop	{r7}
 8003b1a:	4770      	bx	lr
 8003b1c:	40012c00 	.word	0x40012c00
 8003b20:	40000400 	.word	0x40000400
 8003b24:	40000800 	.word	0x40000800

08003b28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e03d      	b.n	8003bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr

08003bca <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr

08003bdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr

08003bee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e03f      	b.n	8003c80 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d106      	bne.n	8003c1a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7fd f911 	bl	8000e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2224      	movs	r2, #36	; 0x24
 8003c1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c30:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f828 	bl	8003c88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691a      	ldr	r2, [r3, #16]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c46:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695a      	ldr	r2, [r3, #20]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c56:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c66:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003cc2:	f023 030c 	bic.w	r3, r3, #12
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6812      	ldr	r2, [r2, #0]
 8003cca:	68b9      	ldr	r1, [r7, #8]
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699a      	ldr	r2, [r3, #24]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a2c      	ldr	r2, [pc, #176]	; (8003d9c <UART_SetConfig+0x114>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d103      	bne.n	8003cf8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003cf0:	f7fe fef2 	bl	8002ad8 <HAL_RCC_GetPCLK2Freq>
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	e002      	b.n	8003cfe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003cf8:	f7fe feda 	bl	8002ab0 <HAL_RCC_GetPCLK1Freq>
 8003cfc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4613      	mov	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	009a      	lsls	r2, r3, #2
 8003d08:	441a      	add	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d14:	4a22      	ldr	r2, [pc, #136]	; (8003da0 <UART_SetConfig+0x118>)
 8003d16:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	0119      	lsls	r1, r3, #4
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	009a      	lsls	r2, r3, #2
 8003d28:	441a      	add	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d34:	4b1a      	ldr	r3, [pc, #104]	; (8003da0 <UART_SetConfig+0x118>)
 8003d36:	fba3 0302 	umull	r0, r3, r3, r2
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	2064      	movs	r0, #100	; 0x64
 8003d3e:	fb00 f303 	mul.w	r3, r0, r3
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	3332      	adds	r3, #50	; 0x32
 8003d48:	4a15      	ldr	r2, [pc, #84]	; (8003da0 <UART_SetConfig+0x118>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d54:	4419      	add	r1, r3
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009a      	lsls	r2, r3, #2
 8003d60:	441a      	add	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d6c:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <UART_SetConfig+0x118>)
 8003d6e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	2064      	movs	r0, #100	; 0x64
 8003d76:	fb00 f303 	mul.w	r3, r0, r3
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	3332      	adds	r3, #50	; 0x32
 8003d80:	4a07      	ldr	r2, [pc, #28]	; (8003da0 <UART_SetConfig+0x118>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	f003 020f 	and.w	r2, r3, #15
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	440a      	add	r2, r1
 8003d92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d94:	bf00      	nop
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40013800 	.word	0x40013800
 8003da0:	51eb851f 	.word	0x51eb851f

08003da4 <__errno>:
 8003da4:	4b01      	ldr	r3, [pc, #4]	; (8003dac <__errno+0x8>)
 8003da6:	6818      	ldr	r0, [r3, #0]
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	2000000c 	.word	0x2000000c

08003db0 <__libc_init_array>:
 8003db0:	b570      	push	{r4, r5, r6, lr}
 8003db2:	2500      	movs	r5, #0
 8003db4:	4e0c      	ldr	r6, [pc, #48]	; (8003de8 <__libc_init_array+0x38>)
 8003db6:	4c0d      	ldr	r4, [pc, #52]	; (8003dec <__libc_init_array+0x3c>)
 8003db8:	1ba4      	subs	r4, r4, r6
 8003dba:	10a4      	asrs	r4, r4, #2
 8003dbc:	42a5      	cmp	r5, r4
 8003dbe:	d109      	bne.n	8003dd4 <__libc_init_array+0x24>
 8003dc0:	f000 fc34 	bl	800462c <_init>
 8003dc4:	2500      	movs	r5, #0
 8003dc6:	4e0a      	ldr	r6, [pc, #40]	; (8003df0 <__libc_init_array+0x40>)
 8003dc8:	4c0a      	ldr	r4, [pc, #40]	; (8003df4 <__libc_init_array+0x44>)
 8003dca:	1ba4      	subs	r4, r4, r6
 8003dcc:	10a4      	asrs	r4, r4, #2
 8003dce:	42a5      	cmp	r5, r4
 8003dd0:	d105      	bne.n	8003dde <__libc_init_array+0x2e>
 8003dd2:	bd70      	pop	{r4, r5, r6, pc}
 8003dd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003dd8:	4798      	blx	r3
 8003dda:	3501      	adds	r5, #1
 8003ddc:	e7ee      	b.n	8003dbc <__libc_init_array+0xc>
 8003dde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003de2:	4798      	blx	r3
 8003de4:	3501      	adds	r5, #1
 8003de6:	e7f2      	b.n	8003dce <__libc_init_array+0x1e>
 8003de8:	080046c0 	.word	0x080046c0
 8003dec:	080046c0 	.word	0x080046c0
 8003df0:	080046c0 	.word	0x080046c0
 8003df4:	080046c4 	.word	0x080046c4

08003df8 <memset>:
 8003df8:	4603      	mov	r3, r0
 8003dfa:	4402      	add	r2, r0
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d100      	bne.n	8003e02 <memset+0xa>
 8003e00:	4770      	bx	lr
 8003e02:	f803 1b01 	strb.w	r1, [r3], #1
 8003e06:	e7f9      	b.n	8003dfc <memset+0x4>

08003e08 <siprintf>:
 8003e08:	b40e      	push	{r1, r2, r3}
 8003e0a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e0e:	b500      	push	{lr}
 8003e10:	b09c      	sub	sp, #112	; 0x70
 8003e12:	ab1d      	add	r3, sp, #116	; 0x74
 8003e14:	9002      	str	r0, [sp, #8]
 8003e16:	9006      	str	r0, [sp, #24]
 8003e18:	9107      	str	r1, [sp, #28]
 8003e1a:	9104      	str	r1, [sp, #16]
 8003e1c:	4808      	ldr	r0, [pc, #32]	; (8003e40 <siprintf+0x38>)
 8003e1e:	4909      	ldr	r1, [pc, #36]	; (8003e44 <siprintf+0x3c>)
 8003e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e24:	9105      	str	r1, [sp, #20]
 8003e26:	6800      	ldr	r0, [r0, #0]
 8003e28:	a902      	add	r1, sp, #8
 8003e2a:	9301      	str	r3, [sp, #4]
 8003e2c:	f000 f866 	bl	8003efc <_svfiprintf_r>
 8003e30:	2200      	movs	r2, #0
 8003e32:	9b02      	ldr	r3, [sp, #8]
 8003e34:	701a      	strb	r2, [r3, #0]
 8003e36:	b01c      	add	sp, #112	; 0x70
 8003e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e3c:	b003      	add	sp, #12
 8003e3e:	4770      	bx	lr
 8003e40:	2000000c 	.word	0x2000000c
 8003e44:	ffff0208 	.word	0xffff0208

08003e48 <__ssputs_r>:
 8003e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e4c:	688e      	ldr	r6, [r1, #8]
 8003e4e:	4682      	mov	sl, r0
 8003e50:	429e      	cmp	r6, r3
 8003e52:	460c      	mov	r4, r1
 8003e54:	4690      	mov	r8, r2
 8003e56:	4699      	mov	r9, r3
 8003e58:	d837      	bhi.n	8003eca <__ssputs_r+0x82>
 8003e5a:	898a      	ldrh	r2, [r1, #12]
 8003e5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e60:	d031      	beq.n	8003ec6 <__ssputs_r+0x7e>
 8003e62:	2302      	movs	r3, #2
 8003e64:	6825      	ldr	r5, [r4, #0]
 8003e66:	6909      	ldr	r1, [r1, #16]
 8003e68:	1a6f      	subs	r7, r5, r1
 8003e6a:	6965      	ldr	r5, [r4, #20]
 8003e6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e70:	fb95 f5f3 	sdiv	r5, r5, r3
 8003e74:	f109 0301 	add.w	r3, r9, #1
 8003e78:	443b      	add	r3, r7
 8003e7a:	429d      	cmp	r5, r3
 8003e7c:	bf38      	it	cc
 8003e7e:	461d      	movcc	r5, r3
 8003e80:	0553      	lsls	r3, r2, #21
 8003e82:	d530      	bpl.n	8003ee6 <__ssputs_r+0x9e>
 8003e84:	4629      	mov	r1, r5
 8003e86:	f000 fb37 	bl	80044f8 <_malloc_r>
 8003e8a:	4606      	mov	r6, r0
 8003e8c:	b950      	cbnz	r0, 8003ea4 <__ssputs_r+0x5c>
 8003e8e:	230c      	movs	r3, #12
 8003e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e94:	f8ca 3000 	str.w	r3, [sl]
 8003e98:	89a3      	ldrh	r3, [r4, #12]
 8003e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e9e:	81a3      	strh	r3, [r4, #12]
 8003ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea4:	463a      	mov	r2, r7
 8003ea6:	6921      	ldr	r1, [r4, #16]
 8003ea8:	f000 fab6 	bl	8004418 <memcpy>
 8003eac:	89a3      	ldrh	r3, [r4, #12]
 8003eae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eb6:	81a3      	strh	r3, [r4, #12]
 8003eb8:	6126      	str	r6, [r4, #16]
 8003eba:	443e      	add	r6, r7
 8003ebc:	6026      	str	r6, [r4, #0]
 8003ebe:	464e      	mov	r6, r9
 8003ec0:	6165      	str	r5, [r4, #20]
 8003ec2:	1bed      	subs	r5, r5, r7
 8003ec4:	60a5      	str	r5, [r4, #8]
 8003ec6:	454e      	cmp	r6, r9
 8003ec8:	d900      	bls.n	8003ecc <__ssputs_r+0x84>
 8003eca:	464e      	mov	r6, r9
 8003ecc:	4632      	mov	r2, r6
 8003ece:	4641      	mov	r1, r8
 8003ed0:	6820      	ldr	r0, [r4, #0]
 8003ed2:	f000 faac 	bl	800442e <memmove>
 8003ed6:	68a3      	ldr	r3, [r4, #8]
 8003ed8:	2000      	movs	r0, #0
 8003eda:	1b9b      	subs	r3, r3, r6
 8003edc:	60a3      	str	r3, [r4, #8]
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	441e      	add	r6, r3
 8003ee2:	6026      	str	r6, [r4, #0]
 8003ee4:	e7dc      	b.n	8003ea0 <__ssputs_r+0x58>
 8003ee6:	462a      	mov	r2, r5
 8003ee8:	f000 fb60 	bl	80045ac <_realloc_r>
 8003eec:	4606      	mov	r6, r0
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	d1e2      	bne.n	8003eb8 <__ssputs_r+0x70>
 8003ef2:	6921      	ldr	r1, [r4, #16]
 8003ef4:	4650      	mov	r0, sl
 8003ef6:	f000 fab3 	bl	8004460 <_free_r>
 8003efa:	e7c8      	b.n	8003e8e <__ssputs_r+0x46>

08003efc <_svfiprintf_r>:
 8003efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f00:	461d      	mov	r5, r3
 8003f02:	898b      	ldrh	r3, [r1, #12]
 8003f04:	b09d      	sub	sp, #116	; 0x74
 8003f06:	061f      	lsls	r7, r3, #24
 8003f08:	4680      	mov	r8, r0
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	4616      	mov	r6, r2
 8003f0e:	d50f      	bpl.n	8003f30 <_svfiprintf_r+0x34>
 8003f10:	690b      	ldr	r3, [r1, #16]
 8003f12:	b96b      	cbnz	r3, 8003f30 <_svfiprintf_r+0x34>
 8003f14:	2140      	movs	r1, #64	; 0x40
 8003f16:	f000 faef 	bl	80044f8 <_malloc_r>
 8003f1a:	6020      	str	r0, [r4, #0]
 8003f1c:	6120      	str	r0, [r4, #16]
 8003f1e:	b928      	cbnz	r0, 8003f2c <_svfiprintf_r+0x30>
 8003f20:	230c      	movs	r3, #12
 8003f22:	f8c8 3000 	str.w	r3, [r8]
 8003f26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f2a:	e0c8      	b.n	80040be <_svfiprintf_r+0x1c2>
 8003f2c:	2340      	movs	r3, #64	; 0x40
 8003f2e:	6163      	str	r3, [r4, #20]
 8003f30:	2300      	movs	r3, #0
 8003f32:	9309      	str	r3, [sp, #36]	; 0x24
 8003f34:	2320      	movs	r3, #32
 8003f36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f3a:	2330      	movs	r3, #48	; 0x30
 8003f3c:	f04f 0b01 	mov.w	fp, #1
 8003f40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f44:	9503      	str	r5, [sp, #12]
 8003f46:	4637      	mov	r7, r6
 8003f48:	463d      	mov	r5, r7
 8003f4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003f4e:	b10b      	cbz	r3, 8003f54 <_svfiprintf_r+0x58>
 8003f50:	2b25      	cmp	r3, #37	; 0x25
 8003f52:	d13e      	bne.n	8003fd2 <_svfiprintf_r+0xd6>
 8003f54:	ebb7 0a06 	subs.w	sl, r7, r6
 8003f58:	d00b      	beq.n	8003f72 <_svfiprintf_r+0x76>
 8003f5a:	4653      	mov	r3, sl
 8003f5c:	4632      	mov	r2, r6
 8003f5e:	4621      	mov	r1, r4
 8003f60:	4640      	mov	r0, r8
 8003f62:	f7ff ff71 	bl	8003e48 <__ssputs_r>
 8003f66:	3001      	adds	r0, #1
 8003f68:	f000 80a4 	beq.w	80040b4 <_svfiprintf_r+0x1b8>
 8003f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f6e:	4453      	add	r3, sl
 8003f70:	9309      	str	r3, [sp, #36]	; 0x24
 8003f72:	783b      	ldrb	r3, [r7, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 809d 	beq.w	80040b4 <_svfiprintf_r+0x1b8>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f84:	9304      	str	r3, [sp, #16]
 8003f86:	9307      	str	r3, [sp, #28]
 8003f88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f8c:	931a      	str	r3, [sp, #104]	; 0x68
 8003f8e:	462f      	mov	r7, r5
 8003f90:	2205      	movs	r2, #5
 8003f92:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003f96:	4850      	ldr	r0, [pc, #320]	; (80040d8 <_svfiprintf_r+0x1dc>)
 8003f98:	f000 fa30 	bl	80043fc <memchr>
 8003f9c:	9b04      	ldr	r3, [sp, #16]
 8003f9e:	b9d0      	cbnz	r0, 8003fd6 <_svfiprintf_r+0xda>
 8003fa0:	06d9      	lsls	r1, r3, #27
 8003fa2:	bf44      	itt	mi
 8003fa4:	2220      	movmi	r2, #32
 8003fa6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003faa:	071a      	lsls	r2, r3, #28
 8003fac:	bf44      	itt	mi
 8003fae:	222b      	movmi	r2, #43	; 0x2b
 8003fb0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003fb4:	782a      	ldrb	r2, [r5, #0]
 8003fb6:	2a2a      	cmp	r2, #42	; 0x2a
 8003fb8:	d015      	beq.n	8003fe6 <_svfiprintf_r+0xea>
 8003fba:	462f      	mov	r7, r5
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	250a      	movs	r5, #10
 8003fc0:	9a07      	ldr	r2, [sp, #28]
 8003fc2:	4639      	mov	r1, r7
 8003fc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fc8:	3b30      	subs	r3, #48	; 0x30
 8003fca:	2b09      	cmp	r3, #9
 8003fcc:	d94d      	bls.n	800406a <_svfiprintf_r+0x16e>
 8003fce:	b1b8      	cbz	r0, 8004000 <_svfiprintf_r+0x104>
 8003fd0:	e00f      	b.n	8003ff2 <_svfiprintf_r+0xf6>
 8003fd2:	462f      	mov	r7, r5
 8003fd4:	e7b8      	b.n	8003f48 <_svfiprintf_r+0x4c>
 8003fd6:	4a40      	ldr	r2, [pc, #256]	; (80040d8 <_svfiprintf_r+0x1dc>)
 8003fd8:	463d      	mov	r5, r7
 8003fda:	1a80      	subs	r0, r0, r2
 8003fdc:	fa0b f000 	lsl.w	r0, fp, r0
 8003fe0:	4318      	orrs	r0, r3
 8003fe2:	9004      	str	r0, [sp, #16]
 8003fe4:	e7d3      	b.n	8003f8e <_svfiprintf_r+0x92>
 8003fe6:	9a03      	ldr	r2, [sp, #12]
 8003fe8:	1d11      	adds	r1, r2, #4
 8003fea:	6812      	ldr	r2, [r2, #0]
 8003fec:	9103      	str	r1, [sp, #12]
 8003fee:	2a00      	cmp	r2, #0
 8003ff0:	db01      	blt.n	8003ff6 <_svfiprintf_r+0xfa>
 8003ff2:	9207      	str	r2, [sp, #28]
 8003ff4:	e004      	b.n	8004000 <_svfiprintf_r+0x104>
 8003ff6:	4252      	negs	r2, r2
 8003ff8:	f043 0302 	orr.w	r3, r3, #2
 8003ffc:	9207      	str	r2, [sp, #28]
 8003ffe:	9304      	str	r3, [sp, #16]
 8004000:	783b      	ldrb	r3, [r7, #0]
 8004002:	2b2e      	cmp	r3, #46	; 0x2e
 8004004:	d10c      	bne.n	8004020 <_svfiprintf_r+0x124>
 8004006:	787b      	ldrb	r3, [r7, #1]
 8004008:	2b2a      	cmp	r3, #42	; 0x2a
 800400a:	d133      	bne.n	8004074 <_svfiprintf_r+0x178>
 800400c:	9b03      	ldr	r3, [sp, #12]
 800400e:	3702      	adds	r7, #2
 8004010:	1d1a      	adds	r2, r3, #4
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	9203      	str	r2, [sp, #12]
 8004016:	2b00      	cmp	r3, #0
 8004018:	bfb8      	it	lt
 800401a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800401e:	9305      	str	r3, [sp, #20]
 8004020:	4d2e      	ldr	r5, [pc, #184]	; (80040dc <_svfiprintf_r+0x1e0>)
 8004022:	2203      	movs	r2, #3
 8004024:	7839      	ldrb	r1, [r7, #0]
 8004026:	4628      	mov	r0, r5
 8004028:	f000 f9e8 	bl	80043fc <memchr>
 800402c:	b138      	cbz	r0, 800403e <_svfiprintf_r+0x142>
 800402e:	2340      	movs	r3, #64	; 0x40
 8004030:	1b40      	subs	r0, r0, r5
 8004032:	fa03 f000 	lsl.w	r0, r3, r0
 8004036:	9b04      	ldr	r3, [sp, #16]
 8004038:	3701      	adds	r7, #1
 800403a:	4303      	orrs	r3, r0
 800403c:	9304      	str	r3, [sp, #16]
 800403e:	7839      	ldrb	r1, [r7, #0]
 8004040:	2206      	movs	r2, #6
 8004042:	4827      	ldr	r0, [pc, #156]	; (80040e0 <_svfiprintf_r+0x1e4>)
 8004044:	1c7e      	adds	r6, r7, #1
 8004046:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800404a:	f000 f9d7 	bl	80043fc <memchr>
 800404e:	2800      	cmp	r0, #0
 8004050:	d038      	beq.n	80040c4 <_svfiprintf_r+0x1c8>
 8004052:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <_svfiprintf_r+0x1e8>)
 8004054:	bb13      	cbnz	r3, 800409c <_svfiprintf_r+0x1a0>
 8004056:	9b03      	ldr	r3, [sp, #12]
 8004058:	3307      	adds	r3, #7
 800405a:	f023 0307 	bic.w	r3, r3, #7
 800405e:	3308      	adds	r3, #8
 8004060:	9303      	str	r3, [sp, #12]
 8004062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004064:	444b      	add	r3, r9
 8004066:	9309      	str	r3, [sp, #36]	; 0x24
 8004068:	e76d      	b.n	8003f46 <_svfiprintf_r+0x4a>
 800406a:	fb05 3202 	mla	r2, r5, r2, r3
 800406e:	2001      	movs	r0, #1
 8004070:	460f      	mov	r7, r1
 8004072:	e7a6      	b.n	8003fc2 <_svfiprintf_r+0xc6>
 8004074:	2300      	movs	r3, #0
 8004076:	250a      	movs	r5, #10
 8004078:	4619      	mov	r1, r3
 800407a:	3701      	adds	r7, #1
 800407c:	9305      	str	r3, [sp, #20]
 800407e:	4638      	mov	r0, r7
 8004080:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004084:	3a30      	subs	r2, #48	; 0x30
 8004086:	2a09      	cmp	r2, #9
 8004088:	d903      	bls.n	8004092 <_svfiprintf_r+0x196>
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0c8      	beq.n	8004020 <_svfiprintf_r+0x124>
 800408e:	9105      	str	r1, [sp, #20]
 8004090:	e7c6      	b.n	8004020 <_svfiprintf_r+0x124>
 8004092:	fb05 2101 	mla	r1, r5, r1, r2
 8004096:	2301      	movs	r3, #1
 8004098:	4607      	mov	r7, r0
 800409a:	e7f0      	b.n	800407e <_svfiprintf_r+0x182>
 800409c:	ab03      	add	r3, sp, #12
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	4622      	mov	r2, r4
 80040a2:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <_svfiprintf_r+0x1ec>)
 80040a4:	a904      	add	r1, sp, #16
 80040a6:	4640      	mov	r0, r8
 80040a8:	f3af 8000 	nop.w
 80040ac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80040b0:	4681      	mov	r9, r0
 80040b2:	d1d6      	bne.n	8004062 <_svfiprintf_r+0x166>
 80040b4:	89a3      	ldrh	r3, [r4, #12]
 80040b6:	065b      	lsls	r3, r3, #25
 80040b8:	f53f af35 	bmi.w	8003f26 <_svfiprintf_r+0x2a>
 80040bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040be:	b01d      	add	sp, #116	; 0x74
 80040c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040c4:	ab03      	add	r3, sp, #12
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	4622      	mov	r2, r4
 80040ca:	4b07      	ldr	r3, [pc, #28]	; (80040e8 <_svfiprintf_r+0x1ec>)
 80040cc:	a904      	add	r1, sp, #16
 80040ce:	4640      	mov	r0, r8
 80040d0:	f000 f882 	bl	80041d8 <_printf_i>
 80040d4:	e7ea      	b.n	80040ac <_svfiprintf_r+0x1b0>
 80040d6:	bf00      	nop
 80040d8:	0800468c 	.word	0x0800468c
 80040dc:	08004692 	.word	0x08004692
 80040e0:	08004696 	.word	0x08004696
 80040e4:	00000000 	.word	0x00000000
 80040e8:	08003e49 	.word	0x08003e49

080040ec <_printf_common>:
 80040ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040f0:	4691      	mov	r9, r2
 80040f2:	461f      	mov	r7, r3
 80040f4:	688a      	ldr	r2, [r1, #8]
 80040f6:	690b      	ldr	r3, [r1, #16]
 80040f8:	4606      	mov	r6, r0
 80040fa:	4293      	cmp	r3, r2
 80040fc:	bfb8      	it	lt
 80040fe:	4613      	movlt	r3, r2
 8004100:	f8c9 3000 	str.w	r3, [r9]
 8004104:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004108:	460c      	mov	r4, r1
 800410a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800410e:	b112      	cbz	r2, 8004116 <_printf_common+0x2a>
 8004110:	3301      	adds	r3, #1
 8004112:	f8c9 3000 	str.w	r3, [r9]
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	0699      	lsls	r1, r3, #26
 800411a:	bf42      	ittt	mi
 800411c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004120:	3302      	addmi	r3, #2
 8004122:	f8c9 3000 	strmi.w	r3, [r9]
 8004126:	6825      	ldr	r5, [r4, #0]
 8004128:	f015 0506 	ands.w	r5, r5, #6
 800412c:	d107      	bne.n	800413e <_printf_common+0x52>
 800412e:	f104 0a19 	add.w	sl, r4, #25
 8004132:	68e3      	ldr	r3, [r4, #12]
 8004134:	f8d9 2000 	ldr.w	r2, [r9]
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	42ab      	cmp	r3, r5
 800413c:	dc29      	bgt.n	8004192 <_printf_common+0xa6>
 800413e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004142:	6822      	ldr	r2, [r4, #0]
 8004144:	3300      	adds	r3, #0
 8004146:	bf18      	it	ne
 8004148:	2301      	movne	r3, #1
 800414a:	0692      	lsls	r2, r2, #26
 800414c:	d42e      	bmi.n	80041ac <_printf_common+0xc0>
 800414e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004152:	4639      	mov	r1, r7
 8004154:	4630      	mov	r0, r6
 8004156:	47c0      	blx	r8
 8004158:	3001      	adds	r0, #1
 800415a:	d021      	beq.n	80041a0 <_printf_common+0xb4>
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	68e5      	ldr	r5, [r4, #12]
 8004160:	f003 0306 	and.w	r3, r3, #6
 8004164:	2b04      	cmp	r3, #4
 8004166:	bf18      	it	ne
 8004168:	2500      	movne	r5, #0
 800416a:	f8d9 2000 	ldr.w	r2, [r9]
 800416e:	f04f 0900 	mov.w	r9, #0
 8004172:	bf08      	it	eq
 8004174:	1aad      	subeq	r5, r5, r2
 8004176:	68a3      	ldr	r3, [r4, #8]
 8004178:	6922      	ldr	r2, [r4, #16]
 800417a:	bf08      	it	eq
 800417c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004180:	4293      	cmp	r3, r2
 8004182:	bfc4      	itt	gt
 8004184:	1a9b      	subgt	r3, r3, r2
 8004186:	18ed      	addgt	r5, r5, r3
 8004188:	341a      	adds	r4, #26
 800418a:	454d      	cmp	r5, r9
 800418c:	d11a      	bne.n	80041c4 <_printf_common+0xd8>
 800418e:	2000      	movs	r0, #0
 8004190:	e008      	b.n	80041a4 <_printf_common+0xb8>
 8004192:	2301      	movs	r3, #1
 8004194:	4652      	mov	r2, sl
 8004196:	4639      	mov	r1, r7
 8004198:	4630      	mov	r0, r6
 800419a:	47c0      	blx	r8
 800419c:	3001      	adds	r0, #1
 800419e:	d103      	bne.n	80041a8 <_printf_common+0xbc>
 80041a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a8:	3501      	adds	r5, #1
 80041aa:	e7c2      	b.n	8004132 <_printf_common+0x46>
 80041ac:	2030      	movs	r0, #48	; 0x30
 80041ae:	18e1      	adds	r1, r4, r3
 80041b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041ba:	4422      	add	r2, r4
 80041bc:	3302      	adds	r3, #2
 80041be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041c2:	e7c4      	b.n	800414e <_printf_common+0x62>
 80041c4:	2301      	movs	r3, #1
 80041c6:	4622      	mov	r2, r4
 80041c8:	4639      	mov	r1, r7
 80041ca:	4630      	mov	r0, r6
 80041cc:	47c0      	blx	r8
 80041ce:	3001      	adds	r0, #1
 80041d0:	d0e6      	beq.n	80041a0 <_printf_common+0xb4>
 80041d2:	f109 0901 	add.w	r9, r9, #1
 80041d6:	e7d8      	b.n	800418a <_printf_common+0x9e>

080041d8 <_printf_i>:
 80041d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80041e0:	460c      	mov	r4, r1
 80041e2:	7e09      	ldrb	r1, [r1, #24]
 80041e4:	b085      	sub	sp, #20
 80041e6:	296e      	cmp	r1, #110	; 0x6e
 80041e8:	4617      	mov	r7, r2
 80041ea:	4606      	mov	r6, r0
 80041ec:	4698      	mov	r8, r3
 80041ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80041f0:	f000 80b3 	beq.w	800435a <_printf_i+0x182>
 80041f4:	d822      	bhi.n	800423c <_printf_i+0x64>
 80041f6:	2963      	cmp	r1, #99	; 0x63
 80041f8:	d036      	beq.n	8004268 <_printf_i+0x90>
 80041fa:	d80a      	bhi.n	8004212 <_printf_i+0x3a>
 80041fc:	2900      	cmp	r1, #0
 80041fe:	f000 80b9 	beq.w	8004374 <_printf_i+0x19c>
 8004202:	2958      	cmp	r1, #88	; 0x58
 8004204:	f000 8083 	beq.w	800430e <_printf_i+0x136>
 8004208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800420c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004210:	e032      	b.n	8004278 <_printf_i+0xa0>
 8004212:	2964      	cmp	r1, #100	; 0x64
 8004214:	d001      	beq.n	800421a <_printf_i+0x42>
 8004216:	2969      	cmp	r1, #105	; 0x69
 8004218:	d1f6      	bne.n	8004208 <_printf_i+0x30>
 800421a:	6820      	ldr	r0, [r4, #0]
 800421c:	6813      	ldr	r3, [r2, #0]
 800421e:	0605      	lsls	r5, r0, #24
 8004220:	f103 0104 	add.w	r1, r3, #4
 8004224:	d52a      	bpl.n	800427c <_printf_i+0xa4>
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6011      	str	r1, [r2, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	da03      	bge.n	8004236 <_printf_i+0x5e>
 800422e:	222d      	movs	r2, #45	; 0x2d
 8004230:	425b      	negs	r3, r3
 8004232:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004236:	486f      	ldr	r0, [pc, #444]	; (80043f4 <_printf_i+0x21c>)
 8004238:	220a      	movs	r2, #10
 800423a:	e039      	b.n	80042b0 <_printf_i+0xd8>
 800423c:	2973      	cmp	r1, #115	; 0x73
 800423e:	f000 809d 	beq.w	800437c <_printf_i+0x1a4>
 8004242:	d808      	bhi.n	8004256 <_printf_i+0x7e>
 8004244:	296f      	cmp	r1, #111	; 0x6f
 8004246:	d020      	beq.n	800428a <_printf_i+0xb2>
 8004248:	2970      	cmp	r1, #112	; 0x70
 800424a:	d1dd      	bne.n	8004208 <_printf_i+0x30>
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	f043 0320 	orr.w	r3, r3, #32
 8004252:	6023      	str	r3, [r4, #0]
 8004254:	e003      	b.n	800425e <_printf_i+0x86>
 8004256:	2975      	cmp	r1, #117	; 0x75
 8004258:	d017      	beq.n	800428a <_printf_i+0xb2>
 800425a:	2978      	cmp	r1, #120	; 0x78
 800425c:	d1d4      	bne.n	8004208 <_printf_i+0x30>
 800425e:	2378      	movs	r3, #120	; 0x78
 8004260:	4865      	ldr	r0, [pc, #404]	; (80043f8 <_printf_i+0x220>)
 8004262:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004266:	e055      	b.n	8004314 <_printf_i+0x13c>
 8004268:	6813      	ldr	r3, [r2, #0]
 800426a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800426e:	1d19      	adds	r1, r3, #4
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6011      	str	r1, [r2, #0]
 8004274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004278:	2301      	movs	r3, #1
 800427a:	e08c      	b.n	8004396 <_printf_i+0x1be>
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004282:	6011      	str	r1, [r2, #0]
 8004284:	bf18      	it	ne
 8004286:	b21b      	sxthne	r3, r3
 8004288:	e7cf      	b.n	800422a <_printf_i+0x52>
 800428a:	6813      	ldr	r3, [r2, #0]
 800428c:	6825      	ldr	r5, [r4, #0]
 800428e:	1d18      	adds	r0, r3, #4
 8004290:	6010      	str	r0, [r2, #0]
 8004292:	0628      	lsls	r0, r5, #24
 8004294:	d501      	bpl.n	800429a <_printf_i+0xc2>
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	e002      	b.n	80042a0 <_printf_i+0xc8>
 800429a:	0668      	lsls	r0, r5, #25
 800429c:	d5fb      	bpl.n	8004296 <_printf_i+0xbe>
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	296f      	cmp	r1, #111	; 0x6f
 80042a2:	bf14      	ite	ne
 80042a4:	220a      	movne	r2, #10
 80042a6:	2208      	moveq	r2, #8
 80042a8:	4852      	ldr	r0, [pc, #328]	; (80043f4 <_printf_i+0x21c>)
 80042aa:	2100      	movs	r1, #0
 80042ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042b0:	6865      	ldr	r5, [r4, #4]
 80042b2:	2d00      	cmp	r5, #0
 80042b4:	60a5      	str	r5, [r4, #8]
 80042b6:	f2c0 8095 	blt.w	80043e4 <_printf_i+0x20c>
 80042ba:	6821      	ldr	r1, [r4, #0]
 80042bc:	f021 0104 	bic.w	r1, r1, #4
 80042c0:	6021      	str	r1, [r4, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d13d      	bne.n	8004342 <_printf_i+0x16a>
 80042c6:	2d00      	cmp	r5, #0
 80042c8:	f040 808e 	bne.w	80043e8 <_printf_i+0x210>
 80042cc:	4665      	mov	r5, ip
 80042ce:	2a08      	cmp	r2, #8
 80042d0:	d10b      	bne.n	80042ea <_printf_i+0x112>
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	07db      	lsls	r3, r3, #31
 80042d6:	d508      	bpl.n	80042ea <_printf_i+0x112>
 80042d8:	6923      	ldr	r3, [r4, #16]
 80042da:	6862      	ldr	r2, [r4, #4]
 80042dc:	429a      	cmp	r2, r3
 80042de:	bfde      	ittt	le
 80042e0:	2330      	movle	r3, #48	; 0x30
 80042e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042e6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80042ea:	ebac 0305 	sub.w	r3, ip, r5
 80042ee:	6123      	str	r3, [r4, #16]
 80042f0:	f8cd 8000 	str.w	r8, [sp]
 80042f4:	463b      	mov	r3, r7
 80042f6:	aa03      	add	r2, sp, #12
 80042f8:	4621      	mov	r1, r4
 80042fa:	4630      	mov	r0, r6
 80042fc:	f7ff fef6 	bl	80040ec <_printf_common>
 8004300:	3001      	adds	r0, #1
 8004302:	d14d      	bne.n	80043a0 <_printf_i+0x1c8>
 8004304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004308:	b005      	add	sp, #20
 800430a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800430e:	4839      	ldr	r0, [pc, #228]	; (80043f4 <_printf_i+0x21c>)
 8004310:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004314:	6813      	ldr	r3, [r2, #0]
 8004316:	6821      	ldr	r1, [r4, #0]
 8004318:	1d1d      	adds	r5, r3, #4
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6015      	str	r5, [r2, #0]
 800431e:	060a      	lsls	r2, r1, #24
 8004320:	d50b      	bpl.n	800433a <_printf_i+0x162>
 8004322:	07ca      	lsls	r2, r1, #31
 8004324:	bf44      	itt	mi
 8004326:	f041 0120 	orrmi.w	r1, r1, #32
 800432a:	6021      	strmi	r1, [r4, #0]
 800432c:	b91b      	cbnz	r3, 8004336 <_printf_i+0x15e>
 800432e:	6822      	ldr	r2, [r4, #0]
 8004330:	f022 0220 	bic.w	r2, r2, #32
 8004334:	6022      	str	r2, [r4, #0]
 8004336:	2210      	movs	r2, #16
 8004338:	e7b7      	b.n	80042aa <_printf_i+0xd2>
 800433a:	064d      	lsls	r5, r1, #25
 800433c:	bf48      	it	mi
 800433e:	b29b      	uxthmi	r3, r3
 8004340:	e7ef      	b.n	8004322 <_printf_i+0x14a>
 8004342:	4665      	mov	r5, ip
 8004344:	fbb3 f1f2 	udiv	r1, r3, r2
 8004348:	fb02 3311 	mls	r3, r2, r1, r3
 800434c:	5cc3      	ldrb	r3, [r0, r3]
 800434e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004352:	460b      	mov	r3, r1
 8004354:	2900      	cmp	r1, #0
 8004356:	d1f5      	bne.n	8004344 <_printf_i+0x16c>
 8004358:	e7b9      	b.n	80042ce <_printf_i+0xf6>
 800435a:	6813      	ldr	r3, [r2, #0]
 800435c:	6825      	ldr	r5, [r4, #0]
 800435e:	1d18      	adds	r0, r3, #4
 8004360:	6961      	ldr	r1, [r4, #20]
 8004362:	6010      	str	r0, [r2, #0]
 8004364:	0628      	lsls	r0, r5, #24
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	d501      	bpl.n	800436e <_printf_i+0x196>
 800436a:	6019      	str	r1, [r3, #0]
 800436c:	e002      	b.n	8004374 <_printf_i+0x19c>
 800436e:	066a      	lsls	r2, r5, #25
 8004370:	d5fb      	bpl.n	800436a <_printf_i+0x192>
 8004372:	8019      	strh	r1, [r3, #0]
 8004374:	2300      	movs	r3, #0
 8004376:	4665      	mov	r5, ip
 8004378:	6123      	str	r3, [r4, #16]
 800437a:	e7b9      	b.n	80042f0 <_printf_i+0x118>
 800437c:	6813      	ldr	r3, [r2, #0]
 800437e:	1d19      	adds	r1, r3, #4
 8004380:	6011      	str	r1, [r2, #0]
 8004382:	681d      	ldr	r5, [r3, #0]
 8004384:	6862      	ldr	r2, [r4, #4]
 8004386:	2100      	movs	r1, #0
 8004388:	4628      	mov	r0, r5
 800438a:	f000 f837 	bl	80043fc <memchr>
 800438e:	b108      	cbz	r0, 8004394 <_printf_i+0x1bc>
 8004390:	1b40      	subs	r0, r0, r5
 8004392:	6060      	str	r0, [r4, #4]
 8004394:	6863      	ldr	r3, [r4, #4]
 8004396:	6123      	str	r3, [r4, #16]
 8004398:	2300      	movs	r3, #0
 800439a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800439e:	e7a7      	b.n	80042f0 <_printf_i+0x118>
 80043a0:	6923      	ldr	r3, [r4, #16]
 80043a2:	462a      	mov	r2, r5
 80043a4:	4639      	mov	r1, r7
 80043a6:	4630      	mov	r0, r6
 80043a8:	47c0      	blx	r8
 80043aa:	3001      	adds	r0, #1
 80043ac:	d0aa      	beq.n	8004304 <_printf_i+0x12c>
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	079b      	lsls	r3, r3, #30
 80043b2:	d413      	bmi.n	80043dc <_printf_i+0x204>
 80043b4:	68e0      	ldr	r0, [r4, #12]
 80043b6:	9b03      	ldr	r3, [sp, #12]
 80043b8:	4298      	cmp	r0, r3
 80043ba:	bfb8      	it	lt
 80043bc:	4618      	movlt	r0, r3
 80043be:	e7a3      	b.n	8004308 <_printf_i+0x130>
 80043c0:	2301      	movs	r3, #1
 80043c2:	464a      	mov	r2, r9
 80043c4:	4639      	mov	r1, r7
 80043c6:	4630      	mov	r0, r6
 80043c8:	47c0      	blx	r8
 80043ca:	3001      	adds	r0, #1
 80043cc:	d09a      	beq.n	8004304 <_printf_i+0x12c>
 80043ce:	3501      	adds	r5, #1
 80043d0:	68e3      	ldr	r3, [r4, #12]
 80043d2:	9a03      	ldr	r2, [sp, #12]
 80043d4:	1a9b      	subs	r3, r3, r2
 80043d6:	42ab      	cmp	r3, r5
 80043d8:	dcf2      	bgt.n	80043c0 <_printf_i+0x1e8>
 80043da:	e7eb      	b.n	80043b4 <_printf_i+0x1dc>
 80043dc:	2500      	movs	r5, #0
 80043de:	f104 0919 	add.w	r9, r4, #25
 80043e2:	e7f5      	b.n	80043d0 <_printf_i+0x1f8>
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1ac      	bne.n	8004342 <_printf_i+0x16a>
 80043e8:	7803      	ldrb	r3, [r0, #0]
 80043ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043f2:	e76c      	b.n	80042ce <_printf_i+0xf6>
 80043f4:	0800469d 	.word	0x0800469d
 80043f8:	080046ae 	.word	0x080046ae

080043fc <memchr>:
 80043fc:	b510      	push	{r4, lr}
 80043fe:	b2c9      	uxtb	r1, r1
 8004400:	4402      	add	r2, r0
 8004402:	4290      	cmp	r0, r2
 8004404:	4603      	mov	r3, r0
 8004406:	d101      	bne.n	800440c <memchr+0x10>
 8004408:	2300      	movs	r3, #0
 800440a:	e003      	b.n	8004414 <memchr+0x18>
 800440c:	781c      	ldrb	r4, [r3, #0]
 800440e:	3001      	adds	r0, #1
 8004410:	428c      	cmp	r4, r1
 8004412:	d1f6      	bne.n	8004402 <memchr+0x6>
 8004414:	4618      	mov	r0, r3
 8004416:	bd10      	pop	{r4, pc}

08004418 <memcpy>:
 8004418:	b510      	push	{r4, lr}
 800441a:	1e43      	subs	r3, r0, #1
 800441c:	440a      	add	r2, r1
 800441e:	4291      	cmp	r1, r2
 8004420:	d100      	bne.n	8004424 <memcpy+0xc>
 8004422:	bd10      	pop	{r4, pc}
 8004424:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004428:	f803 4f01 	strb.w	r4, [r3, #1]!
 800442c:	e7f7      	b.n	800441e <memcpy+0x6>

0800442e <memmove>:
 800442e:	4288      	cmp	r0, r1
 8004430:	b510      	push	{r4, lr}
 8004432:	eb01 0302 	add.w	r3, r1, r2
 8004436:	d807      	bhi.n	8004448 <memmove+0x1a>
 8004438:	1e42      	subs	r2, r0, #1
 800443a:	4299      	cmp	r1, r3
 800443c:	d00a      	beq.n	8004454 <memmove+0x26>
 800443e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004442:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004446:	e7f8      	b.n	800443a <memmove+0xc>
 8004448:	4283      	cmp	r3, r0
 800444a:	d9f5      	bls.n	8004438 <memmove+0xa>
 800444c:	1881      	adds	r1, r0, r2
 800444e:	1ad2      	subs	r2, r2, r3
 8004450:	42d3      	cmn	r3, r2
 8004452:	d100      	bne.n	8004456 <memmove+0x28>
 8004454:	bd10      	pop	{r4, pc}
 8004456:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800445a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800445e:	e7f7      	b.n	8004450 <memmove+0x22>

08004460 <_free_r>:
 8004460:	b538      	push	{r3, r4, r5, lr}
 8004462:	4605      	mov	r5, r0
 8004464:	2900      	cmp	r1, #0
 8004466:	d043      	beq.n	80044f0 <_free_r+0x90>
 8004468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800446c:	1f0c      	subs	r4, r1, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	bfb8      	it	lt
 8004472:	18e4      	addlt	r4, r4, r3
 8004474:	f000 f8d0 	bl	8004618 <__malloc_lock>
 8004478:	4a1e      	ldr	r2, [pc, #120]	; (80044f4 <_free_r+0x94>)
 800447a:	6813      	ldr	r3, [r2, #0]
 800447c:	4610      	mov	r0, r2
 800447e:	b933      	cbnz	r3, 800448e <_free_r+0x2e>
 8004480:	6063      	str	r3, [r4, #4]
 8004482:	6014      	str	r4, [r2, #0]
 8004484:	4628      	mov	r0, r5
 8004486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800448a:	f000 b8c6 	b.w	800461a <__malloc_unlock>
 800448e:	42a3      	cmp	r3, r4
 8004490:	d90b      	bls.n	80044aa <_free_r+0x4a>
 8004492:	6821      	ldr	r1, [r4, #0]
 8004494:	1862      	adds	r2, r4, r1
 8004496:	4293      	cmp	r3, r2
 8004498:	bf01      	itttt	eq
 800449a:	681a      	ldreq	r2, [r3, #0]
 800449c:	685b      	ldreq	r3, [r3, #4]
 800449e:	1852      	addeq	r2, r2, r1
 80044a0:	6022      	streq	r2, [r4, #0]
 80044a2:	6063      	str	r3, [r4, #4]
 80044a4:	6004      	str	r4, [r0, #0]
 80044a6:	e7ed      	b.n	8004484 <_free_r+0x24>
 80044a8:	4613      	mov	r3, r2
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	b10a      	cbz	r2, 80044b2 <_free_r+0x52>
 80044ae:	42a2      	cmp	r2, r4
 80044b0:	d9fa      	bls.n	80044a8 <_free_r+0x48>
 80044b2:	6819      	ldr	r1, [r3, #0]
 80044b4:	1858      	adds	r0, r3, r1
 80044b6:	42a0      	cmp	r0, r4
 80044b8:	d10b      	bne.n	80044d2 <_free_r+0x72>
 80044ba:	6820      	ldr	r0, [r4, #0]
 80044bc:	4401      	add	r1, r0
 80044be:	1858      	adds	r0, r3, r1
 80044c0:	4282      	cmp	r2, r0
 80044c2:	6019      	str	r1, [r3, #0]
 80044c4:	d1de      	bne.n	8004484 <_free_r+0x24>
 80044c6:	6810      	ldr	r0, [r2, #0]
 80044c8:	6852      	ldr	r2, [r2, #4]
 80044ca:	4401      	add	r1, r0
 80044cc:	6019      	str	r1, [r3, #0]
 80044ce:	605a      	str	r2, [r3, #4]
 80044d0:	e7d8      	b.n	8004484 <_free_r+0x24>
 80044d2:	d902      	bls.n	80044da <_free_r+0x7a>
 80044d4:	230c      	movs	r3, #12
 80044d6:	602b      	str	r3, [r5, #0]
 80044d8:	e7d4      	b.n	8004484 <_free_r+0x24>
 80044da:	6820      	ldr	r0, [r4, #0]
 80044dc:	1821      	adds	r1, r4, r0
 80044de:	428a      	cmp	r2, r1
 80044e0:	bf01      	itttt	eq
 80044e2:	6811      	ldreq	r1, [r2, #0]
 80044e4:	6852      	ldreq	r2, [r2, #4]
 80044e6:	1809      	addeq	r1, r1, r0
 80044e8:	6021      	streq	r1, [r4, #0]
 80044ea:	6062      	str	r2, [r4, #4]
 80044ec:	605c      	str	r4, [r3, #4]
 80044ee:	e7c9      	b.n	8004484 <_free_r+0x24>
 80044f0:	bd38      	pop	{r3, r4, r5, pc}
 80044f2:	bf00      	nop
 80044f4:	2000009c 	.word	0x2000009c

080044f8 <_malloc_r>:
 80044f8:	b570      	push	{r4, r5, r6, lr}
 80044fa:	1ccd      	adds	r5, r1, #3
 80044fc:	f025 0503 	bic.w	r5, r5, #3
 8004500:	3508      	adds	r5, #8
 8004502:	2d0c      	cmp	r5, #12
 8004504:	bf38      	it	cc
 8004506:	250c      	movcc	r5, #12
 8004508:	2d00      	cmp	r5, #0
 800450a:	4606      	mov	r6, r0
 800450c:	db01      	blt.n	8004512 <_malloc_r+0x1a>
 800450e:	42a9      	cmp	r1, r5
 8004510:	d903      	bls.n	800451a <_malloc_r+0x22>
 8004512:	230c      	movs	r3, #12
 8004514:	6033      	str	r3, [r6, #0]
 8004516:	2000      	movs	r0, #0
 8004518:	bd70      	pop	{r4, r5, r6, pc}
 800451a:	f000 f87d 	bl	8004618 <__malloc_lock>
 800451e:	4a21      	ldr	r2, [pc, #132]	; (80045a4 <_malloc_r+0xac>)
 8004520:	6814      	ldr	r4, [r2, #0]
 8004522:	4621      	mov	r1, r4
 8004524:	b991      	cbnz	r1, 800454c <_malloc_r+0x54>
 8004526:	4c20      	ldr	r4, [pc, #128]	; (80045a8 <_malloc_r+0xb0>)
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	b91b      	cbnz	r3, 8004534 <_malloc_r+0x3c>
 800452c:	4630      	mov	r0, r6
 800452e:	f000 f863 	bl	80045f8 <_sbrk_r>
 8004532:	6020      	str	r0, [r4, #0]
 8004534:	4629      	mov	r1, r5
 8004536:	4630      	mov	r0, r6
 8004538:	f000 f85e 	bl	80045f8 <_sbrk_r>
 800453c:	1c43      	adds	r3, r0, #1
 800453e:	d124      	bne.n	800458a <_malloc_r+0x92>
 8004540:	230c      	movs	r3, #12
 8004542:	4630      	mov	r0, r6
 8004544:	6033      	str	r3, [r6, #0]
 8004546:	f000 f868 	bl	800461a <__malloc_unlock>
 800454a:	e7e4      	b.n	8004516 <_malloc_r+0x1e>
 800454c:	680b      	ldr	r3, [r1, #0]
 800454e:	1b5b      	subs	r3, r3, r5
 8004550:	d418      	bmi.n	8004584 <_malloc_r+0x8c>
 8004552:	2b0b      	cmp	r3, #11
 8004554:	d90f      	bls.n	8004576 <_malloc_r+0x7e>
 8004556:	600b      	str	r3, [r1, #0]
 8004558:	18cc      	adds	r4, r1, r3
 800455a:	50cd      	str	r5, [r1, r3]
 800455c:	4630      	mov	r0, r6
 800455e:	f000 f85c 	bl	800461a <__malloc_unlock>
 8004562:	f104 000b 	add.w	r0, r4, #11
 8004566:	1d23      	adds	r3, r4, #4
 8004568:	f020 0007 	bic.w	r0, r0, #7
 800456c:	1ac3      	subs	r3, r0, r3
 800456e:	d0d3      	beq.n	8004518 <_malloc_r+0x20>
 8004570:	425a      	negs	r2, r3
 8004572:	50e2      	str	r2, [r4, r3]
 8004574:	e7d0      	b.n	8004518 <_malloc_r+0x20>
 8004576:	684b      	ldr	r3, [r1, #4]
 8004578:	428c      	cmp	r4, r1
 800457a:	bf16      	itet	ne
 800457c:	6063      	strne	r3, [r4, #4]
 800457e:	6013      	streq	r3, [r2, #0]
 8004580:	460c      	movne	r4, r1
 8004582:	e7eb      	b.n	800455c <_malloc_r+0x64>
 8004584:	460c      	mov	r4, r1
 8004586:	6849      	ldr	r1, [r1, #4]
 8004588:	e7cc      	b.n	8004524 <_malloc_r+0x2c>
 800458a:	1cc4      	adds	r4, r0, #3
 800458c:	f024 0403 	bic.w	r4, r4, #3
 8004590:	42a0      	cmp	r0, r4
 8004592:	d005      	beq.n	80045a0 <_malloc_r+0xa8>
 8004594:	1a21      	subs	r1, r4, r0
 8004596:	4630      	mov	r0, r6
 8004598:	f000 f82e 	bl	80045f8 <_sbrk_r>
 800459c:	3001      	adds	r0, #1
 800459e:	d0cf      	beq.n	8004540 <_malloc_r+0x48>
 80045a0:	6025      	str	r5, [r4, #0]
 80045a2:	e7db      	b.n	800455c <_malloc_r+0x64>
 80045a4:	2000009c 	.word	0x2000009c
 80045a8:	200000a0 	.word	0x200000a0

080045ac <_realloc_r>:
 80045ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ae:	4607      	mov	r7, r0
 80045b0:	4614      	mov	r4, r2
 80045b2:	460e      	mov	r6, r1
 80045b4:	b921      	cbnz	r1, 80045c0 <_realloc_r+0x14>
 80045b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80045ba:	4611      	mov	r1, r2
 80045bc:	f7ff bf9c 	b.w	80044f8 <_malloc_r>
 80045c0:	b922      	cbnz	r2, 80045cc <_realloc_r+0x20>
 80045c2:	f7ff ff4d 	bl	8004460 <_free_r>
 80045c6:	4625      	mov	r5, r4
 80045c8:	4628      	mov	r0, r5
 80045ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045cc:	f000 f826 	bl	800461c <_malloc_usable_size_r>
 80045d0:	42a0      	cmp	r0, r4
 80045d2:	d20f      	bcs.n	80045f4 <_realloc_r+0x48>
 80045d4:	4621      	mov	r1, r4
 80045d6:	4638      	mov	r0, r7
 80045d8:	f7ff ff8e 	bl	80044f8 <_malloc_r>
 80045dc:	4605      	mov	r5, r0
 80045de:	2800      	cmp	r0, #0
 80045e0:	d0f2      	beq.n	80045c8 <_realloc_r+0x1c>
 80045e2:	4631      	mov	r1, r6
 80045e4:	4622      	mov	r2, r4
 80045e6:	f7ff ff17 	bl	8004418 <memcpy>
 80045ea:	4631      	mov	r1, r6
 80045ec:	4638      	mov	r0, r7
 80045ee:	f7ff ff37 	bl	8004460 <_free_r>
 80045f2:	e7e9      	b.n	80045c8 <_realloc_r+0x1c>
 80045f4:	4635      	mov	r5, r6
 80045f6:	e7e7      	b.n	80045c8 <_realloc_r+0x1c>

080045f8 <_sbrk_r>:
 80045f8:	b538      	push	{r3, r4, r5, lr}
 80045fa:	2300      	movs	r3, #0
 80045fc:	4c05      	ldr	r4, [pc, #20]	; (8004614 <_sbrk_r+0x1c>)
 80045fe:	4605      	mov	r5, r0
 8004600:	4608      	mov	r0, r1
 8004602:	6023      	str	r3, [r4, #0]
 8004604:	f7fc fca4 	bl	8000f50 <_sbrk>
 8004608:	1c43      	adds	r3, r0, #1
 800460a:	d102      	bne.n	8004612 <_sbrk_r+0x1a>
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	b103      	cbz	r3, 8004612 <_sbrk_r+0x1a>
 8004610:	602b      	str	r3, [r5, #0]
 8004612:	bd38      	pop	{r3, r4, r5, pc}
 8004614:	2000021c 	.word	0x2000021c

08004618 <__malloc_lock>:
 8004618:	4770      	bx	lr

0800461a <__malloc_unlock>:
 800461a:	4770      	bx	lr

0800461c <_malloc_usable_size_r>:
 800461c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004620:	1f18      	subs	r0, r3, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	bfbc      	itt	lt
 8004626:	580b      	ldrlt	r3, [r1, r0]
 8004628:	18c0      	addlt	r0, r0, r3
 800462a:	4770      	bx	lr

0800462c <_init>:
 800462c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462e:	bf00      	nop
 8004630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004632:	bc08      	pop	{r3}
 8004634:	469e      	mov	lr, r3
 8004636:	4770      	bx	lr

08004638 <_fini>:
 8004638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463a:	bf00      	nop
 800463c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800463e:	bc08      	pop	{r3}
 8004640:	469e      	mov	lr, r3
 8004642:	4770      	bx	lr
